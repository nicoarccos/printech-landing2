"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tsparticles-shape-image";
exports.ids = ["vendor-chunks/tsparticles-shape-image"];
exports.modules = {

/***/ "(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/ByteStream.js":
/*!*************************************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/esm/GifUtils/ByteStream.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ByteStream: () => (/* binding */ ByteStream)\n/* harmony export */ });\nclass ByteStream {\n    constructor(bytes){\n        this.pos = 0;\n        this.data = new Uint8ClampedArray(bytes);\n    }\n    getString(count) {\n        const slice = this.data.slice(this.pos, this.pos + count);\n        this.pos += slice.length;\n        return slice.reduce((acc, curr)=>acc + String.fromCharCode(curr), \"\");\n    }\n    nextByte() {\n        return this.data[this.pos++];\n    }\n    nextTwoBytes() {\n        this.pos += 2;\n        return this.data[this.pos - 2] + (this.data[this.pos - 1] << 8);\n    }\n    readSubBlocks() {\n        let blockString = \"\", size = 0;\n        do {\n            size = this.data[this.pos++];\n            for(let count = size; --count >= 0; blockString += String.fromCharCode(this.data[this.pos++])){}\n        }while (size !== 0);\n        return blockString;\n    }\n    readSubBlocksBin() {\n        let size = 0, len = 0;\n        for(let offset = 0; (size = this.data[this.pos + offset]) !== 0; offset += size + 1){\n            len += size;\n        }\n        const blockData = new Uint8Array(len);\n        for(let i = 0; (size = this.data[this.pos++]) !== 0;){\n            for(let count = size; --count >= 0; blockData[i++] = this.data[this.pos++]){}\n        }\n        return blockData;\n    }\n    skipSubBlocks() {\n        for(; this.data[this.pos] !== 0; this.pos += this.data[this.pos] + 1){}\n        this.pos++;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvZXNtL0dpZlV0aWxzL0J5dGVTdHJlYW0uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BO0lBQ1RDLFlBQVlDLEtBQUssQ0FBRTtRQUNmLElBQUksQ0FBQ0MsR0FBRyxHQUFHO1FBQ1gsSUFBSSxDQUFDQyxJQUFJLEdBQUcsSUFBSUMsa0JBQWtCSDtJQUN0QztJQUNBSSxVQUFVQyxLQUFLLEVBQUU7UUFDYixNQUFNQyxRQUFRLElBQUksQ0FBQ0osSUFBSSxDQUFDSSxLQUFLLENBQUMsSUFBSSxDQUFDTCxHQUFHLEVBQUUsSUFBSSxDQUFDQSxHQUFHLEdBQUdJO1FBQ25ELElBQUksQ0FBQ0osR0FBRyxJQUFJSyxNQUFNQyxNQUFNO1FBQ3hCLE9BQU9ELE1BQU1FLE1BQU0sQ0FBQyxDQUFDQyxLQUFLQyxPQUFTRCxNQUFNRSxPQUFPQyxZQUFZLENBQUNGLE9BQU87SUFDeEU7SUFDQUcsV0FBVztRQUNQLE9BQU8sSUFBSSxDQUFDWCxJQUFJLENBQUMsSUFBSSxDQUFDRCxHQUFHLEdBQUc7SUFDaEM7SUFDQWEsZUFBZTtRQUNYLElBQUksQ0FBQ2IsR0FBRyxJQUFJO1FBQ1osT0FBTyxJQUFJLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUNELEdBQUcsR0FBRyxFQUFFLEdBQUksS0FBSSxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDRCxHQUFHLEdBQUcsRUFBRSxJQUFJO0lBQ2pFO0lBQ0FjLGdCQUFnQjtRQUNaLElBQUlDLGNBQWMsSUFBSUMsT0FBTztRQUM3QixHQUFHO1lBQ0NBLE9BQU8sSUFBSSxDQUFDZixJQUFJLENBQUMsSUFBSSxDQUFDRCxHQUFHLEdBQUc7WUFDNUIsSUFBSyxJQUFJSSxRQUFRWSxNQUFNLEVBQUVaLFNBQVMsR0FBR1csZUFBZUwsT0FBT0MsWUFBWSxDQUFDLElBQUksQ0FBQ1YsSUFBSSxDQUFDLElBQUksQ0FBQ0QsR0FBRyxHQUFHLEVBQUcsQ0FDaEc7UUFDSixRQUFTZ0IsU0FBUyxHQUFHO1FBQ3JCLE9BQU9EO0lBQ1g7SUFDQUUsbUJBQW1CO1FBQ2YsSUFBSUQsT0FBTyxHQUFHRSxNQUFNO1FBQ3BCLElBQUssSUFBSUMsU0FBUyxHQUFHLENBQUNILE9BQU8sSUFBSSxDQUFDZixJQUFJLENBQUMsSUFBSSxDQUFDRCxHQUFHLEdBQUdtQixPQUFPLE1BQU0sR0FBR0EsVUFBVUgsT0FBTyxFQUFHO1lBQ2xGRSxPQUFPRjtRQUNYO1FBQ0EsTUFBTUksWUFBWSxJQUFJQyxXQUFXSDtRQUNqQyxJQUFLLElBQUlJLElBQUksR0FBRyxDQUFDTixPQUFPLElBQUksQ0FBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQ0QsR0FBRyxHQUFHLE1BQU0sR0FBSTtZQUNuRCxJQUFLLElBQUlJLFFBQVFZLE1BQU0sRUFBRVosU0FBUyxHQUFHZ0IsU0FBUyxDQUFDRSxJQUFJLEdBQUcsSUFBSSxDQUFDckIsSUFBSSxDQUFDLElBQUksQ0FBQ0QsR0FBRyxHQUFHLENBQUUsQ0FDN0U7UUFDSjtRQUNBLE9BQU9vQjtJQUNYO0lBQ0FHLGdCQUFnQjtRQUNaLE1BQU8sSUFBSSxDQUFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQ0QsR0FBRyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUNBLEdBQUcsSUFBSSxJQUFJLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUNELEdBQUcsQ0FBQyxHQUFHLEVBQUcsQ0FDdkU7UUFDQSxJQUFJLENBQUNBLEdBQUc7SUFDWjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJpbnRlY2gtbGFuZGluZy8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy1zaGFwZS1pbWFnZS9lc20vR2lmVXRpbHMvQnl0ZVN0cmVhbS5qcz80MzRjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBCeXRlU3RyZWFtIHtcbiAgICBjb25zdHJ1Y3RvcihieXRlcykge1xuICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgIHRoaXMuZGF0YSA9IG5ldyBVaW50OENsYW1wZWRBcnJheShieXRlcyk7XG4gICAgfVxuICAgIGdldFN0cmluZyhjb3VudCkge1xuICAgICAgICBjb25zdCBzbGljZSA9IHRoaXMuZGF0YS5zbGljZSh0aGlzLnBvcywgdGhpcy5wb3MgKyBjb3VudCk7XG4gICAgICAgIHRoaXMucG9zICs9IHNsaWNlLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHNsaWNlLnJlZHVjZSgoYWNjLCBjdXJyKSA9PiBhY2MgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGN1cnIpLCBcIlwiKTtcbiAgICB9XG4gICAgbmV4dEJ5dGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFbdGhpcy5wb3MrK107XG4gICAgfVxuICAgIG5leHRUd29CeXRlcygpIHtcbiAgICAgICAgdGhpcy5wb3MgKz0gMjtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVt0aGlzLnBvcyAtIDJdICsgKHRoaXMuZGF0YVt0aGlzLnBvcyAtIDFdIDw8IDgpO1xuICAgIH1cbiAgICByZWFkU3ViQmxvY2tzKCkge1xuICAgICAgICBsZXQgYmxvY2tTdHJpbmcgPSBcIlwiLCBzaXplID0gMDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgc2l6ZSA9IHRoaXMuZGF0YVt0aGlzLnBvcysrXTtcbiAgICAgICAgICAgIGZvciAobGV0IGNvdW50ID0gc2l6ZTsgLS1jb3VudCA+PSAwOyBibG9ja1N0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHRoaXMuZGF0YVt0aGlzLnBvcysrXSkpIHtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoc2l6ZSAhPT0gMCk7XG4gICAgICAgIHJldHVybiBibG9ja1N0cmluZztcbiAgICB9XG4gICAgcmVhZFN1YkJsb2Nrc0JpbigpIHtcbiAgICAgICAgbGV0IHNpemUgPSAwLCBsZW4gPSAwO1xuICAgICAgICBmb3IgKGxldCBvZmZzZXQgPSAwOyAoc2l6ZSA9IHRoaXMuZGF0YVt0aGlzLnBvcyArIG9mZnNldF0pICE9PSAwOyBvZmZzZXQgKz0gc2l6ZSArIDEpIHtcbiAgICAgICAgICAgIGxlbiArPSBzaXplO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJsb2NrRGF0YSA9IG5ldyBVaW50OEFycmF5KGxlbik7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyAoc2l6ZSA9IHRoaXMuZGF0YVt0aGlzLnBvcysrXSkgIT09IDA7KSB7XG4gICAgICAgICAgICBmb3IgKGxldCBjb3VudCA9IHNpemU7IC0tY291bnQgPj0gMDsgYmxvY2tEYXRhW2krK10gPSB0aGlzLmRhdGFbdGhpcy5wb3MrK10pIHtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmxvY2tEYXRhO1xuICAgIH1cbiAgICBza2lwU3ViQmxvY2tzKCkge1xuICAgICAgICBmb3IgKDsgdGhpcy5kYXRhW3RoaXMucG9zXSAhPT0gMDsgdGhpcy5wb3MgKz0gdGhpcy5kYXRhW3RoaXMucG9zXSArIDEpIHtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBvcysrO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJCeXRlU3RyZWFtIiwiY29uc3RydWN0b3IiLCJieXRlcyIsInBvcyIsImRhdGEiLCJVaW50OENsYW1wZWRBcnJheSIsImdldFN0cmluZyIsImNvdW50Iiwic2xpY2UiLCJsZW5ndGgiLCJyZWR1Y2UiLCJhY2MiLCJjdXJyIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwibmV4dEJ5dGUiLCJuZXh0VHdvQnl0ZXMiLCJyZWFkU3ViQmxvY2tzIiwiYmxvY2tTdHJpbmciLCJzaXplIiwicmVhZFN1YkJsb2Nrc0JpbiIsImxlbiIsIm9mZnNldCIsImJsb2NrRGF0YSIsIlVpbnQ4QXJyYXkiLCJpIiwic2tpcFN1YkJsb2NrcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/ByteStream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/Constants.js":
/*!************************************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/esm/GifUtils/Constants.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InterlaceOffsets: () => (/* binding */ InterlaceOffsets),\n/* harmony export */   InterlaceSteps: () => (/* binding */ InterlaceSteps)\n/* harmony export */ });\nconst InterlaceOffsets = [\n    0,\n    4,\n    2,\n    1\n];\nconst InterlaceSteps = [\n    8,\n    8,\n    4,\n    2\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvZXNtL0dpZlV0aWxzL0NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLE1BQU1BLG1CQUFtQjtJQUFDO0lBQUc7SUFBRztJQUFHO0NBQUUsQ0FBQztBQUN0QyxNQUFNQyxpQkFBaUI7SUFBQztJQUFHO0lBQUc7SUFBRztDQUFFLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmludGVjaC1sYW5kaW5nLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzLXNoYXBlLWltYWdlL2VzbS9HaWZVdGlscy9Db25zdGFudHMuanM/YzcxZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgSW50ZXJsYWNlT2Zmc2V0cyA9IFswLCA0LCAyLCAxXTtcbmV4cG9ydCBjb25zdCBJbnRlcmxhY2VTdGVwcyA9IFs4LCA4LCA0LCAyXTtcbiJdLCJuYW1lcyI6WyJJbnRlcmxhY2VPZmZzZXRzIiwiSW50ZXJsYWNlU3RlcHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/Constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/Utils.js":
/*!********************************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/esm/GifUtils/Utils.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeGIF: () => (/* binding */ decodeGIF),\n/* harmony export */   getGIFLoopAmount: () => (/* binding */ getGIFLoopAmount)\n/* harmony export */ });\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Constants */ \"(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/Constants.js\");\n/* harmony import */ var _ByteStream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ByteStream */ \"(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/ByteStream.js\");\n\n\nfunction parseColorTable(byteStream, count) {\n    const colors = [];\n    for(let i = 0; i < count; i++){\n        colors.push({\n            r: byteStream.data[byteStream.pos],\n            g: byteStream.data[byteStream.pos + 1],\n            b: byteStream.data[byteStream.pos + 2]\n        });\n        byteStream.pos += 3;\n    }\n    return colors;\n}\nasync function parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex) {\n    switch(byteStream.nextByte()){\n        case 249:\n            {\n                const frame = gif.frames[getFrameIndex(false)];\n                byteStream.pos++;\n                const packedByte = byteStream.nextByte();\n                frame.GCreserved = (packedByte & 0xe0) >>> 5;\n                frame.disposalMethod = (packedByte & 0x1c) >>> 2;\n                frame.userInputDelayFlag = (packedByte & 2) === 2;\n                const transparencyFlag = (packedByte & 1) === 1;\n                frame.delayTime = byteStream.nextTwoBytes() * 0xa;\n                const transparencyIndex = byteStream.nextByte();\n                if (transparencyFlag) {\n                    getTransparencyIndex(transparencyIndex);\n                }\n                byteStream.pos++;\n                break;\n            }\n        case 255:\n            {\n                byteStream.pos++;\n                const applicationExtension = {\n                    identifier: byteStream.getString(8),\n                    authenticationCode: byteStream.getString(3),\n                    data: byteStream.readSubBlocksBin()\n                };\n                gif.applicationExtensions.push(applicationExtension);\n                break;\n            }\n        case 254:\n            {\n                gif.comments.push([\n                    getFrameIndex(false),\n                    byteStream.readSubBlocks()\n                ]);\n                break;\n            }\n        case 1:\n            {\n                if (gif.globalColorTable.length === 0) {\n                    throw new EvalError(\"plain text extension without global color table\");\n                }\n                byteStream.pos++;\n                gif.frames[getFrameIndex(false)].plainTextData = {\n                    left: byteStream.nextTwoBytes(),\n                    top: byteStream.nextTwoBytes(),\n                    width: byteStream.nextTwoBytes(),\n                    height: byteStream.nextTwoBytes(),\n                    charSize: {\n                        width: byteStream.nextTwoBytes(),\n                        height: byteStream.nextTwoBytes()\n                    },\n                    foregroundColor: byteStream.nextByte(),\n                    backgroundColor: byteStream.nextByte(),\n                    text: byteStream.readSubBlocks()\n                };\n                break;\n            }\n        default:\n            byteStream.skipSubBlocks();\n            break;\n    }\n}\nasync function parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    const frame = gif.frames[getFrameIndex(true)];\n    frame.left = byteStream.nextTwoBytes();\n    frame.top = byteStream.nextTwoBytes();\n    frame.width = byteStream.nextTwoBytes();\n    frame.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), localColorTableFlag = (packedByte & 0x80) === 0x80, interlacedFlag = (packedByte & 0x40) === 0x40;\n    frame.sortFlag = (packedByte & 0x20) === 0x20;\n    frame.reserved = (packedByte & 0x18) >>> 3;\n    const localColorCount = 1 << (packedByte & 7) + 1;\n    if (localColorTableFlag) {\n        frame.localColorTable = parseColorTable(byteStream, localColorCount);\n    }\n    const getColor = (index)=>{\n        const { r, g, b } = (localColorTableFlag ? frame.localColorTable : gif.globalColorTable)[index];\n        return {\n            r,\n            g,\n            b,\n            a: index === getTransparencyIndex(null) ? avgAlpha ? ~~((r + g + b) / 3) : 0 : 255\n        };\n    };\n    const image = (()=>{\n        try {\n            return new ImageData(frame.width, frame.height, {\n                colorSpace: \"srgb\"\n            });\n        } catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (image == null) {\n        throw new EvalError(\"GIF frame size is to large\");\n    }\n    const minCodeSize = byteStream.nextByte(), imageData = byteStream.readSubBlocksBin(), clearCode = 1 << minCodeSize;\n    const readBits = (pos, len)=>{\n        const bytePos = pos >>> 3, bitPos = pos & 7;\n        return (imageData[bytePos] + (imageData[bytePos + 1] << 8) + (imageData[bytePos + 2] << 16) & (1 << len) - 1 << bitPos) >>> bitPos;\n    };\n    if (interlacedFlag) {\n        for(let code = 0, size = minCodeSize + 1, pos = 0, dic = [\n            [\n                0\n            ]\n        ], pass = 0; pass < 4; pass++){\n            if (_Constants__WEBPACK_IMPORTED_MODULE_0__.InterlaceOffsets[pass] < frame.height) {\n                for(let pixelPos = 0, lineIndex = 0;;){\n                    const last = code;\n                    code = readBits(pos, size);\n                    pos += size + 1;\n                    if (code === clearCode) {\n                        size = minCodeSize + 1;\n                        dic.length = clearCode + 2;\n                        for(let i = 0; i < dic.length; i++){\n                            dic[i] = i < clearCode ? [\n                                i\n                            ] : [];\n                        }\n                    } else {\n                        if (code >= dic.length) {\n                            dic.push(dic[last].concat(dic[last][0]));\n                        } else if (last !== clearCode) {\n                            dic.push(dic[last].concat(dic[code][0]));\n                        }\n                        for(let i = 0; i < dic[code].length; i++){\n                            const { r, g, b, a } = getColor(dic[code][i]);\n                            image.data.set([\n                                r,\n                                g,\n                                b,\n                                a\n                            ], _Constants__WEBPACK_IMPORTED_MODULE_0__.InterlaceOffsets[pass] * frame.width + _Constants__WEBPACK_IMPORTED_MODULE_0__.InterlaceSteps[pass] * lineIndex + pixelPos % (frame.width * 4));\n                            pixelPos += 4;\n                        }\n                        if (dic.length === 1 << size && size < 0xc) {\n                            size++;\n                        }\n                    }\n                    if (pixelPos === frame.width * 4 * (lineIndex + 1)) {\n                        lineIndex++;\n                        if (_Constants__WEBPACK_IMPORTED_MODULE_0__.InterlaceOffsets[pass] + _Constants__WEBPACK_IMPORTED_MODULE_0__.InterlaceSteps[pass] * lineIndex >= frame.height) {\n                            break;\n                        }\n                    }\n                }\n            }\n            progressCallback?.(byteStream.pos / (byteStream.data.length - 1), getFrameIndex(false) + 1, image, {\n                x: frame.left,\n                y: frame.top\n            }, {\n                width: gif.width,\n                height: gif.height\n            });\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n    } else {\n        for(let code = 0, size = minCodeSize + 1, pos = 0, dic = [\n            [\n                0\n            ]\n        ], pixelPos = -4;;){\n            const last = code;\n            code = readBits(pos, size);\n            pos += size;\n            if (code === clearCode) {\n                size = minCodeSize + 1;\n                dic.length = clearCode + 2;\n                for(let i = 0; i < dic.length; i++){\n                    dic[i] = i < clearCode ? [\n                        i\n                    ] : [];\n                }\n            } else {\n                if (code === clearCode + 1) {\n                    break;\n                }\n                if (code >= dic.length) {\n                    dic.push(dic[last].concat(dic[last][0]));\n                } else if (last !== clearCode) {\n                    dic.push(dic[last].concat(dic[code][0]));\n                }\n                for(let i = 0; i < dic[code].length; i++){\n                    const { r, g, b, a } = getColor(dic[code][i]);\n                    image.data.set([\n                        r,\n                        g,\n                        b,\n                        a\n                    ], pixelPos += 4);\n                }\n                if (dic.length >= 1 << size && size < 0xc) {\n                    size++;\n                }\n            }\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n        progressCallback?.((byteStream.pos + 1) / byteStream.data.length, getFrameIndex(false) + 1, frame.image, {\n            x: frame.left,\n            y: frame.top\n        }, {\n            width: gif.width,\n            height: gif.height\n        });\n    }\n}\nasync function parseBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    switch(byteStream.nextByte()){\n        case 59:\n            return true;\n        case 44:\n            await parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback);\n            break;\n        case 33:\n            await parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex);\n            break;\n        default:\n            throw new EvalError(\"undefined block found\");\n    }\n    return false;\n}\nfunction getGIFLoopAmount(gif) {\n    for (const extension of gif.applicationExtensions){\n        if (extension.identifier + extension.authenticationCode !== \"NETSCAPE2.0\") {\n            continue;\n        }\n        return extension.data[1] + (extension.data[2] << 8);\n    }\n    return NaN;\n}\nasync function decodeGIF(gifURL, progressCallback, avgAlpha) {\n    if (!avgAlpha) avgAlpha = false;\n    const res = await fetch(gifURL);\n    if (!res.ok && res.status === 404) {\n        throw new EvalError(\"file not found\");\n    }\n    const buffer = await res.arrayBuffer();\n    const gif = {\n        width: 0,\n        height: 0,\n        totalTime: 0,\n        colorRes: 0,\n        pixelAspectRatio: 0,\n        frames: [],\n        sortFlag: false,\n        globalColorTable: [],\n        backgroundImage: new ImageData(1, 1, {\n            colorSpace: \"srgb\"\n        }),\n        comments: [],\n        applicationExtensions: []\n    }, byteStream = new _ByteStream__WEBPACK_IMPORTED_MODULE_1__.ByteStream(new Uint8ClampedArray(buffer));\n    if (byteStream.getString(6) !== \"GIF89a\") {\n        throw new Error(\"not a supported GIF file\");\n    }\n    gif.width = byteStream.nextTwoBytes();\n    gif.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), globalColorTableFlag = (packedByte & 0x80) === 0x80;\n    gif.colorRes = (packedByte & 0x70) >>> 4;\n    gif.sortFlag = (packedByte & 8) === 8;\n    const globalColorCount = 1 << (packedByte & 7) + 1, backgroundColorIndex = byteStream.nextByte();\n    gif.pixelAspectRatio = byteStream.nextByte();\n    if (gif.pixelAspectRatio !== 0) {\n        gif.pixelAspectRatio = (gif.pixelAspectRatio + 0xf) / 0x40;\n    }\n    if (globalColorTableFlag) {\n        gif.globalColorTable = parseColorTable(byteStream, globalColorCount);\n    }\n    const backgroundImage = (()=>{\n        try {\n            return new ImageData(gif.width, gif.height, {\n                colorSpace: \"srgb\"\n            });\n        } catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (backgroundImage == null) {\n        throw new Error(\"GIF frame size is to large\");\n    }\n    const { r, g, b } = gif.globalColorTable[backgroundColorIndex];\n    backgroundImage.data.set(globalColorTableFlag ? [\n        r,\n        g,\n        b,\n        255\n    ] : [\n        0,\n        0,\n        0,\n        0\n    ]);\n    for(let i = 4; i < backgroundImage.data.length; i *= 2){\n        backgroundImage.data.copyWithin(i, 0, i);\n    }\n    gif.backgroundImage = backgroundImage;\n    let frameIndex = -1, incrementFrameIndex = true, transparencyIndex = -1;\n    const getframeIndex = (increment)=>{\n        if (increment) {\n            incrementFrameIndex = true;\n        }\n        return frameIndex;\n    };\n    const getTransparencyIndex = (newValue)=>{\n        if (newValue != null) {\n            transparencyIndex = newValue;\n        }\n        return transparencyIndex;\n    };\n    try {\n        do {\n            if (incrementFrameIndex) {\n                gif.frames.push({\n                    left: 0,\n                    top: 0,\n                    width: 0,\n                    height: 0,\n                    disposalMethod: 0,\n                    image: new ImageData(1, 1, {\n                        colorSpace: \"srgb\"\n                    }),\n                    plainTextData: null,\n                    userInputDelayFlag: false,\n                    delayTime: 0,\n                    sortFlag: false,\n                    localColorTable: [],\n                    reserved: 0,\n                    GCreserved: 0\n                });\n                frameIndex++;\n                transparencyIndex = -1;\n                incrementFrameIndex = false;\n            }\n        }while (!await parseBlock(byteStream, gif, avgAlpha, getframeIndex, getTransparencyIndex, progressCallback));\n        gif.frames.length--;\n        for (const frame of gif.frames){\n            if (frame.userInputDelayFlag && frame.delayTime === 0) {\n                gif.totalTime = Infinity;\n                break;\n            }\n            gif.totalTime += frame.delayTime;\n        }\n        return gif;\n    } catch (error) {\n        if (error instanceof EvalError) {\n            throw new Error(`error while parsing frame ${frameIndex} \"${error.message}\"`);\n        }\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/Utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/esm/ImageDrawer.js":
/*!*****************************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/esm/ImageDrawer.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImageDrawer: () => (/* binding */ ImageDrawer)\n/* harmony export */ });\n/* harmony import */ var tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tsparticles-engine */ \"(ssr)/./node_modules/tsparticles-engine/esm/Core/Utils/Constants.js\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ \"(ssr)/./node_modules/tsparticles-shape-image/esm/Utils.js\");\n\n\nclass ImageDrawer {\n    constructor(engine){\n        this.loadImageShape = async (imageShape)=>{\n            if (!this._engine.loadImage) {\n                throw new Error(`${tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.errorPrefix} image shape not initialized`);\n            }\n            await this._engine.loadImage({\n                gif: imageShape.gif,\n                name: imageShape.name,\n                replaceColor: imageShape.replaceColor ?? imageShape.replace_color ?? false,\n                src: imageShape.src\n            });\n        };\n        this._engine = engine;\n    }\n    addImage(image) {\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        this._engine.images.push(image);\n    }\n    draw(context, particle, radius, opacity, delta) {\n        const image = particle.image, element = image?.element;\n        if (!image) {\n            return;\n        }\n        context.globalAlpha = opacity;\n        if (image.gif && image.gifData) {\n            const offscreenCanvas = new OffscreenCanvas(image.gifData.width, image.gifData.height), offscreenContext = offscreenCanvas.getContext(\"2d\");\n            if (!offscreenContext) {\n                throw new Error(\"could not create offscreen canvas context\");\n            }\n            offscreenContext.imageSmoothingQuality = \"low\";\n            offscreenContext.imageSmoothingEnabled = false;\n            offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n            if (particle.gifLoopCount === undefined) {\n                particle.gifLoopCount = image.gifLoopCount ?? 0;\n            }\n            let frameIndex = particle.gifFrame ?? 0;\n            const pos = {\n                x: -image.gifData.width * 0.5,\n                y: -image.gifData.height * 0.5\n            }, frame = image.gifData.frames[frameIndex];\n            if (particle.gifTime === undefined) {\n                particle.gifTime = 0;\n            }\n            if (!frame.bitmap) {\n                return;\n            }\n            context.scale(radius / image.gifData.width, radius / image.gifData.height);\n            switch(frame.disposalMethod){\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 0:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                    break;\n                case 1:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    break;\n                case 2:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                    if (image.gifData.globalColorTable.length === 0) {\n                        offscreenContext.putImageData(image.gifData.frames[0].image, pos.x + frame.left, pos.y + frame.top);\n                    } else {\n                        offscreenContext.putImageData(image.gifData.backgroundImage, pos.x, pos.y);\n                    }\n                    break;\n                case 3:\n                    {\n                        const previousImageData = offscreenContext.getImageData(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                        offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                        context.drawImage(offscreenCanvas, pos.x, pos.y);\n                        offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                        offscreenContext.putImageData(previousImageData, 0, 0);\n                    }\n                    break;\n            }\n            particle.gifTime += delta.value;\n            if (particle.gifTime > frame.delayTime) {\n                particle.gifTime -= frame.delayTime;\n                if (++frameIndex >= image.gifData.frames.length) {\n                    if (--particle.gifLoopCount <= 0) {\n                        return;\n                    }\n                    frameIndex = 0;\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                }\n                particle.gifFrame = frameIndex;\n            }\n            context.scale(image.gifData.width / radius, image.gifData.height / radius);\n        } else if (element) {\n            const ratio = image.ratio, pos = {\n                x: -radius,\n                y: -radius\n            };\n            context.drawImage(element, pos.x, pos.y, radius * 2, radius * 2 / ratio);\n        }\n        context.globalAlpha = 1;\n    }\n    getSidesCount() {\n        return 12;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!options.preload || !this._engine.loadImage) {\n            return;\n        }\n        for (const imageData of options.preload){\n            await this._engine.loadImage(imageData);\n        }\n    }\n    loadShape(particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const imageData = particle.shapeData, image = this._engine.images.find((t)=>t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            this.loadImageShape(imageData).then(()=>{\n                this.loadShape(particle);\n            });\n        }\n    }\n    particleInit(container, particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const images = this._engine.images, imageData = particle.shapeData, color = particle.getFillColor(), image = images.find((t)=>t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            return;\n        }\n        const replaceColor = imageData.replaceColor ?? imageData.replace_color ?? image.replaceColor;\n        if (image.loading) {\n            setTimeout(()=>{\n                this.particleInit(container, particle);\n            });\n            return;\n        }\n        (async ()=>{\n            let imageRes;\n            if (image.svgData && color) {\n                imageRes = await (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.replaceImageColor)(image, imageData, color, particle);\n            } else {\n                imageRes = {\n                    color,\n                    data: image,\n                    element: image.element,\n                    gif: image.gif,\n                    gifData: image.gifData,\n                    gifLoopCount: image.gifLoopCount,\n                    loaded: true,\n                    ratio: imageData.width && imageData.height ? imageData.width / imageData.height : image.ratio ?? 1,\n                    replaceColor: replaceColor,\n                    source: imageData.src\n                };\n            }\n            if (!imageRes.ratio) {\n                imageRes.ratio = 1;\n            }\n            const fill = imageData.fill ?? particle.fill, close = imageData.close ?? particle.close, imageShape = {\n                image: imageRes,\n                fill,\n                close\n            };\n            particle.image = imageShape.image;\n            particle.fill = imageShape.fill;\n            particle.close = imageShape.close;\n        })();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/esm/ImageDrawer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/esm/ImagePreloader.js":
/*!********************************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/esm/ImagePreloader.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImagePreloaderPlugin: () => (/* binding */ ImagePreloaderPlugin)\n/* harmony export */ });\n/* harmony import */ var _Options_Classes_Preload__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Options/Classes/Preload */ \"(ssr)/./node_modules/tsparticles-shape-image/esm/Options/Classes/Preload.js\");\n\nclass ImagePreloaderPlugin {\n    constructor(engine){\n        this.id = \"imagePreloader\";\n        this._engine = engine;\n    }\n    getPlugin() {\n        return {};\n    }\n    loadOptions(options, source) {\n        if (!source || !source.preload) {\n            return;\n        }\n        if (!options.preload) {\n            options.preload = [];\n        }\n        const preloadOptions = options.preload;\n        for (const item of source.preload){\n            const existing = preloadOptions.find((t)=>t.name === item.name || t.src === item.src);\n            if (existing) {\n                existing.load(item);\n            } else {\n                const preload = new _Options_Classes_Preload__WEBPACK_IMPORTED_MODULE_0__.Preload();\n                preload.load(item);\n                preloadOptions.push(preload);\n            }\n        }\n    }\n    needsPlugin() {\n        return true;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvZXNtL0ltYWdlUHJlbG9hZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW9EO0FBQzdDLE1BQU1DO0lBQ1RDLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixJQUFJLENBQUNDLEVBQUUsR0FBRztRQUNWLElBQUksQ0FBQ0MsT0FBTyxHQUFHRjtJQUNuQjtJQUNBRyxZQUFZO1FBQ1IsT0FBTyxDQUFDO0lBQ1o7SUFDQUMsWUFBWUMsT0FBTyxFQUFFQyxNQUFNLEVBQUU7UUFDekIsSUFBSSxDQUFDQSxVQUFVLENBQUNBLE9BQU9DLE9BQU8sRUFBRTtZQUM1QjtRQUNKO1FBQ0EsSUFBSSxDQUFDRixRQUFRRSxPQUFPLEVBQUU7WUFDbEJGLFFBQVFFLE9BQU8sR0FBRyxFQUFFO1FBQ3hCO1FBQ0EsTUFBTUMsaUJBQWlCSCxRQUFRRSxPQUFPO1FBQ3RDLEtBQUssTUFBTUUsUUFBUUgsT0FBT0MsT0FBTyxDQUFFO1lBQy9CLE1BQU1HLFdBQVdGLGVBQWVHLElBQUksQ0FBQyxDQUFDQyxJQUFNQSxFQUFFQyxJQUFJLEtBQUtKLEtBQUtJLElBQUksSUFBSUQsRUFBRUUsR0FBRyxLQUFLTCxLQUFLSyxHQUFHO1lBQ3RGLElBQUlKLFVBQVU7Z0JBQ1ZBLFNBQVNLLElBQUksQ0FBQ047WUFDbEIsT0FDSztnQkFDRCxNQUFNRixVQUFVLElBQUlWLDZEQUFPQTtnQkFDM0JVLFFBQVFRLElBQUksQ0FBQ047Z0JBQ2JELGVBQWVRLElBQUksQ0FBQ1Q7WUFDeEI7UUFDSjtJQUNKO0lBQ0FVLGNBQWM7UUFDVixPQUFPO0lBQ1g7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL3ByaW50ZWNoLWxhbmRpbmcvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvZXNtL0ltYWdlUHJlbG9hZGVyLmpzP2RhNDEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJlbG9hZCB9IGZyb20gXCIuL09wdGlvbnMvQ2xhc3Nlcy9QcmVsb2FkXCI7XG5leHBvcnQgY2xhc3MgSW1hZ2VQcmVsb2FkZXJQbHVnaW4ge1xuICAgIGNvbnN0cnVjdG9yKGVuZ2luZSkge1xuICAgICAgICB0aGlzLmlkID0gXCJpbWFnZVByZWxvYWRlclwiO1xuICAgICAgICB0aGlzLl9lbmdpbmUgPSBlbmdpbmU7XG4gICAgfVxuICAgIGdldFBsdWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBsb2FkT3B0aW9ucyhvcHRpb25zLCBzb3VyY2UpIHtcbiAgICAgICAgaWYgKCFzb3VyY2UgfHwgIXNvdXJjZS5wcmVsb2FkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvcHRpb25zLnByZWxvYWQpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucHJlbG9hZCA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByZWxvYWRPcHRpb25zID0gb3B0aW9ucy5wcmVsb2FkO1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2Ygc291cmNlLnByZWxvYWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID0gcHJlbG9hZE9wdGlvbnMuZmluZCgodCkgPT4gdC5uYW1lID09PSBpdGVtLm5hbWUgfHwgdC5zcmMgPT09IGl0ZW0uc3JjKTtcbiAgICAgICAgICAgIGlmIChleGlzdGluZykge1xuICAgICAgICAgICAgICAgIGV4aXN0aW5nLmxvYWQoaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcmVsb2FkID0gbmV3IFByZWxvYWQoKTtcbiAgICAgICAgICAgICAgICBwcmVsb2FkLmxvYWQoaXRlbSk7XG4gICAgICAgICAgICAgICAgcHJlbG9hZE9wdGlvbnMucHVzaChwcmVsb2FkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBuZWVkc1BsdWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIlByZWxvYWQiLCJJbWFnZVByZWxvYWRlclBsdWdpbiIsImNvbnN0cnVjdG9yIiwiZW5naW5lIiwiaWQiLCJfZW5naW5lIiwiZ2V0UGx1Z2luIiwibG9hZE9wdGlvbnMiLCJvcHRpb25zIiwic291cmNlIiwicHJlbG9hZCIsInByZWxvYWRPcHRpb25zIiwiaXRlbSIsImV4aXN0aW5nIiwiZmluZCIsInQiLCJuYW1lIiwic3JjIiwibG9hZCIsInB1c2giLCJuZWVkc1BsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/esm/ImagePreloader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/esm/Options/Classes/Preload.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/esm/Options/Classes/Preload.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Preload: () => (/* binding */ Preload)\n/* harmony export */ });\nclass Preload {\n    constructor(){\n        this.src = \"\";\n        this.gif = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.gif !== undefined) {\n            this.gif = data.gif;\n        }\n        if (data.height !== undefined) {\n            this.height = data.height;\n        }\n        if (data.name !== undefined) {\n            this.name = data.name;\n        }\n        if (data.replaceColor !== undefined) {\n            this.replaceColor = data.replaceColor;\n        }\n        if (data.src !== undefined) {\n            this.src = data.src;\n        }\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvZXNtL09wdGlvbnMvQ2xhc3Nlcy9QcmVsb2FkLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQTtJQUNUQyxhQUFjO1FBQ1YsSUFBSSxDQUFDQyxHQUFHLEdBQUc7UUFDWCxJQUFJLENBQUNDLEdBQUcsR0FBRztJQUNmO0lBQ0FDLEtBQUtDLElBQUksRUFBRTtRQUNQLElBQUksQ0FBQ0EsTUFBTTtZQUNQO1FBQ0o7UUFDQSxJQUFJQSxLQUFLRixHQUFHLEtBQUtHLFdBQVc7WUFDeEIsSUFBSSxDQUFDSCxHQUFHLEdBQUdFLEtBQUtGLEdBQUc7UUFDdkI7UUFDQSxJQUFJRSxLQUFLRSxNQUFNLEtBQUtELFdBQVc7WUFDM0IsSUFBSSxDQUFDQyxNQUFNLEdBQUdGLEtBQUtFLE1BQU07UUFDN0I7UUFDQSxJQUFJRixLQUFLRyxJQUFJLEtBQUtGLFdBQVc7WUFDekIsSUFBSSxDQUFDRSxJQUFJLEdBQUdILEtBQUtHLElBQUk7UUFDekI7UUFDQSxJQUFJSCxLQUFLSSxZQUFZLEtBQUtILFdBQVc7WUFDakMsSUFBSSxDQUFDRyxZQUFZLEdBQUdKLEtBQUtJLFlBQVk7UUFDekM7UUFDQSxJQUFJSixLQUFLSCxHQUFHLEtBQUtJLFdBQVc7WUFDeEIsSUFBSSxDQUFDSixHQUFHLEdBQUdHLEtBQUtILEdBQUc7UUFDdkI7UUFDQSxJQUFJRyxLQUFLSyxLQUFLLEtBQUtKLFdBQVc7WUFDMUIsSUFBSSxDQUFDSSxLQUFLLEdBQUdMLEtBQUtLLEtBQUs7UUFDM0I7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJpbnRlY2gtbGFuZGluZy8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy1zaGFwZS1pbWFnZS9lc20vT3B0aW9ucy9DbGFzc2VzL1ByZWxvYWQuanM/Y2YxZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgUHJlbG9hZCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc3JjID0gXCJcIjtcbiAgICAgICAgdGhpcy5naWYgPSBmYWxzZTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmdpZiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmdpZiA9IGRhdGEuZ2lmO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmhlaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IGRhdGEuaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLm5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gZGF0YS5uYW1lO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnJlcGxhY2VDb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VDb2xvciA9IGRhdGEucmVwbGFjZUNvbG9yO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnNyYyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNyYyA9IGRhdGEuc3JjO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLndpZHRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSBkYXRhLndpZHRoO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIlByZWxvYWQiLCJjb25zdHJ1Y3RvciIsInNyYyIsImdpZiIsImxvYWQiLCJkYXRhIiwidW5kZWZpbmVkIiwiaGVpZ2h0IiwibmFtZSIsInJlcGxhY2VDb2xvciIsIndpZHRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/esm/Options/Classes/Preload.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/esm/Utils.js":
/*!***********************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/esm/Utils.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   downloadSvgImage: () => (/* binding */ downloadSvgImage),\n/* harmony export */   loadGifImage: () => (/* binding */ loadGifImage),\n/* harmony export */   loadImage: () => (/* binding */ loadImage),\n/* harmony export */   replaceImageColor: () => (/* binding */ replaceImageColor)\n/* harmony export */ });\n/* harmony import */ var tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tsparticles-engine */ \"(ssr)/./node_modules/tsparticles-engine/esm/Utils/ColorUtils.js\");\n/* harmony import */ var tsparticles_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tsparticles-engine */ \"(ssr)/./node_modules/tsparticles-engine/esm/Utils/Utils.js\");\n/* harmony import */ var tsparticles_engine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tsparticles-engine */ \"(ssr)/./node_modules/tsparticles-engine/esm/Core/Utils/Constants.js\");\n/* harmony import */ var _GifUtils_Utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GifUtils/Utils */ \"(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/Utils.js\");\n\n\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n    const { svgData } = imageShape;\n    if (!svgData) {\n        return \"\";\n    }\n    const colorStyle = (0,tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getStyleFromHsl)(color, opacity);\n    if (svgData.includes(\"fill\")) {\n        return svgData.replace(currentColorRegex, ()=>colorStyle);\n    }\n    const preFillIndex = svgData.indexOf(\">\");\n    return `${svgData.substring(0, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\nasync function loadImage(image) {\n    return new Promise((resolve)=>{\n        image.loading = true;\n        const img = new Image();\n        image.element = img;\n        img.addEventListener(\"load\", ()=>{\n            image.loading = false;\n            resolve();\n        });\n        img.addEventListener(\"error\", ()=>{\n            image.element = undefined;\n            image.error = true;\n            image.loading = false;\n            (0,tsparticles_engine__WEBPACK_IMPORTED_MODULE_1__.getLogger)().error(`${tsparticles_engine__WEBPACK_IMPORTED_MODULE_2__.errorPrefix} loading image: ${image.source}`);\n            resolve();\n        });\n        img.src = image.source;\n    });\n}\nasync function loadGifImage(image) {\n    if (image.type !== \"gif\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    try {\n        image.gifData = await (0,_GifUtils_Utils__WEBPACK_IMPORTED_MODULE_3__.decodeGIF)(image.source);\n        image.gifLoopCount = (0,_GifUtils_Utils__WEBPACK_IMPORTED_MODULE_3__.getGIFLoopAmount)(image.gifData) ?? 0;\n        if (image.gifLoopCount === 0) {\n            image.gifLoopCount = Infinity;\n        }\n    } catch  {\n        image.error = true;\n    }\n    image.loading = false;\n}\nasync function downloadSvgImage(image) {\n    if (image.type !== \"svg\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    const response = await fetch(image.source);\n    if (!response.ok) {\n        (0,tsparticles_engine__WEBPACK_IMPORTED_MODULE_1__.getLogger)().error(`${tsparticles_engine__WEBPACK_IMPORTED_MODULE_2__.errorPrefix} Image not found`);\n        image.error = true;\n    } else {\n        image.svgData = await response.text();\n    }\n    image.loading = false;\n}\nfunction replaceImageColor(image, imageData, color, particle) {\n    const svgColoredData = replaceColorSvg(image, color, particle.opacity?.value ?? 1), imageRes = {\n        color,\n        gif: imageData.gif,\n        data: {\n            ...image,\n            svgData: svgColoredData\n        },\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: imageData.replaceColor ?? imageData.replace_color,\n        source: imageData.src\n    };\n    return new Promise((resolve)=>{\n        const svg = new Blob([\n            svgColoredData\n        ], {\n            type: \"image/svg+xml\"\n        }), domUrl = URL || window.URL || window.webkitURL || window, url = domUrl.createObjectURL(svg), img = new Image();\n        img.addEventListener(\"load\", ()=>{\n            imageRes.loaded = true;\n            imageRes.element = img;\n            resolve(imageRes);\n            domUrl.revokeObjectURL(url);\n        });\n        img.addEventListener(\"error\", async ()=>{\n            domUrl.revokeObjectURL(url);\n            const img2 = {\n                ...image,\n                error: false,\n                loading: true\n            };\n            await loadImage(img2);\n            imageRes.loaded = true;\n            imageRes.element = img2.element;\n            resolve(imageRes);\n        });\n        img.src = url;\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvZXNtL1V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQTZFO0FBQ2Q7QUFDL0QsTUFBTUssb0JBQW9CO0FBQzFCLFNBQVNDLGdCQUFnQkMsVUFBVSxFQUFFQyxLQUFLLEVBQUVDLE9BQU87SUFDL0MsTUFBTSxFQUFFQyxPQUFPLEVBQUUsR0FBR0g7SUFDcEIsSUFBSSxDQUFDRyxTQUFTO1FBQ1YsT0FBTztJQUNYO0lBQ0EsTUFBTUMsYUFBYVQsbUVBQWVBLENBQUNNLE9BQU9DO0lBQzFDLElBQUlDLFFBQVFFLFFBQVEsQ0FBQyxTQUFTO1FBQzFCLE9BQU9GLFFBQVFHLE9BQU8sQ0FBQ1IsbUJBQW1CLElBQU1NO0lBQ3BEO0lBQ0EsTUFBTUcsZUFBZUosUUFBUUssT0FBTyxDQUFDO0lBQ3JDLE9BQU8sQ0FBQyxFQUFFTCxRQUFRTSxTQUFTLENBQUMsR0FBR0YsY0FBYyxPQUFPLEVBQUVILFdBQVcsQ0FBQyxFQUFFRCxRQUFRTSxTQUFTLENBQUNGLGNBQWMsQ0FBQztBQUN6RztBQUNPLGVBQWVHLFVBQVVDLEtBQUs7SUFDakMsT0FBTyxJQUFJQyxRQUFRLENBQUNDO1FBQ2hCRixNQUFNRyxPQUFPLEdBQUc7UUFDaEIsTUFBTUMsTUFBTSxJQUFJQztRQUNoQkwsTUFBTU0sT0FBTyxHQUFHRjtRQUNoQkEsSUFBSUcsZ0JBQWdCLENBQUMsUUFBUTtZQUN6QlAsTUFBTUcsT0FBTyxHQUFHO1lBQ2hCRDtRQUNKO1FBQ0FFLElBQUlHLGdCQUFnQixDQUFDLFNBQVM7WUFDMUJQLE1BQU1NLE9BQU8sR0FBR0U7WUFDaEJSLE1BQU1TLEtBQUssR0FBRztZQUNkVCxNQUFNRyxPQUFPLEdBQUc7WUFDaEJwQiw2REFBU0EsR0FBRzBCLEtBQUssQ0FBQyxDQUFDLEVBQUUzQiwyREFBV0EsQ0FBQyxnQkFBZ0IsRUFBRWtCLE1BQU1VLE1BQU0sQ0FBQyxDQUFDO1lBQ2pFUjtRQUNKO1FBQ0FFLElBQUlPLEdBQUcsR0FBR1gsTUFBTVUsTUFBTTtJQUMxQjtBQUNKO0FBQ08sZUFBZUUsYUFBYVosS0FBSztJQUNwQyxJQUFJQSxNQUFNYSxJQUFJLEtBQUssT0FBTztRQUN0QixNQUFNZCxVQUFVQztRQUNoQjtJQUNKO0lBQ0FBLE1BQU1HLE9BQU8sR0FBRztJQUNoQixJQUFJO1FBQ0FILE1BQU1jLE9BQU8sR0FBRyxNQUFNN0IsMERBQVNBLENBQUNlLE1BQU1VLE1BQU07UUFDNUNWLE1BQU1lLFlBQVksR0FBRzdCLGlFQUFnQkEsQ0FBQ2MsTUFBTWMsT0FBTyxLQUFLO1FBQ3hELElBQUlkLE1BQU1lLFlBQVksS0FBSyxHQUFHO1lBQzFCZixNQUFNZSxZQUFZLEdBQUdDO1FBQ3pCO0lBQ0osRUFDQSxPQUFNO1FBQ0ZoQixNQUFNUyxLQUFLLEdBQUc7SUFDbEI7SUFDQVQsTUFBTUcsT0FBTyxHQUFHO0FBQ3BCO0FBQ08sZUFBZWMsaUJBQWlCakIsS0FBSztJQUN4QyxJQUFJQSxNQUFNYSxJQUFJLEtBQUssT0FBTztRQUN0QixNQUFNZCxVQUFVQztRQUNoQjtJQUNKO0lBQ0FBLE1BQU1HLE9BQU8sR0FBRztJQUNoQixNQUFNZSxXQUFXLE1BQU1DLE1BQU1uQixNQUFNVSxNQUFNO0lBQ3pDLElBQUksQ0FBQ1EsU0FBU0UsRUFBRSxFQUFFO1FBQ2RyQyw2REFBU0EsR0FBRzBCLEtBQUssQ0FBQyxDQUFDLEVBQUUzQiwyREFBV0EsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNsRGtCLE1BQU1TLEtBQUssR0FBRztJQUNsQixPQUNLO1FBQ0RULE1BQU1SLE9BQU8sR0FBRyxNQUFNMEIsU0FBU0csSUFBSTtJQUN2QztJQUNBckIsTUFBTUcsT0FBTyxHQUFHO0FBQ3BCO0FBQ08sU0FBU21CLGtCQUFrQnRCLEtBQUssRUFBRXVCLFNBQVMsRUFBRWpDLEtBQUssRUFBRWtDLFFBQVE7SUFDL0QsTUFBTUMsaUJBQWlCckMsZ0JBQWdCWSxPQUFPVixPQUFPa0MsU0FBU2pDLE9BQU8sRUFBRW1DLFNBQVMsSUFBSUMsV0FBVztRQUMzRnJDO1FBQ0FzQyxLQUFLTCxVQUFVSyxHQUFHO1FBQ2xCQyxNQUFNO1lBQ0YsR0FBRzdCLEtBQUs7WUFDUlIsU0FBU2lDO1FBQ2I7UUFDQUssUUFBUTtRQUNSQyxPQUFPUixVQUFVUyxLQUFLLEdBQUdULFVBQVVVLE1BQU07UUFDekNDLGNBQWNYLFVBQVVXLFlBQVksSUFBSVgsVUFBVVksYUFBYTtRQUMvRHpCLFFBQVFhLFVBQVVaLEdBQUc7SUFDekI7SUFDQSxPQUFPLElBQUlWLFFBQVEsQ0FBQ0M7UUFDaEIsTUFBTWtDLE1BQU0sSUFBSUMsS0FBSztZQUFDWjtTQUFlLEVBQUU7WUFBRVosTUFBTTtRQUFnQixJQUFJeUIsU0FBU0MsT0FBT0MsT0FBT0QsR0FBRyxJQUFJQyxPQUFPQyxTQUFTLElBQUlELFFBQVFFLE1BQU1KLE9BQU9LLGVBQWUsQ0FBQ1AsTUFBTWhDLE1BQU0sSUFBSUM7UUFDMUtELElBQUlHLGdCQUFnQixDQUFDLFFBQVE7WUFDekJvQixTQUFTRyxNQUFNLEdBQUc7WUFDbEJILFNBQVNyQixPQUFPLEdBQUdGO1lBQ25CRixRQUFReUI7WUFDUlcsT0FBT00sZUFBZSxDQUFDRjtRQUMzQjtRQUNBdEMsSUFBSUcsZ0JBQWdCLENBQUMsU0FBUztZQUMxQitCLE9BQU9NLGVBQWUsQ0FBQ0Y7WUFDdkIsTUFBTUcsT0FBTztnQkFDVCxHQUFHN0MsS0FBSztnQkFDUlMsT0FBTztnQkFDUE4sU0FBUztZQUNiO1lBQ0EsTUFBTUosVUFBVThDO1lBQ2hCbEIsU0FBU0csTUFBTSxHQUFHO1lBQ2xCSCxTQUFTckIsT0FBTyxHQUFHdUMsS0FBS3ZDLE9BQU87WUFDL0JKLFFBQVF5QjtRQUNaO1FBQ0F2QixJQUFJTyxHQUFHLEdBQUcrQjtJQUNkO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmludGVjaC1sYW5kaW5nLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzLXNoYXBlLWltYWdlL2VzbS9VdGlscy5qcz9iYmU3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVycm9yUHJlZml4LCBnZXRMb2dnZXIsIGdldFN0eWxlRnJvbUhzbCB9IGZyb20gXCJ0c3BhcnRpY2xlcy1lbmdpbmVcIjtcbmltcG9ydCB7IGRlY29kZUdJRiwgZ2V0R0lGTG9vcEFtb3VudCB9IGZyb20gXCIuL0dpZlV0aWxzL1V0aWxzXCI7XG5jb25zdCBjdXJyZW50Q29sb3JSZWdleCA9IC8oIyg/OlswLTlhLWZdezJ9KXsyLDR9fCgjWzAtOWEtZl17M30pfChyZ2J8aHNsKWE/XFwoKC0/XFxkKyU/WyxcXHNdKyl7MiwzfVxccypbXFxkLl0rJT9cXCkpfGN1cnJlbnRjb2xvci9naTtcbmZ1bmN0aW9uIHJlcGxhY2VDb2xvclN2ZyhpbWFnZVNoYXBlLCBjb2xvciwgb3BhY2l0eSkge1xuICAgIGNvbnN0IHsgc3ZnRGF0YSB9ID0gaW1hZ2VTaGFwZTtcbiAgICBpZiAoIXN2Z0RhdGEpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIGNvbnN0IGNvbG9yU3R5bGUgPSBnZXRTdHlsZUZyb21Ic2woY29sb3IsIG9wYWNpdHkpO1xuICAgIGlmIChzdmdEYXRhLmluY2x1ZGVzKFwiZmlsbFwiKSkge1xuICAgICAgICByZXR1cm4gc3ZnRGF0YS5yZXBsYWNlKGN1cnJlbnRDb2xvclJlZ2V4LCAoKSA9PiBjb2xvclN0eWxlKTtcbiAgICB9XG4gICAgY29uc3QgcHJlRmlsbEluZGV4ID0gc3ZnRGF0YS5pbmRleE9mKFwiPlwiKTtcbiAgICByZXR1cm4gYCR7c3ZnRGF0YS5zdWJzdHJpbmcoMCwgcHJlRmlsbEluZGV4KX0gZmlsbD1cIiR7Y29sb3JTdHlsZX1cIiR7c3ZnRGF0YS5zdWJzdHJpbmcocHJlRmlsbEluZGV4KX1gO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRJbWFnZShpbWFnZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBpbWFnZS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgIGltYWdlLmVsZW1lbnQgPSBpbWc7XG4gICAgICAgIGltZy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBpbWFnZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpbWcuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsICgpID0+IHtcbiAgICAgICAgICAgIGltYWdlLmVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpbWFnZS5lcnJvciA9IHRydWU7XG4gICAgICAgICAgICBpbWFnZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBnZXRMb2dnZXIoKS5lcnJvcihgJHtlcnJvclByZWZpeH0gbG9hZGluZyBpbWFnZTogJHtpbWFnZS5zb3VyY2V9YCk7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpbWcuc3JjID0gaW1hZ2Uuc291cmNlO1xuICAgIH0pO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRHaWZJbWFnZShpbWFnZSkge1xuICAgIGlmIChpbWFnZS50eXBlICE9PSBcImdpZlwiKSB7XG4gICAgICAgIGF3YWl0IGxvYWRJbWFnZShpbWFnZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW1hZ2UubG9hZGluZyA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgICAgaW1hZ2UuZ2lmRGF0YSA9IGF3YWl0IGRlY29kZUdJRihpbWFnZS5zb3VyY2UpO1xuICAgICAgICBpbWFnZS5naWZMb29wQ291bnQgPSBnZXRHSUZMb29wQW1vdW50KGltYWdlLmdpZkRhdGEpID8/IDA7XG4gICAgICAgIGlmIChpbWFnZS5naWZMb29wQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIGltYWdlLmdpZkxvb3BDb3VudCA9IEluZmluaXR5O1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgaW1hZ2UuZXJyb3IgPSB0cnVlO1xuICAgIH1cbiAgICBpbWFnZS5sb2FkaW5nID0gZmFsc2U7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZG93bmxvYWRTdmdJbWFnZShpbWFnZSkge1xuICAgIGlmIChpbWFnZS50eXBlICE9PSBcInN2Z1wiKSB7XG4gICAgICAgIGF3YWl0IGxvYWRJbWFnZShpbWFnZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW1hZ2UubG9hZGluZyA9IHRydWU7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChpbWFnZS5zb3VyY2UpO1xuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgZ2V0TG9nZ2VyKCkuZXJyb3IoYCR7ZXJyb3JQcmVmaXh9IEltYWdlIG5vdCBmb3VuZGApO1xuICAgICAgICBpbWFnZS5lcnJvciA9IHRydWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpbWFnZS5zdmdEYXRhID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgIH1cbiAgICBpbWFnZS5sb2FkaW5nID0gZmFsc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZUltYWdlQ29sb3IoaW1hZ2UsIGltYWdlRGF0YSwgY29sb3IsIHBhcnRpY2xlKSB7XG4gICAgY29uc3Qgc3ZnQ29sb3JlZERhdGEgPSByZXBsYWNlQ29sb3JTdmcoaW1hZ2UsIGNvbG9yLCBwYXJ0aWNsZS5vcGFjaXR5Py52YWx1ZSA/PyAxKSwgaW1hZ2VSZXMgPSB7XG4gICAgICAgIGNvbG9yLFxuICAgICAgICBnaWY6IGltYWdlRGF0YS5naWYsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIC4uLmltYWdlLFxuICAgICAgICAgICAgc3ZnRGF0YTogc3ZnQ29sb3JlZERhdGEsXG4gICAgICAgIH0sXG4gICAgICAgIGxvYWRlZDogZmFsc2UsXG4gICAgICAgIHJhdGlvOiBpbWFnZURhdGEud2lkdGggLyBpbWFnZURhdGEuaGVpZ2h0LFxuICAgICAgICByZXBsYWNlQ29sb3I6IGltYWdlRGF0YS5yZXBsYWNlQ29sb3IgPz8gaW1hZ2VEYXRhLnJlcGxhY2VfY29sb3IsXG4gICAgICAgIHNvdXJjZTogaW1hZ2VEYXRhLnNyYyxcbiAgICB9O1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBjb25zdCBzdmcgPSBuZXcgQmxvYihbc3ZnQ29sb3JlZERhdGFdLCB7IHR5cGU6IFwiaW1hZ2Uvc3ZnK3htbFwiIH0pLCBkb21VcmwgPSBVUkwgfHwgd2luZG93LlVSTCB8fCB3aW5kb3cud2Via2l0VVJMIHx8IHdpbmRvdywgdXJsID0gZG9tVXJsLmNyZWF0ZU9iamVjdFVSTChzdmcpLCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgaW1nLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsICgpID0+IHtcbiAgICAgICAgICAgIGltYWdlUmVzLmxvYWRlZCA9IHRydWU7XG4gICAgICAgICAgICBpbWFnZVJlcy5lbGVtZW50ID0gaW1nO1xuICAgICAgICAgICAgcmVzb2x2ZShpbWFnZVJlcyk7XG4gICAgICAgICAgICBkb21VcmwucmV2b2tlT2JqZWN0VVJMKHVybCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpbWcuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGRvbVVybC5yZXZva2VPYmplY3RVUkwodXJsKTtcbiAgICAgICAgICAgIGNvbnN0IGltZzIgPSB7XG4gICAgICAgICAgICAgICAgLi4uaW1hZ2UsXG4gICAgICAgICAgICAgICAgZXJyb3I6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYXdhaXQgbG9hZEltYWdlKGltZzIpO1xuICAgICAgICAgICAgaW1hZ2VSZXMubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGltYWdlUmVzLmVsZW1lbnQgPSBpbWcyLmVsZW1lbnQ7XG4gICAgICAgICAgICByZXNvbHZlKGltYWdlUmVzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGltZy5zcmMgPSB1cmw7XG4gICAgfSk7XG59XG4iXSwibmFtZXMiOlsiZXJyb3JQcmVmaXgiLCJnZXRMb2dnZXIiLCJnZXRTdHlsZUZyb21Ic2wiLCJkZWNvZGVHSUYiLCJnZXRHSUZMb29wQW1vdW50IiwiY3VycmVudENvbG9yUmVnZXgiLCJyZXBsYWNlQ29sb3JTdmciLCJpbWFnZVNoYXBlIiwiY29sb3IiLCJvcGFjaXR5Iiwic3ZnRGF0YSIsImNvbG9yU3R5bGUiLCJpbmNsdWRlcyIsInJlcGxhY2UiLCJwcmVGaWxsSW5kZXgiLCJpbmRleE9mIiwic3Vic3RyaW5nIiwibG9hZEltYWdlIiwiaW1hZ2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsImxvYWRpbmciLCJpbWciLCJJbWFnZSIsImVsZW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwidW5kZWZpbmVkIiwiZXJyb3IiLCJzb3VyY2UiLCJzcmMiLCJsb2FkR2lmSW1hZ2UiLCJ0eXBlIiwiZ2lmRGF0YSIsImdpZkxvb3BDb3VudCIsIkluZmluaXR5IiwiZG93bmxvYWRTdmdJbWFnZSIsInJlc3BvbnNlIiwiZmV0Y2giLCJvayIsInRleHQiLCJyZXBsYWNlSW1hZ2VDb2xvciIsImltYWdlRGF0YSIsInBhcnRpY2xlIiwic3ZnQ29sb3JlZERhdGEiLCJ2YWx1ZSIsImltYWdlUmVzIiwiZ2lmIiwiZGF0YSIsImxvYWRlZCIsInJhdGlvIiwid2lkdGgiLCJoZWlnaHQiLCJyZXBsYWNlQ29sb3IiLCJyZXBsYWNlX2NvbG9yIiwic3ZnIiwiQmxvYiIsImRvbVVybCIsIlVSTCIsIndpbmRvdyIsIndlYmtpdFVSTCIsInVybCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsImltZzIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/esm/Utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/esm/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/esm/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadImageShape: () => (/* binding */ loadImageShape)\n/* harmony export */ });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ \"(ssr)/./node_modules/tsparticles-shape-image/esm/Utils.js\");\n/* harmony import */ var _ImageDrawer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ImageDrawer */ \"(ssr)/./node_modules/tsparticles-shape-image/esm/ImageDrawer.js\");\n/* harmony import */ var _ImagePreloader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ImagePreloader */ \"(ssr)/./node_modules/tsparticles-shape-image/esm/ImagePreloader.js\");\n/* harmony import */ var tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tsparticles-engine */ \"(ssr)/./node_modules/tsparticles-engine/esm/Core/Utils/Constants.js\");\n\n\n\n\nfunction addLoadImageToEngine(engine) {\n    if (engine.loadImage) {\n        return;\n    }\n    engine.loadImage = async (data)=>{\n        if (!data.name && !data.src) {\n            throw new Error(`${tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.errorPrefix} no image source provided`);\n        }\n        if (!engine.images) {\n            engine.images = [];\n        }\n        if (engine.images.find((t)=>t.name === data.name || t.source === data.src)) {\n            return;\n        }\n        try {\n            const image = {\n                gif: data.gif ?? false,\n                name: data.name ?? data.src,\n                source: data.src,\n                type: data.src.substring(data.src.length - 3),\n                error: false,\n                loading: true,\n                replaceColor: data.replaceColor,\n                ratio: data.width && data.height ? data.width / data.height : undefined\n            };\n            engine.images.push(image);\n            const imageFunc = data.gif ? _Utils__WEBPACK_IMPORTED_MODULE_1__.loadGifImage : data.replaceColor ? _Utils__WEBPACK_IMPORTED_MODULE_1__.downloadSvgImage : _Utils__WEBPACK_IMPORTED_MODULE_1__.loadImage;\n            await imageFunc(image);\n        } catch  {\n            throw new Error(`${tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.errorPrefix} ${data.name ?? data.src} not found`);\n        }\n    };\n}\nasync function loadImageShape(engine, refresh = true) {\n    addLoadImageToEngine(engine);\n    const preloader = new _ImagePreloader__WEBPACK_IMPORTED_MODULE_2__.ImagePreloaderPlugin(engine);\n    await engine.addPlugin(preloader, refresh);\n    await engine.addShape([\n        \"image\",\n        \"images\"\n    ], new _ImageDrawer__WEBPACK_IMPORTED_MODULE_3__.ImageDrawer(engine), refresh);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQW9FO0FBQ3hCO0FBQ1k7QUFDUDtBQUNqRCxTQUFTTSxxQkFBcUJDLE1BQU07SUFDaEMsSUFBSUEsT0FBT0wsU0FBUyxFQUFFO1FBQ2xCO0lBQ0o7SUFDQUssT0FBT0wsU0FBUyxHQUFHLE9BQU9NO1FBQ3RCLElBQUksQ0FBQ0EsS0FBS0MsSUFBSSxJQUFJLENBQUNELEtBQUtFLEdBQUcsRUFBRTtZQUN6QixNQUFNLElBQUlDLE1BQU0sQ0FBQyxFQUFFTiwyREFBV0EsQ0FBQyx5QkFBeUIsQ0FBQztRQUM3RDtRQUNBLElBQUksQ0FBQ0UsT0FBT0ssTUFBTSxFQUFFO1lBQ2hCTCxPQUFPSyxNQUFNLEdBQUcsRUFBRTtRQUN0QjtRQUNBLElBQUlMLE9BQU9LLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDLENBQUNDLElBQU1BLEVBQUVMLElBQUksS0FBS0QsS0FBS0MsSUFBSSxJQUFJSyxFQUFFQyxNQUFNLEtBQUtQLEtBQUtFLEdBQUcsR0FBRztZQUMxRTtRQUNKO1FBQ0EsSUFBSTtZQUNBLE1BQU1NLFFBQVE7Z0JBQ1ZDLEtBQUtULEtBQUtTLEdBQUcsSUFBSTtnQkFDakJSLE1BQU1ELEtBQUtDLElBQUksSUFBSUQsS0FBS0UsR0FBRztnQkFDM0JLLFFBQVFQLEtBQUtFLEdBQUc7Z0JBQ2hCUSxNQUFNVixLQUFLRSxHQUFHLENBQUNTLFNBQVMsQ0FBQ1gsS0FBS0UsR0FBRyxDQUFDVSxNQUFNLEdBQUc7Z0JBQzNDQyxPQUFPO2dCQUNQQyxTQUFTO2dCQUNUQyxjQUFjZixLQUFLZSxZQUFZO2dCQUMvQkMsT0FBT2hCLEtBQUtpQixLQUFLLElBQUlqQixLQUFLa0IsTUFBTSxHQUFHbEIsS0FBS2lCLEtBQUssR0FBR2pCLEtBQUtrQixNQUFNLEdBQUdDO1lBQ2xFO1lBQ0FwQixPQUFPSyxNQUFNLENBQUNnQixJQUFJLENBQUNaO1lBQ25CLE1BQU1hLFlBQVlyQixLQUFLUyxHQUFHLEdBQUdoQixnREFBWUEsR0FBR08sS0FBS2UsWUFBWSxHQUFHdkIsb0RBQWdCQSxHQUFHRSw2Q0FBU0E7WUFDNUYsTUFBTTJCLFVBQVViO1FBQ3BCLEVBQ0EsT0FBTTtZQUNGLE1BQU0sSUFBSUwsTUFBTSxDQUFDLEVBQUVOLDJEQUFXQSxDQUFDLENBQUMsRUFBRUcsS0FBS0MsSUFBSSxJQUFJRCxLQUFLRSxHQUFHLENBQUMsVUFBVSxDQUFDO1FBQ3ZFO0lBQ0o7QUFDSjtBQUNPLGVBQWVvQixlQUFldkIsTUFBTSxFQUFFd0IsVUFBVSxJQUFJO0lBQ3ZEekIscUJBQXFCQztJQUNyQixNQUFNeUIsWUFBWSxJQUFJNUIsaUVBQW9CQSxDQUFDRztJQUMzQyxNQUFNQSxPQUFPMEIsU0FBUyxDQUFDRCxXQUFXRDtJQUNsQyxNQUFNeEIsT0FBTzJCLFFBQVEsQ0FBQztRQUFDO1FBQVM7S0FBUyxFQUFFLElBQUkvQixxREFBV0EsQ0FBQ0ksU0FBU3dCO0FBQ3hFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJpbnRlY2gtbGFuZGluZy8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy1zaGFwZS1pbWFnZS9lc20vaW5kZXguanM/ZTYzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkb3dubG9hZFN2Z0ltYWdlLCBsb2FkR2lmSW1hZ2UsIGxvYWRJbWFnZSB9IGZyb20gXCIuL1V0aWxzXCI7XG5pbXBvcnQgeyBJbWFnZURyYXdlciB9IGZyb20gXCIuL0ltYWdlRHJhd2VyXCI7XG5pbXBvcnQgeyBJbWFnZVByZWxvYWRlclBsdWdpbiB9IGZyb20gXCIuL0ltYWdlUHJlbG9hZGVyXCI7XG5pbXBvcnQgeyBlcnJvclByZWZpeCB9IGZyb20gXCJ0c3BhcnRpY2xlcy1lbmdpbmVcIjtcbmZ1bmN0aW9uIGFkZExvYWRJbWFnZVRvRW5naW5lKGVuZ2luZSkge1xuICAgIGlmIChlbmdpbmUubG9hZEltYWdlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZW5naW5lLmxvYWRJbWFnZSA9IGFzeW5jIChkYXRhKSA9PiB7XG4gICAgICAgIGlmICghZGF0YS5uYW1lICYmICFkYXRhLnNyYykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2Vycm9yUHJlZml4fSBubyBpbWFnZSBzb3VyY2UgcHJvdmlkZWRgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWVuZ2luZS5pbWFnZXMpIHtcbiAgICAgICAgICAgIGVuZ2luZS5pbWFnZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5naW5lLmltYWdlcy5maW5kKCh0KSA9PiB0Lm5hbWUgPT09IGRhdGEubmFtZSB8fCB0LnNvdXJjZSA9PT0gZGF0YS5zcmMpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGltYWdlID0ge1xuICAgICAgICAgICAgICAgIGdpZjogZGF0YS5naWYgPz8gZmFsc2UsXG4gICAgICAgICAgICAgICAgbmFtZTogZGF0YS5uYW1lID8/IGRhdGEuc3JjLFxuICAgICAgICAgICAgICAgIHNvdXJjZTogZGF0YS5zcmMsXG4gICAgICAgICAgICAgICAgdHlwZTogZGF0YS5zcmMuc3Vic3RyaW5nKGRhdGEuc3JjLmxlbmd0aCAtIDMpLFxuICAgICAgICAgICAgICAgIGVycm9yOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgIHJlcGxhY2VDb2xvcjogZGF0YS5yZXBsYWNlQ29sb3IsXG4gICAgICAgICAgICAgICAgcmF0aW86IGRhdGEud2lkdGggJiYgZGF0YS5oZWlnaHQgPyBkYXRhLndpZHRoIC8gZGF0YS5oZWlnaHQgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZW5naW5lLmltYWdlcy5wdXNoKGltYWdlKTtcbiAgICAgICAgICAgIGNvbnN0IGltYWdlRnVuYyA9IGRhdGEuZ2lmID8gbG9hZEdpZkltYWdlIDogZGF0YS5yZXBsYWNlQ29sb3IgPyBkb3dubG9hZFN2Z0ltYWdlIDogbG9hZEltYWdlO1xuICAgICAgICAgICAgYXdhaXQgaW1hZ2VGdW5jKGltYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7ZXJyb3JQcmVmaXh9ICR7ZGF0YS5uYW1lID8/IGRhdGEuc3JjfSBub3QgZm91bmRgKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZEltYWdlU2hhcGUoZW5naW5lLCByZWZyZXNoID0gdHJ1ZSkge1xuICAgIGFkZExvYWRJbWFnZVRvRW5naW5lKGVuZ2luZSk7XG4gICAgY29uc3QgcHJlbG9hZGVyID0gbmV3IEltYWdlUHJlbG9hZGVyUGx1Z2luKGVuZ2luZSk7XG4gICAgYXdhaXQgZW5naW5lLmFkZFBsdWdpbihwcmVsb2FkZXIsIHJlZnJlc2gpO1xuICAgIGF3YWl0IGVuZ2luZS5hZGRTaGFwZShbXCJpbWFnZVwiLCBcImltYWdlc1wiXSwgbmV3IEltYWdlRHJhd2VyKGVuZ2luZSksIHJlZnJlc2gpO1xufVxuIl0sIm5hbWVzIjpbImRvd25sb2FkU3ZnSW1hZ2UiLCJsb2FkR2lmSW1hZ2UiLCJsb2FkSW1hZ2UiLCJJbWFnZURyYXdlciIsIkltYWdlUHJlbG9hZGVyUGx1Z2luIiwiZXJyb3JQcmVmaXgiLCJhZGRMb2FkSW1hZ2VUb0VuZ2luZSIsImVuZ2luZSIsImRhdGEiLCJuYW1lIiwic3JjIiwiRXJyb3IiLCJpbWFnZXMiLCJmaW5kIiwidCIsInNvdXJjZSIsImltYWdlIiwiZ2lmIiwidHlwZSIsInN1YnN0cmluZyIsImxlbmd0aCIsImVycm9yIiwibG9hZGluZyIsInJlcGxhY2VDb2xvciIsInJhdGlvIiwid2lkdGgiLCJoZWlnaHQiLCJ1bmRlZmluZWQiLCJwdXNoIiwiaW1hZ2VGdW5jIiwibG9hZEltYWdlU2hhcGUiLCJyZWZyZXNoIiwicHJlbG9hZGVyIiwiYWRkUGx1Z2luIiwiYWRkU2hhcGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/esm/index.js\n");

/***/ })

};
;