"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./node_modules/swiper/modules/effect-fade.css":
/*!*****************************************************!*\
  !*** ./node_modules/swiper/modules/effect-fade.css ***!
  \*****************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"55b1a3ee1d78\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9lZmZlY3QtZmFkZS5jc3MiLCJtYXBwaW5ncyI6IjtBQUFBLCtEQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9lZmZlY3QtZmFkZS5jc3M/Zjk1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjU1YjFhM2VlMWQ3OFwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/effect-fade.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/navigation.css":
/*!****************************************************!*\
  !*** ./node_modules/swiper/modules/navigation.css ***!
  \****************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"af319be6b30f\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9uYXZpZ2F0aW9uLmNzcyIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL25hdmlnYXRpb24uY3NzP2MxZWYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCJhZjMxOWJlNmIzMGZcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/navigation.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/pagination.css":
/*!****************************************************!*\
  !*** ./node_modules/swiper/modules/pagination.css ***!
  \****************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"71b0d9dc4612\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9wYWdpbmF0aW9uLmNzcyIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL3BhZ2luYXRpb24uY3NzP2I0M2EiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCI3MWIwZDlkYzQ2MTJcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/pagination.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/swiper.css":
/*!****************************************!*\
  !*** ./node_modules/swiper/swiper.css ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"e5480bd8c1d8\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc3dpcGVyLmNzcyIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zd2lwZXIuY3NzPzg0MTYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCJlNTQ4MGJkOGMxZDhcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/swiper.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/Hero.tsx":
/*!*********************************!*\
  !*** ./src/components/Hero.tsx ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Hero; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _tsparticles_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tsparticles/react */ \"(app-pages-browser)/./node_modules/@tsparticles/react/dist/index.js\");\n/* harmony import */ var tsparticles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tsparticles */ \"(app-pages-browser)/./node_modules/tsparticles/browser/index.js\");\n/* harmony import */ var swiper_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! swiper/react */ \"(app-pages-browser)/./node_modules/swiper/swiper-react.mjs\");\n/* harmony import */ var swiper_modules__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! swiper/modules */ \"(app-pages-browser)/./node_modules/swiper/modules/index.mjs\");\n/* harmony import */ var swiper_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! swiper/css */ \"(app-pages-browser)/./node_modules/swiper/swiper.css\");\n/* harmony import */ var swiper_css_effect_fade__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! swiper/css/effect-fade */ \"(app-pages-browser)/./node_modules/swiper/modules/effect-fade.css\");\n/* harmony import */ var swiper_css_pagination__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! swiper/css/pagination */ \"(app-pages-browser)/./node_modules/swiper/modules/pagination.css\");\n/* harmony import */ var swiper_css_navigation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! swiper/css/navigation */ \"(app-pages-browser)/./node_modules/swiper/modules/navigation.css\");\n\nvar _s = $RefreshSig$();\n\n\n // Usamos loadFull desde el paquete principal\n// Importar Swiper y módulos necesarios\n\n // Importa los módulos que necesites\n// Importa los estilos de Swiper\n\n\n\n\nfunction Hero() {\n    _s();\n    const [init, setInit] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // this should be run only once per application lifetime\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        (0,_tsparticles_react__WEBPACK_IMPORTED_MODULE_2__.initParticlesEngine)(async (engine)=>{\n            // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n            // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n            // starting from v2 you can add only the features you need reducing the bundle size\n            //await loadAll(engine);\n            await (0,tsparticles__WEBPACK_IMPORTED_MODULE_3__.loadFull)(engine); // Usamos loadFull\n        //await loadBasic(engine);\n        }).then(()=>{\n            setInit(true);\n        });\n    }, []);\n    const particlesLoaded = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (container)=>{\n        console.log(\"tsParticles container loaded\", container);\n    }, []);\n    const options = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({\n            background: {\n                color: undefined\n            },\n            fpsLimit: 120,\n            interactivity: {\n                events: {\n                    onClick: {\n                        enable: false,\n                        mode: \"push\"\n                    },\n                    onHover: {\n                        enable: false,\n                        mode: \"repulse\"\n                    },\n                    resize: {\n                        enable: true\n                    }\n                },\n                modes: {\n                    push: {\n                        quantity: 4\n                    },\n                    repulse: {\n                        distance: 200,\n                        duration: 0.4\n                    }\n                }\n            },\n            particles: {\n                color: {\n                    value: [\n                        \"#fcfad4\",\n                        \"#2199ea\",\n                        \"#137DC5\"\n                    ]\n                },\n                links: {\n                    enable: false\n                },\n                move: {\n                    direction: \"top\",\n                    enable: true,\n                    outModes: {\n                        default: \"out\"\n                    },\n                    random: true,\n                    speed: 0.5,\n                    straight: false\n                },\n                number: {\n                    density: {\n                        enable: true,\n                        area: 800\n                    },\n                    value: 30\n                },\n                opacity: {\n                    value: 0.5,\n                    random: true\n                },\n                shape: {\n                    type: \"circle\"\n                },\n                size: {\n                    value: {\n                        min: 1,\n                        max: 3\n                    },\n                    random: true\n                }\n            },\n            detectRetina: true\n        }), []);\n    const heroContent = /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-left\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                className: \"text-5xl font-extrabold text-[#fcfad4] sm:text-6xl lg:text-7xl leading-tight\",\n                children: [\n                    \"Impresi\\xf3n \",\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {\n                        className: \"sm:hidden\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\Operador\\\\printech-landing2\\\\src\\\\components\\\\Hero.tsx\",\n                        lineNumber: 108,\n                        columnNumber: 19\n                    }, this),\n                    \"Profesional\"\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\Operador\\\\printech-landing2\\\\src\\\\components\\\\Hero.tsx\",\n                lineNumber: 107,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                className: \"mt-6 text-xl text-white max-w-3xl\",\n                children: \"Impresi\\xf3n de alta calidad para tu negocio. Desde tarjetas de presentaci\\xf3n hasta materiales promocionales con tecnolog\\xeda de vanguardia.\"\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\Operador\\\\printech-landing2\\\\src\\\\components\\\\Hero.tsx\",\n                lineNumber: 110,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"mt-10\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                    href: \"#contacto\",\n                    className: \"inline-block bg-[#137DC5] text-white px-12 py-4 rounded-lg text-xl font-semibold shadow-lg hover:bg-[#07619a] transition duration-300 ease-in-out\",\n                    children: \"Comenzar ahora\"\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\Operador\\\\printech-landing2\\\\src\\\\components\\\\Hero.tsx\",\n                    lineNumber: 114,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\Operador\\\\printech-landing2\\\\src\\\\components\\\\Hero.tsx\",\n                lineNumber: 113,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\Operador\\\\printech-landing2\\\\src\\\\components\\\\Hero.tsx\",\n        lineNumber: 106,\n        columnNumber: 5\n    }, this);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"relative w-full overflow-hidden animated-gradient text-white py-20\",\n        style: {\n            height: \"600px\"\n        },\n        children: [\n            \" \",\n            init && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_tsparticles_react__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                id: \"tsparticles\",\n                particlesLoaded: particlesLoaded,\n                options: options,\n                style: {\n                    position: \"absolute\",\n                    top: 0,\n                    left: 0,\n                    width: \"100%\",\n                    height: \"100%\",\n                    zIndex: 0\n                }\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\Operador\\\\printech-landing2\\\\src\\\\components\\\\Hero.tsx\",\n                lineNumber: 126,\n                columnNumber: 16\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(swiper_react__WEBPACK_IMPORTED_MODULE_4__.Swiper, {\n                modules: [\n                    swiper_modules__WEBPACK_IMPORTED_MODULE_5__.Autoplay,\n                    swiper_modules__WEBPACK_IMPORTED_MODULE_5__.EffectFade,\n                    swiper_modules__WEBPACK_IMPORTED_MODULE_5__.Pagination,\n                    swiper_modules__WEBPACK_IMPORTED_MODULE_5__.Navigation\n                ],\n                slidesPerView: 1,\n                effect: \"fade\",\n                autoplay: {\n                    delay: 5000,\n                    disableOnInteraction: false\n                },\n                pagination: {\n                    clickable: true\n                },\n                navigation: true,\n                loop: true,\n                className: \"mySwiper absolute top-0 left-0 w-full h-full\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(swiper_react__WEBPACK_IMPORTED_MODULE_4__.SwiperSlide, {\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"w-full h-full bg-cover bg-center\",\n                                style: {\n                                    backgroundImage: 'url(\"/images/placeholder1.jpg\")',\n                                    opacity: 0.3\n                                }\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Operador\\\\printech-landing2\\\\src\\\\components\\\\Hero.tsx\",\n                                lineNumber: 156,\n                                columnNumber: 11\n                            }, this),\n                            \" \"\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Operador\\\\printech-landing2\\\\src\\\\components\\\\Hero.tsx\",\n                        lineNumber: 155,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(swiper_react__WEBPACK_IMPORTED_MODULE_4__.SwiperSlide, {\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"w-full h-full bg-cover bg-center\",\n                                style: {\n                                    backgroundImage: 'url(\"/images/placeholder2.jpg\")',\n                                    opacity: 0.3\n                                }\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Operador\\\\printech-landing2\\\\src\\\\components\\\\Hero.tsx\",\n                                lineNumber: 159,\n                                columnNumber: 11\n                            }, this),\n                            \" \"\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Operador\\\\printech-landing2\\\\src\\\\components\\\\Hero.tsx\",\n                        lineNumber: 158,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\Operador\\\\printech-landing2\\\\src\\\\components\\\\Hero.tsx\",\n                lineNumber: 140,\n                columnNumber: 7\n            }, this),\n            heroContent,\n            \" \"\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\Operador\\\\printech-landing2\\\\src\\\\components\\\\Hero.tsx\",\n        lineNumber: 125,\n        columnNumber: 5\n    }, this);\n}\n_s(Hero, \"WzsvfoixiFTAoql8dyfwkFxRfgE=\");\n_c = Hero;\nvar _c;\n$RefreshReg$(_c, \"Hero\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/Hero.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/a11y.mjs":
/*!**********************************************!*\
  !*** ./node_modules/swiper/modules/a11y.mjs ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ A11y; }\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/classes-to-selector.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/classes-to-selector.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n\n\n\nfunction A11y(_ref) {\n    let { swiper, extendParams, on } = _ref;\n    extendParams({\n        a11y: {\n            enabled: true,\n            notificationClass: \"swiper-notification\",\n            prevSlideMessage: \"Previous slide\",\n            nextSlideMessage: \"Next slide\",\n            firstSlideMessage: \"This is the first slide\",\n            lastSlideMessage: \"This is the last slide\",\n            paginationBulletMessage: \"Go to slide {{index}}\",\n            slideLabelMessage: \"{{index}} / {{slidesLength}}\",\n            containerMessage: null,\n            containerRoleDescriptionMessage: null,\n            containerRole: null,\n            itemRoleDescriptionMessage: null,\n            slideRole: \"group\",\n            id: null,\n            scrollOnFocus: true\n        }\n    });\n    swiper.a11y = {\n        clicked: false\n    };\n    let liveRegion = null;\n    let preventFocusHandler;\n    let focusTargetSlideEl;\n    let visibilityChangedTimestamp = new Date().getTime();\n    function notify(message) {\n        const notification = liveRegion;\n        if (notification.length === 0) return;\n        (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.s)(notification, message);\n    }\n    function getRandomNumber(size) {\n        if (size === void 0) {\n            size = 16;\n        }\n        const randomChar = ()=>Math.round(16 * Math.random()).toString(16);\n        return \"x\".repeat(size).replace(/x/g, randomChar);\n    }\n    function makeElFocusable(el) {\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"tabIndex\", \"0\");\n        });\n    }\n    function makeElNotFocusable(el) {\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"tabIndex\", \"-1\");\n        });\n    }\n    function addElRole(el, role) {\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"role\", role);\n        });\n    }\n    function addElRoleDescription(el, description) {\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"aria-roledescription\", description);\n        });\n    }\n    function addElControls(el, controls) {\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"aria-controls\", controls);\n        });\n    }\n    function addElLabel(el, label) {\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"aria-label\", label);\n        });\n    }\n    function addElId(el, id) {\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"id\", id);\n        });\n    }\n    function addElLive(el, live) {\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"aria-live\", live);\n        });\n    }\n    function disableEl(el) {\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"aria-disabled\", true);\n        });\n    }\n    function enableEl(el) {\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"aria-disabled\", false);\n        });\n    }\n    function onEnterOrSpaceKey(e) {\n        if (e.keyCode !== 13 && e.keyCode !== 32) return;\n        const params = swiper.params.a11y;\n        const targetEl = e.target;\n        if (swiper.pagination && swiper.pagination.el && (targetEl === swiper.pagination.el || swiper.pagination.el.contains(e.target))) {\n            if (!e.target.matches((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(swiper.params.pagination.bulletClass))) return;\n        }\n        if (swiper.navigation && swiper.navigation.prevEl && swiper.navigation.nextEl) {\n            const prevEls = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(swiper.navigation.prevEl);\n            const nextEls = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(swiper.navigation.nextEl);\n            if (nextEls.includes(targetEl)) {\n                if (!(swiper.isEnd && !swiper.params.loop)) {\n                    swiper.slideNext();\n                }\n                if (swiper.isEnd) {\n                    notify(params.lastSlideMessage);\n                } else {\n                    notify(params.nextSlideMessage);\n                }\n            }\n            if (prevEls.includes(targetEl)) {\n                if (!(swiper.isBeginning && !swiper.params.loop)) {\n                    swiper.slidePrev();\n                }\n                if (swiper.isBeginning) {\n                    notify(params.firstSlideMessage);\n                } else {\n                    notify(params.prevSlideMessage);\n                }\n            }\n        }\n        if (swiper.pagination && targetEl.matches((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(swiper.params.pagination.bulletClass))) {\n            targetEl.click();\n        }\n    }\n    function updateNavigation() {\n        if (swiper.params.loop || swiper.params.rewind || !swiper.navigation) return;\n        const { nextEl, prevEl } = swiper.navigation;\n        if (prevEl) {\n            if (swiper.isBeginning) {\n                disableEl(prevEl);\n                makeElNotFocusable(prevEl);\n            } else {\n                enableEl(prevEl);\n                makeElFocusable(prevEl);\n            }\n        }\n        if (nextEl) {\n            if (swiper.isEnd) {\n                disableEl(nextEl);\n                makeElNotFocusable(nextEl);\n            } else {\n                enableEl(nextEl);\n                makeElFocusable(nextEl);\n            }\n        }\n    }\n    function hasPagination() {\n        return swiper.pagination && swiper.pagination.bullets && swiper.pagination.bullets.length;\n    }\n    function hasClickablePagination() {\n        return hasPagination() && swiper.params.pagination.clickable;\n    }\n    function updatePagination() {\n        const params = swiper.params.a11y;\n        if (!hasPagination()) return;\n        swiper.pagination.bullets.forEach((bulletEl)=>{\n            if (swiper.params.pagination.clickable) {\n                makeElFocusable(bulletEl);\n                if (!swiper.params.pagination.renderBullet) {\n                    addElRole(bulletEl, \"button\");\n                    addElLabel(bulletEl, params.paginationBulletMessage.replace(/\\{\\{index\\}\\}/, (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.i)(bulletEl) + 1));\n                }\n            }\n            if (bulletEl.matches((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(swiper.params.pagination.bulletActiveClass))) {\n                bulletEl.setAttribute(\"aria-current\", \"true\");\n            } else {\n                bulletEl.removeAttribute(\"aria-current\");\n            }\n        });\n    }\n    const initNavEl = (el, wrapperId, message)=>{\n        makeElFocusable(el);\n        if (el.tagName !== \"BUTTON\") {\n            addElRole(el, \"button\");\n            el.addEventListener(\"keydown\", onEnterOrSpaceKey);\n        }\n        addElLabel(el, message);\n        addElControls(el, wrapperId);\n    };\n    const handlePointerDown = (e)=>{\n        if (focusTargetSlideEl && focusTargetSlideEl !== e.target && !focusTargetSlideEl.contains(e.target)) {\n            preventFocusHandler = true;\n        }\n        swiper.a11y.clicked = true;\n    };\n    const handlePointerUp = ()=>{\n        preventFocusHandler = false;\n        requestAnimationFrame(()=>{\n            requestAnimationFrame(()=>{\n                if (!swiper.destroyed) {\n                    swiper.a11y.clicked = false;\n                }\n            });\n        });\n    };\n    const onVisibilityChange = (e)=>{\n        visibilityChangedTimestamp = new Date().getTime();\n    };\n    const handleFocus = (e)=>{\n        if (swiper.a11y.clicked || !swiper.params.a11y.scrollOnFocus) return;\n        if (new Date().getTime() - visibilityChangedTimestamp < 100) return;\n        const slideEl = e.target.closest(\".\".concat(swiper.params.slideClass, \", swiper-slide\"));\n        if (!slideEl || !swiper.slides.includes(slideEl)) return;\n        focusTargetSlideEl = slideEl;\n        const isActive = swiper.slides.indexOf(slideEl) === swiper.activeIndex;\n        const isVisible = swiper.params.watchSlidesProgress && swiper.visibleSlides && swiper.visibleSlides.includes(slideEl);\n        if (isActive || isVisible) return;\n        if (e.sourceCapabilities && e.sourceCapabilities.firesTouchEvents) return;\n        if (swiper.isHorizontal()) {\n            swiper.el.scrollLeft = 0;\n        } else {\n            swiper.el.scrollTop = 0;\n        }\n        requestAnimationFrame(()=>{\n            if (preventFocusHandler) return;\n            if (swiper.params.loop) {\n                swiper.slideToLoop(parseInt(slideEl.getAttribute(\"data-swiper-slide-index\")), 0);\n            } else {\n                swiper.slideTo(swiper.slides.indexOf(slideEl), 0);\n            }\n            preventFocusHandler = false;\n        });\n    };\n    const initSlides = ()=>{\n        const params = swiper.params.a11y;\n        if (params.itemRoleDescriptionMessage) {\n            addElRoleDescription(swiper.slides, params.itemRoleDescriptionMessage);\n        }\n        if (params.slideRole) {\n            addElRole(swiper.slides, params.slideRole);\n        }\n        const slidesLength = swiper.slides.length;\n        if (params.slideLabelMessage) {\n            swiper.slides.forEach((slideEl, index)=>{\n                const slideIndex = swiper.params.loop ? parseInt(slideEl.getAttribute(\"data-swiper-slide-index\"), 10) : index;\n                const ariaLabelMessage = params.slideLabelMessage.replace(/\\{\\{index\\}\\}/, slideIndex + 1).replace(/\\{\\{slidesLength\\}\\}/, slidesLength);\n                addElLabel(slideEl, ariaLabelMessage);\n            });\n        }\n    };\n    const init = ()=>{\n        const params = swiper.params.a11y;\n        swiper.el.append(liveRegion);\n        // Container\n        const containerEl = swiper.el;\n        if (params.containerRoleDescriptionMessage) {\n            addElRoleDescription(containerEl, params.containerRoleDescriptionMessage);\n        }\n        if (params.containerMessage) {\n            addElLabel(containerEl, params.containerMessage);\n        }\n        if (params.containerRole) {\n            addElRole(containerEl, params.containerRole);\n        }\n        // Wrapper\n        const wrapperEl = swiper.wrapperEl;\n        const wrapperId = params.id || wrapperEl.getAttribute(\"id\") || \"swiper-wrapper-\".concat(getRandomNumber(16));\n        const live = swiper.params.autoplay && swiper.params.autoplay.enabled ? \"off\" : \"polite\";\n        addElId(wrapperEl, wrapperId);\n        addElLive(wrapperEl, live);\n        // Slide\n        initSlides();\n        // Navigation\n        let { nextEl, prevEl } = swiper.navigation ? swiper.navigation : {};\n        nextEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(nextEl);\n        prevEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(prevEl);\n        if (nextEl) {\n            nextEl.forEach((el)=>initNavEl(el, wrapperId, params.nextSlideMessage));\n        }\n        if (prevEl) {\n            prevEl.forEach((el)=>initNavEl(el, wrapperId, params.prevSlideMessage));\n        }\n        // Pagination\n        if (hasClickablePagination()) {\n            const paginationEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(swiper.pagination.el);\n            paginationEl.forEach((el)=>{\n                el.addEventListener(\"keydown\", onEnterOrSpaceKey);\n            });\n        }\n        // Tab focus\n        const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n        document.addEventListener(\"visibilitychange\", onVisibilityChange);\n        swiper.el.addEventListener(\"focus\", handleFocus, true);\n        swiper.el.addEventListener(\"focus\", handleFocus, true);\n        swiper.el.addEventListener(\"pointerdown\", handlePointerDown, true);\n        swiper.el.addEventListener(\"pointerup\", handlePointerUp, true);\n    };\n    function destroy() {\n        if (liveRegion) liveRegion.remove();\n        let { nextEl, prevEl } = swiper.navigation ? swiper.navigation : {};\n        nextEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(nextEl);\n        prevEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(prevEl);\n        if (nextEl) {\n            nextEl.forEach((el)=>el.removeEventListener(\"keydown\", onEnterOrSpaceKey));\n        }\n        if (prevEl) {\n            prevEl.forEach((el)=>el.removeEventListener(\"keydown\", onEnterOrSpaceKey));\n        }\n        // Pagination\n        if (hasClickablePagination()) {\n            const paginationEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(swiper.pagination.el);\n            paginationEl.forEach((el)=>{\n                el.removeEventListener(\"keydown\", onEnterOrSpaceKey);\n            });\n        }\n        const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n        document.removeEventListener(\"visibilitychange\", onVisibilityChange);\n        // Tab focus\n        if (swiper.el && typeof swiper.el !== \"string\") {\n            swiper.el.removeEventListener(\"focus\", handleFocus, true);\n            swiper.el.removeEventListener(\"pointerdown\", handlePointerDown, true);\n            swiper.el.removeEventListener(\"pointerup\", handlePointerUp, true);\n        }\n    }\n    on(\"beforeInit\", ()=>{\n        liveRegion = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.c)(\"span\", swiper.params.a11y.notificationClass);\n        liveRegion.setAttribute(\"aria-live\", \"assertive\");\n        liveRegion.setAttribute(\"aria-atomic\", \"true\");\n    });\n    on(\"afterInit\", ()=>{\n        if (!swiper.params.a11y.enabled) return;\n        init();\n    });\n    on(\"slidesLengthChange snapGridLengthChange slidesGridLengthChange\", ()=>{\n        if (!swiper.params.a11y.enabled) return;\n        initSlides();\n    });\n    on(\"fromEdge toEdge afterInit lock unlock\", ()=>{\n        if (!swiper.params.a11y.enabled) return;\n        updateNavigation();\n    });\n    on(\"paginationUpdate\", ()=>{\n        if (!swiper.params.a11y.enabled) return;\n        updatePagination();\n    });\n    on(\"destroy\", ()=>{\n        if (!swiper.params.a11y.enabled) return;\n        destroy();\n    });\n}\n_c = A11y;\n\nvar _c;\n$RefreshReg$(_c, \"A11y\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9hMTF5Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWdFO0FBQ1c7QUFDNEM7QUFFdkgsU0FBU1csS0FBS0MsSUFBSTtJQUNoQixJQUFJLEVBQ0ZDLE1BQU0sRUFDTkMsWUFBWSxFQUNaQyxFQUFFLEVBQ0gsR0FBR0g7SUFDSkUsYUFBYTtRQUNYRSxNQUFNO1lBQ0pDLFNBQVM7WUFDVEMsbUJBQW1CO1lBQ25CQyxrQkFBa0I7WUFDbEJDLGtCQUFrQjtZQUNsQkMsbUJBQW1CO1lBQ25CQyxrQkFBa0I7WUFDbEJDLHlCQUF5QjtZQUN6QkMsbUJBQW1CO1lBQ25CQyxrQkFBa0I7WUFDbEJDLGlDQUFpQztZQUNqQ0MsZUFBZTtZQUNmQyw0QkFBNEI7WUFDNUJDLFdBQVc7WUFDWEMsSUFBSTtZQUNKQyxlQUFlO1FBQ2pCO0lBQ0Y7SUFDQWxCLE9BQU9HLElBQUksR0FBRztRQUNaZ0IsU0FBUztJQUNYO0lBQ0EsSUFBSUMsYUFBYTtJQUNqQixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUMsNkJBQTZCLElBQUlDLE9BQU9DLE9BQU87SUFDbkQsU0FBU0MsT0FBT0MsT0FBTztRQUNyQixNQUFNQyxlQUFlUjtRQUNyQixJQUFJUSxhQUFhQyxNQUFNLEtBQUssR0FBRztRQUMvQmhDLG9EQUFZQSxDQUFDK0IsY0FBY0Q7SUFDN0I7SUFDQSxTQUFTRyxnQkFBZ0JDLElBQUk7UUFDM0IsSUFBSUEsU0FBUyxLQUFLLEdBQUc7WUFDbkJBLE9BQU87UUFDVDtRQUNBLE1BQU1DLGFBQWEsSUFBTUMsS0FBS0MsS0FBSyxDQUFDLEtBQUtELEtBQUtFLE1BQU0sSUFBSUMsUUFBUSxDQUFDO1FBQ2pFLE9BQU8sSUFBSUMsTUFBTSxDQUFDTixNQUFNTyxPQUFPLENBQUMsTUFBTU47SUFDeEM7SUFDQSxTQUFTTyxnQkFBZ0JDLEVBQUU7UUFDekJBLEtBQUs3QyxvREFBaUJBLENBQUM2QztRQUN2QkEsR0FBR0MsT0FBTyxDQUFDQyxDQUFBQTtZQUNUQSxNQUFNQyxZQUFZLENBQUMsWUFBWTtRQUNqQztJQUNGO0lBQ0EsU0FBU0MsbUJBQW1CSixFQUFFO1FBQzVCQSxLQUFLN0Msb0RBQWlCQSxDQUFDNkM7UUFDdkJBLEdBQUdDLE9BQU8sQ0FBQ0MsQ0FBQUE7WUFDVEEsTUFBTUMsWUFBWSxDQUFDLFlBQVk7UUFDakM7SUFDRjtJQUNBLFNBQVNFLFVBQVVMLEVBQUUsRUFBRU0sSUFBSTtRQUN6Qk4sS0FBSzdDLG9EQUFpQkEsQ0FBQzZDO1FBQ3ZCQSxHQUFHQyxPQUFPLENBQUNDLENBQUFBO1lBQ1RBLE1BQU1DLFlBQVksQ0FBQyxRQUFRRztRQUM3QjtJQUNGO0lBQ0EsU0FBU0MscUJBQXFCUCxFQUFFLEVBQUVRLFdBQVc7UUFDM0NSLEtBQUs3QyxvREFBaUJBLENBQUM2QztRQUN2QkEsR0FBR0MsT0FBTyxDQUFDQyxDQUFBQTtZQUNUQSxNQUFNQyxZQUFZLENBQUMsd0JBQXdCSztRQUM3QztJQUNGO0lBQ0EsU0FBU0MsY0FBY1QsRUFBRSxFQUFFVSxRQUFRO1FBQ2pDVixLQUFLN0Msb0RBQWlCQSxDQUFDNkM7UUFDdkJBLEdBQUdDLE9BQU8sQ0FBQ0MsQ0FBQUE7WUFDVEEsTUFBTUMsWUFBWSxDQUFDLGlCQUFpQk87UUFDdEM7SUFDRjtJQUNBLFNBQVNDLFdBQVdYLEVBQUUsRUFBRVksS0FBSztRQUMzQlosS0FBSzdDLG9EQUFpQkEsQ0FBQzZDO1FBQ3ZCQSxHQUFHQyxPQUFPLENBQUNDLENBQUFBO1lBQ1RBLE1BQU1DLFlBQVksQ0FBQyxjQUFjUztRQUNuQztJQUNGO0lBQ0EsU0FBU0MsUUFBUWIsRUFBRSxFQUFFdkIsRUFBRTtRQUNyQnVCLEtBQUs3QyxvREFBaUJBLENBQUM2QztRQUN2QkEsR0FBR0MsT0FBTyxDQUFDQyxDQUFBQTtZQUNUQSxNQUFNQyxZQUFZLENBQUMsTUFBTTFCO1FBQzNCO0lBQ0Y7SUFDQSxTQUFTcUMsVUFBVWQsRUFBRSxFQUFFZSxJQUFJO1FBQ3pCZixLQUFLN0Msb0RBQWlCQSxDQUFDNkM7UUFDdkJBLEdBQUdDLE9BQU8sQ0FBQ0MsQ0FBQUE7WUFDVEEsTUFBTUMsWUFBWSxDQUFDLGFBQWFZO1FBQ2xDO0lBQ0Y7SUFDQSxTQUFTQyxVQUFVaEIsRUFBRTtRQUNuQkEsS0FBSzdDLG9EQUFpQkEsQ0FBQzZDO1FBQ3ZCQSxHQUFHQyxPQUFPLENBQUNDLENBQUFBO1lBQ1RBLE1BQU1DLFlBQVksQ0FBQyxpQkFBaUI7UUFDdEM7SUFDRjtJQUNBLFNBQVNjLFNBQVNqQixFQUFFO1FBQ2xCQSxLQUFLN0Msb0RBQWlCQSxDQUFDNkM7UUFDdkJBLEdBQUdDLE9BQU8sQ0FBQ0MsQ0FBQUE7WUFDVEEsTUFBTUMsWUFBWSxDQUFDLGlCQUFpQjtRQUN0QztJQUNGO0lBQ0EsU0FBU2Usa0JBQWtCQyxDQUFDO1FBQzFCLElBQUlBLEVBQUVDLE9BQU8sS0FBSyxNQUFNRCxFQUFFQyxPQUFPLEtBQUssSUFBSTtRQUMxQyxNQUFNQyxTQUFTN0QsT0FBTzZELE1BQU0sQ0FBQzFELElBQUk7UUFDakMsTUFBTTJELFdBQVdILEVBQUVJLE1BQU07UUFDekIsSUFBSS9ELE9BQU9nRSxVQUFVLElBQUloRSxPQUFPZ0UsVUFBVSxDQUFDeEIsRUFBRSxJQUFLc0IsQ0FBQUEsYUFBYTlELE9BQU9nRSxVQUFVLENBQUN4QixFQUFFLElBQUl4QyxPQUFPZ0UsVUFBVSxDQUFDeEIsRUFBRSxDQUFDeUIsUUFBUSxDQUFDTixFQUFFSSxNQUFNLElBQUk7WUFDL0gsSUFBSSxDQUFDSixFQUFFSSxNQUFNLENBQUNHLE9BQU8sQ0FBQzVFLGtFQUFpQkEsQ0FBQ1UsT0FBTzZELE1BQU0sQ0FBQ0csVUFBVSxDQUFDRyxXQUFXLElBQUk7UUFDbEY7UUFDQSxJQUFJbkUsT0FBT29FLFVBQVUsSUFBSXBFLE9BQU9vRSxVQUFVLENBQUNDLE1BQU0sSUFBSXJFLE9BQU9vRSxVQUFVLENBQUNFLE1BQU0sRUFBRTtZQUM3RSxNQUFNQyxVQUFVNUUsb0RBQWlCQSxDQUFDSyxPQUFPb0UsVUFBVSxDQUFDQyxNQUFNO1lBQzFELE1BQU1HLFVBQVU3RSxvREFBaUJBLENBQUNLLE9BQU9vRSxVQUFVLENBQUNFLE1BQU07WUFDMUQsSUFBSUUsUUFBUUMsUUFBUSxDQUFDWCxXQUFXO2dCQUM5QixJQUFJLENBQUU5RCxDQUFBQSxPQUFPMEUsS0FBSyxJQUFJLENBQUMxRSxPQUFPNkQsTUFBTSxDQUFDYyxJQUFJLEdBQUc7b0JBQzFDM0UsT0FBTzRFLFNBQVM7Z0JBQ2xCO2dCQUNBLElBQUk1RSxPQUFPMEUsS0FBSyxFQUFFO29CQUNoQmhELE9BQU9tQyxPQUFPcEQsZ0JBQWdCO2dCQUNoQyxPQUFPO29CQUNMaUIsT0FBT21DLE9BQU90RCxnQkFBZ0I7Z0JBQ2hDO1lBQ0Y7WUFDQSxJQUFJZ0UsUUFBUUUsUUFBUSxDQUFDWCxXQUFXO2dCQUM5QixJQUFJLENBQUU5RCxDQUFBQSxPQUFPNkUsV0FBVyxJQUFJLENBQUM3RSxPQUFPNkQsTUFBTSxDQUFDYyxJQUFJLEdBQUc7b0JBQ2hEM0UsT0FBTzhFLFNBQVM7Z0JBQ2xCO2dCQUNBLElBQUk5RSxPQUFPNkUsV0FBVyxFQUFFO29CQUN0Qm5ELE9BQU9tQyxPQUFPckQsaUJBQWlCO2dCQUNqQyxPQUFPO29CQUNMa0IsT0FBT21DLE9BQU92RCxnQkFBZ0I7Z0JBQ2hDO1lBQ0Y7UUFDRjtRQUNBLElBQUlOLE9BQU9nRSxVQUFVLElBQUlGLFNBQVNJLE9BQU8sQ0FBQzVFLGtFQUFpQkEsQ0FBQ1UsT0FBTzZELE1BQU0sQ0FBQ0csVUFBVSxDQUFDRyxXQUFXLElBQUk7WUFDbEdMLFNBQVNpQixLQUFLO1FBQ2hCO0lBQ0Y7SUFDQSxTQUFTQztRQUNQLElBQUloRixPQUFPNkQsTUFBTSxDQUFDYyxJQUFJLElBQUkzRSxPQUFPNkQsTUFBTSxDQUFDb0IsTUFBTSxJQUFJLENBQUNqRixPQUFPb0UsVUFBVSxFQUFFO1FBQ3RFLE1BQU0sRUFDSkUsTUFBTSxFQUNORCxNQUFNLEVBQ1AsR0FBR3JFLE9BQU9vRSxVQUFVO1FBQ3JCLElBQUlDLFFBQVE7WUFDVixJQUFJckUsT0FBTzZFLFdBQVcsRUFBRTtnQkFDdEJyQixVQUFVYTtnQkFDVnpCLG1CQUFtQnlCO1lBQ3JCLE9BQU87Z0JBQ0xaLFNBQVNZO2dCQUNUOUIsZ0JBQWdCOEI7WUFDbEI7UUFDRjtRQUNBLElBQUlDLFFBQVE7WUFDVixJQUFJdEUsT0FBTzBFLEtBQUssRUFBRTtnQkFDaEJsQixVQUFVYztnQkFDVjFCLG1CQUFtQjBCO1lBQ3JCLE9BQU87Z0JBQ0xiLFNBQVNhO2dCQUNUL0IsZ0JBQWdCK0I7WUFDbEI7UUFDRjtJQUNGO0lBQ0EsU0FBU1k7UUFDUCxPQUFPbEYsT0FBT2dFLFVBQVUsSUFBSWhFLE9BQU9nRSxVQUFVLENBQUNtQixPQUFPLElBQUluRixPQUFPZ0UsVUFBVSxDQUFDbUIsT0FBTyxDQUFDdEQsTUFBTTtJQUMzRjtJQUNBLFNBQVN1RDtRQUNQLE9BQU9GLG1CQUFtQmxGLE9BQU82RCxNQUFNLENBQUNHLFVBQVUsQ0FBQ3FCLFNBQVM7SUFDOUQ7SUFDQSxTQUFTQztRQUNQLE1BQU16QixTQUFTN0QsT0FBTzZELE1BQU0sQ0FBQzFELElBQUk7UUFDakMsSUFBSSxDQUFDK0UsaUJBQWlCO1FBQ3RCbEYsT0FBT2dFLFVBQVUsQ0FBQ21CLE9BQU8sQ0FBQzFDLE9BQU8sQ0FBQzhDLENBQUFBO1lBQ2hDLElBQUl2RixPQUFPNkQsTUFBTSxDQUFDRyxVQUFVLENBQUNxQixTQUFTLEVBQUU7Z0JBQ3RDOUMsZ0JBQWdCZ0Q7Z0JBQ2hCLElBQUksQ0FBQ3ZGLE9BQU82RCxNQUFNLENBQUNHLFVBQVUsQ0FBQ3dCLFlBQVksRUFBRTtvQkFDMUMzQyxVQUFVMEMsVUFBVTtvQkFDcEJwQyxXQUFXb0MsVUFBVTFCLE9BQU9uRCx1QkFBdUIsQ0FBQzRCLE9BQU8sQ0FBQyxpQkFBaUI3QyxvREFBWUEsQ0FBQzhGLFlBQVk7Z0JBQ3hHO1lBQ0Y7WUFDQSxJQUFJQSxTQUFTckIsT0FBTyxDQUFDNUUsa0VBQWlCQSxDQUFDVSxPQUFPNkQsTUFBTSxDQUFDRyxVQUFVLENBQUN5QixpQkFBaUIsSUFBSTtnQkFDbkZGLFNBQVM1QyxZQUFZLENBQUMsZ0JBQWdCO1lBQ3hDLE9BQU87Z0JBQ0w0QyxTQUFTRyxlQUFlLENBQUM7WUFDM0I7UUFDRjtJQUNGO0lBQ0EsTUFBTUMsWUFBWSxDQUFDbkQsSUFBSW9ELFdBQVdqRTtRQUNoQ1ksZ0JBQWdCQztRQUNoQixJQUFJQSxHQUFHcUQsT0FBTyxLQUFLLFVBQVU7WUFDM0JoRCxVQUFVTCxJQUFJO1lBQ2RBLEdBQUdzRCxnQkFBZ0IsQ0FBQyxXQUFXcEM7UUFDakM7UUFDQVAsV0FBV1gsSUFBSWI7UUFDZnNCLGNBQWNULElBQUlvRDtJQUNwQjtJQUNBLE1BQU1HLG9CQUFvQnBDLENBQUFBO1FBQ3hCLElBQUlyQyxzQkFBc0JBLHVCQUF1QnFDLEVBQUVJLE1BQU0sSUFBSSxDQUFDekMsbUJBQW1CMkMsUUFBUSxDQUFDTixFQUFFSSxNQUFNLEdBQUc7WUFDbkcxQyxzQkFBc0I7UUFDeEI7UUFDQXJCLE9BQU9HLElBQUksQ0FBQ2dCLE9BQU8sR0FBRztJQUN4QjtJQUNBLE1BQU02RSxrQkFBa0I7UUFDdEIzRSxzQkFBc0I7UUFDdEI0RSxzQkFBc0I7WUFDcEJBLHNCQUFzQjtnQkFDcEIsSUFBSSxDQUFDakcsT0FBT2tHLFNBQVMsRUFBRTtvQkFDckJsRyxPQUFPRyxJQUFJLENBQUNnQixPQUFPLEdBQUc7Z0JBQ3hCO1lBQ0Y7UUFDRjtJQUNGO0lBQ0EsTUFBTWdGLHFCQUFxQnhDLENBQUFBO1FBQ3pCcEMsNkJBQTZCLElBQUlDLE9BQU9DLE9BQU87SUFDakQ7SUFDQSxNQUFNMkUsY0FBY3pDLENBQUFBO1FBQ2xCLElBQUkzRCxPQUFPRyxJQUFJLENBQUNnQixPQUFPLElBQUksQ0FBQ25CLE9BQU82RCxNQUFNLENBQUMxRCxJQUFJLENBQUNlLGFBQWEsRUFBRTtRQUM5RCxJQUFJLElBQUlNLE9BQU9DLE9BQU8sS0FBS0YsNkJBQTZCLEtBQUs7UUFDN0QsTUFBTThFLFVBQVUxQyxFQUFFSSxNQUFNLENBQUN1QyxPQUFPLENBQUMsSUFBNkIsT0FBekJ0RyxPQUFPNkQsTUFBTSxDQUFDMEMsVUFBVSxFQUFDO1FBQzlELElBQUksQ0FBQ0YsV0FBVyxDQUFDckcsT0FBT3dHLE1BQU0sQ0FBQy9CLFFBQVEsQ0FBQzRCLFVBQVU7UUFDbEQvRSxxQkFBcUIrRTtRQUNyQixNQUFNSSxXQUFXekcsT0FBT3dHLE1BQU0sQ0FBQ0UsT0FBTyxDQUFDTCxhQUFhckcsT0FBTzJHLFdBQVc7UUFDdEUsTUFBTUMsWUFBWTVHLE9BQU82RCxNQUFNLENBQUNnRCxtQkFBbUIsSUFBSTdHLE9BQU84RyxhQUFhLElBQUk5RyxPQUFPOEcsYUFBYSxDQUFDckMsUUFBUSxDQUFDNEI7UUFDN0csSUFBSUksWUFBWUcsV0FBVztRQUMzQixJQUFJakQsRUFBRW9ELGtCQUFrQixJQUFJcEQsRUFBRW9ELGtCQUFrQixDQUFDQyxnQkFBZ0IsRUFBRTtRQUNuRSxJQUFJaEgsT0FBT2lILFlBQVksSUFBSTtZQUN6QmpILE9BQU93QyxFQUFFLENBQUMwRSxVQUFVLEdBQUc7UUFDekIsT0FBTztZQUNMbEgsT0FBT3dDLEVBQUUsQ0FBQzJFLFNBQVMsR0FBRztRQUN4QjtRQUNBbEIsc0JBQXNCO1lBQ3BCLElBQUk1RSxxQkFBcUI7WUFDekIsSUFBSXJCLE9BQU82RCxNQUFNLENBQUNjLElBQUksRUFBRTtnQkFDdEIzRSxPQUFPb0gsV0FBVyxDQUFDQyxTQUFTaEIsUUFBUWlCLFlBQVksQ0FBQyw2QkFBNkI7WUFDaEYsT0FBTztnQkFDTHRILE9BQU91SCxPQUFPLENBQUN2SCxPQUFPd0csTUFBTSxDQUFDRSxPQUFPLENBQUNMLFVBQVU7WUFDakQ7WUFDQWhGLHNCQUFzQjtRQUN4QjtJQUNGO0lBQ0EsTUFBTW1HLGFBQWE7UUFDakIsTUFBTTNELFNBQVM3RCxPQUFPNkQsTUFBTSxDQUFDMUQsSUFBSTtRQUNqQyxJQUFJMEQsT0FBTzlDLDBCQUEwQixFQUFFO1lBQ3JDZ0MscUJBQXFCL0MsT0FBT3dHLE1BQU0sRUFBRTNDLE9BQU85QywwQkFBMEI7UUFDdkU7UUFDQSxJQUFJOEMsT0FBTzdDLFNBQVMsRUFBRTtZQUNwQjZCLFVBQVU3QyxPQUFPd0csTUFBTSxFQUFFM0MsT0FBTzdDLFNBQVM7UUFDM0M7UUFDQSxNQUFNeUcsZUFBZXpILE9BQU93RyxNQUFNLENBQUMzRSxNQUFNO1FBQ3pDLElBQUlnQyxPQUFPbEQsaUJBQWlCLEVBQUU7WUFDNUJYLE9BQU93RyxNQUFNLENBQUMvRCxPQUFPLENBQUMsQ0FBQzRELFNBQVNxQjtnQkFDOUIsTUFBTUMsYUFBYTNILE9BQU82RCxNQUFNLENBQUNjLElBQUksR0FBRzBDLFNBQVNoQixRQUFRaUIsWUFBWSxDQUFDLDRCQUE0QixNQUFNSTtnQkFDeEcsTUFBTUUsbUJBQW1CL0QsT0FBT2xELGlCQUFpQixDQUFDMkIsT0FBTyxDQUFDLGlCQUFpQnFGLGFBQWEsR0FBR3JGLE9BQU8sQ0FBQyx3QkFBd0JtRjtnQkFDM0h0RSxXQUFXa0QsU0FBU3VCO1lBQ3RCO1FBQ0Y7SUFDRjtJQUNBLE1BQU1DLE9BQU87UUFDWCxNQUFNaEUsU0FBUzdELE9BQU82RCxNQUFNLENBQUMxRCxJQUFJO1FBQ2pDSCxPQUFPd0MsRUFBRSxDQUFDc0YsTUFBTSxDQUFDMUc7UUFFakIsWUFBWTtRQUNaLE1BQU0yRyxjQUFjL0gsT0FBT3dDLEVBQUU7UUFDN0IsSUFBSXFCLE9BQU9oRCwrQkFBK0IsRUFBRTtZQUMxQ2tDLHFCQUFxQmdGLGFBQWFsRSxPQUFPaEQsK0JBQStCO1FBQzFFO1FBQ0EsSUFBSWdELE9BQU9qRCxnQkFBZ0IsRUFBRTtZQUMzQnVDLFdBQVc0RSxhQUFhbEUsT0FBT2pELGdCQUFnQjtRQUNqRDtRQUNBLElBQUlpRCxPQUFPL0MsYUFBYSxFQUFFO1lBQ3hCK0IsVUFBVWtGLGFBQWFsRSxPQUFPL0MsYUFBYTtRQUM3QztRQUVBLFVBQVU7UUFDVixNQUFNa0gsWUFBWWhJLE9BQU9nSSxTQUFTO1FBQ2xDLE1BQU1wQyxZQUFZL0IsT0FBTzVDLEVBQUUsSUFBSStHLFVBQVVWLFlBQVksQ0FBQyxTQUFTLGtCQUFzQyxPQUFwQnhGLGdCQUFnQjtRQUNqRyxNQUFNeUIsT0FBT3ZELE9BQU82RCxNQUFNLENBQUNvRSxRQUFRLElBQUlqSSxPQUFPNkQsTUFBTSxDQUFDb0UsUUFBUSxDQUFDN0gsT0FBTyxHQUFHLFFBQVE7UUFDaEZpRCxRQUFRMkUsV0FBV3BDO1FBQ25CdEMsVUFBVTBFLFdBQVd6RTtRQUVyQixRQUFRO1FBQ1JpRTtRQUVBLGFBQWE7UUFDYixJQUFJLEVBQ0ZsRCxNQUFNLEVBQ05ELE1BQU0sRUFDUCxHQUFHckUsT0FBT29FLFVBQVUsR0FBR3BFLE9BQU9vRSxVQUFVLEdBQUcsQ0FBQztRQUM3Q0UsU0FBUzNFLG9EQUFpQkEsQ0FBQzJFO1FBQzNCRCxTQUFTMUUsb0RBQWlCQSxDQUFDMEU7UUFDM0IsSUFBSUMsUUFBUTtZQUNWQSxPQUFPN0IsT0FBTyxDQUFDRCxDQUFBQSxLQUFNbUQsVUFBVW5ELElBQUlvRCxXQUFXL0IsT0FBT3RELGdCQUFnQjtRQUN2RTtRQUNBLElBQUk4RCxRQUFRO1lBQ1ZBLE9BQU81QixPQUFPLENBQUNELENBQUFBLEtBQU1tRCxVQUFVbkQsSUFBSW9ELFdBQVcvQixPQUFPdkQsZ0JBQWdCO1FBQ3ZFO1FBRUEsYUFBYTtRQUNiLElBQUk4RSwwQkFBMEI7WUFDNUIsTUFBTThDLGVBQWV2SSxvREFBaUJBLENBQUNLLE9BQU9nRSxVQUFVLENBQUN4QixFQUFFO1lBQzNEMEYsYUFBYXpGLE9BQU8sQ0FBQ0QsQ0FBQUE7Z0JBQ25CQSxHQUFHc0QsZ0JBQWdCLENBQUMsV0FBV3BDO1lBQ2pDO1FBQ0Y7UUFFQSxZQUFZO1FBQ1osTUFBTXlFLFdBQVcvSSw2REFBV0E7UUFDNUIrSSxTQUFTckMsZ0JBQWdCLENBQUMsb0JBQW9CSztRQUM5Q25HLE9BQU93QyxFQUFFLENBQUNzRCxnQkFBZ0IsQ0FBQyxTQUFTTSxhQUFhO1FBQ2pEcEcsT0FBT3dDLEVBQUUsQ0FBQ3NELGdCQUFnQixDQUFDLFNBQVNNLGFBQWE7UUFDakRwRyxPQUFPd0MsRUFBRSxDQUFDc0QsZ0JBQWdCLENBQUMsZUFBZUMsbUJBQW1CO1FBQzdEL0YsT0FBT3dDLEVBQUUsQ0FBQ3NELGdCQUFnQixDQUFDLGFBQWFFLGlCQUFpQjtJQUMzRDtJQUNBLFNBQVNvQztRQUNQLElBQUloSCxZQUFZQSxXQUFXaUgsTUFBTTtRQUNqQyxJQUFJLEVBQ0YvRCxNQUFNLEVBQ05ELE1BQU0sRUFDUCxHQUFHckUsT0FBT29FLFVBQVUsR0FBR3BFLE9BQU9vRSxVQUFVLEdBQUcsQ0FBQztRQUM3Q0UsU0FBUzNFLG9EQUFpQkEsQ0FBQzJFO1FBQzNCRCxTQUFTMUUsb0RBQWlCQSxDQUFDMEU7UUFDM0IsSUFBSUMsUUFBUTtZQUNWQSxPQUFPN0IsT0FBTyxDQUFDRCxDQUFBQSxLQUFNQSxHQUFHOEYsbUJBQW1CLENBQUMsV0FBVzVFO1FBQ3pEO1FBQ0EsSUFBSVcsUUFBUTtZQUNWQSxPQUFPNUIsT0FBTyxDQUFDRCxDQUFBQSxLQUFNQSxHQUFHOEYsbUJBQW1CLENBQUMsV0FBVzVFO1FBQ3pEO1FBRUEsYUFBYTtRQUNiLElBQUkwQiwwQkFBMEI7WUFDNUIsTUFBTThDLGVBQWV2SSxvREFBaUJBLENBQUNLLE9BQU9nRSxVQUFVLENBQUN4QixFQUFFO1lBQzNEMEYsYUFBYXpGLE9BQU8sQ0FBQ0QsQ0FBQUE7Z0JBQ25CQSxHQUFHOEYsbUJBQW1CLENBQUMsV0FBVzVFO1lBQ3BDO1FBQ0Y7UUFDQSxNQUFNeUUsV0FBVy9JLDZEQUFXQTtRQUM1QitJLFNBQVNHLG1CQUFtQixDQUFDLG9CQUFvQm5DO1FBQ2pELFlBQVk7UUFDWixJQUFJbkcsT0FBT3dDLEVBQUUsSUFBSSxPQUFPeEMsT0FBT3dDLEVBQUUsS0FBSyxVQUFVO1lBQzlDeEMsT0FBT3dDLEVBQUUsQ0FBQzhGLG1CQUFtQixDQUFDLFNBQVNsQyxhQUFhO1lBQ3BEcEcsT0FBT3dDLEVBQUUsQ0FBQzhGLG1CQUFtQixDQUFDLGVBQWV2QyxtQkFBbUI7WUFDaEUvRixPQUFPd0MsRUFBRSxDQUFDOEYsbUJBQW1CLENBQUMsYUFBYXRDLGlCQUFpQjtRQUM5RDtJQUNGO0lBQ0E5RixHQUFHLGNBQWM7UUFDZmtCLGFBQWE3QixvREFBYUEsQ0FBQyxRQUFRUyxPQUFPNkQsTUFBTSxDQUFDMUQsSUFBSSxDQUFDRSxpQkFBaUI7UUFDdkVlLFdBQVd1QixZQUFZLENBQUMsYUFBYTtRQUNyQ3ZCLFdBQVd1QixZQUFZLENBQUMsZUFBZTtJQUN6QztJQUNBekMsR0FBRyxhQUFhO1FBQ2QsSUFBSSxDQUFDRixPQUFPNkQsTUFBTSxDQUFDMUQsSUFBSSxDQUFDQyxPQUFPLEVBQUU7UUFDakN5SDtJQUNGO0lBQ0EzSCxHQUFHLGtFQUFrRTtRQUNuRSxJQUFJLENBQUNGLE9BQU82RCxNQUFNLENBQUMxRCxJQUFJLENBQUNDLE9BQU8sRUFBRTtRQUNqQ29IO0lBQ0Y7SUFDQXRILEdBQUcseUNBQXlDO1FBQzFDLElBQUksQ0FBQ0YsT0FBTzZELE1BQU0sQ0FBQzFELElBQUksQ0FBQ0MsT0FBTyxFQUFFO1FBQ2pDNEU7SUFDRjtJQUNBOUUsR0FBRyxvQkFBb0I7UUFDckIsSUFBSSxDQUFDRixPQUFPNkQsTUFBTSxDQUFDMUQsSUFBSSxDQUFDQyxPQUFPLEVBQUU7UUFDakNrRjtJQUNGO0lBQ0FwRixHQUFHLFdBQVc7UUFDWixJQUFJLENBQUNGLE9BQU82RCxNQUFNLENBQUMxRCxJQUFJLENBQUNDLE9BQU8sRUFBRTtRQUNqQ2dJO0lBQ0Y7QUFDRjtLQWxYU3RJO0FBb1hrQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvYTExeS5tanM/NGNjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnIGFzIGdldERvY3VtZW50IH0gZnJvbSAnLi4vc2hhcmVkL3Nzci13aW5kb3cuZXNtLm1qcyc7XG5pbXBvcnQgeyBjIGFzIGNsYXNzZXNUb1NlbGVjdG9yIH0gZnJvbSAnLi4vc2hhcmVkL2NsYXNzZXMtdG8tc2VsZWN0b3IubWpzJztcbmltcG9ydCB7IGMgYXMgY3JlYXRlRWxlbWVudCwgaSBhcyBlbGVtZW50SW5kZXgsIG0gYXMgbWFrZUVsZW1lbnRzQXJyYXksIHMgYXMgc2V0SW5uZXJIVE1MIH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzLm1qcyc7XG5cbmZ1bmN0aW9uIEExMXkoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBleHRlbmRQYXJhbXMsXG4gICAgb25cbiAgfSA9IF9yZWY7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgYTExeToge1xuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIG5vdGlmaWNhdGlvbkNsYXNzOiAnc3dpcGVyLW5vdGlmaWNhdGlvbicsXG4gICAgICBwcmV2U2xpZGVNZXNzYWdlOiAnUHJldmlvdXMgc2xpZGUnLFxuICAgICAgbmV4dFNsaWRlTWVzc2FnZTogJ05leHQgc2xpZGUnLFxuICAgICAgZmlyc3RTbGlkZU1lc3NhZ2U6ICdUaGlzIGlzIHRoZSBmaXJzdCBzbGlkZScsXG4gICAgICBsYXN0U2xpZGVNZXNzYWdlOiAnVGhpcyBpcyB0aGUgbGFzdCBzbGlkZScsXG4gICAgICBwYWdpbmF0aW9uQnVsbGV0TWVzc2FnZTogJ0dvIHRvIHNsaWRlIHt7aW5kZXh9fScsXG4gICAgICBzbGlkZUxhYmVsTWVzc2FnZTogJ3t7aW5kZXh9fSAvIHt7c2xpZGVzTGVuZ3RofX0nLFxuICAgICAgY29udGFpbmVyTWVzc2FnZTogbnVsbCxcbiAgICAgIGNvbnRhaW5lclJvbGVEZXNjcmlwdGlvbk1lc3NhZ2U6IG51bGwsXG4gICAgICBjb250YWluZXJSb2xlOiBudWxsLFxuICAgICAgaXRlbVJvbGVEZXNjcmlwdGlvbk1lc3NhZ2U6IG51bGwsXG4gICAgICBzbGlkZVJvbGU6ICdncm91cCcsXG4gICAgICBpZDogbnVsbCxcbiAgICAgIHNjcm9sbE9uRm9jdXM6IHRydWVcbiAgICB9XG4gIH0pO1xuICBzd2lwZXIuYTExeSA9IHtcbiAgICBjbGlja2VkOiBmYWxzZVxuICB9O1xuICBsZXQgbGl2ZVJlZ2lvbiA9IG51bGw7XG4gIGxldCBwcmV2ZW50Rm9jdXNIYW5kbGVyO1xuICBsZXQgZm9jdXNUYXJnZXRTbGlkZUVsO1xuICBsZXQgdmlzaWJpbGl0eUNoYW5nZWRUaW1lc3RhbXAgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgZnVuY3Rpb24gbm90aWZ5KG1lc3NhZ2UpIHtcbiAgICBjb25zdCBub3RpZmljYXRpb24gPSBsaXZlUmVnaW9uO1xuICAgIGlmIChub3RpZmljYXRpb24ubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgc2V0SW5uZXJIVE1MKG5vdGlmaWNhdGlvbiwgbWVzc2FnZSk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0UmFuZG9tTnVtYmVyKHNpemUpIHtcbiAgICBpZiAoc2l6ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzaXplID0gMTY7XG4gICAgfVxuICAgIGNvbnN0IHJhbmRvbUNoYXIgPSAoKSA9PiBNYXRoLnJvdW5kKDE2ICogTWF0aC5yYW5kb20oKSkudG9TdHJpbmcoMTYpO1xuICAgIHJldHVybiAneCcucmVwZWF0KHNpemUpLnJlcGxhY2UoL3gvZywgcmFuZG9tQ2hhcik7XG4gIH1cbiAgZnVuY3Rpb24gbWFrZUVsRm9jdXNhYmxlKGVsKSB7XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBzdWJFbC5zZXRBdHRyaWJ1dGUoJ3RhYkluZGV4JywgJzAnKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBtYWtlRWxOb3RGb2N1c2FibGUoZWwpIHtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIHN1YkVsLnNldEF0dHJpYnV0ZSgndGFiSW5kZXgnLCAnLTEnKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBhZGRFbFJvbGUoZWwsIHJvbGUpIHtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIHN1YkVsLnNldEF0dHJpYnV0ZSgncm9sZScsIHJvbGUpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGFkZEVsUm9sZURlc2NyaXB0aW9uKGVsLCBkZXNjcmlwdGlvbikge1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgc3ViRWwuc2V0QXR0cmlidXRlKCdhcmlhLXJvbGVkZXNjcmlwdGlvbicsIGRlc2NyaXB0aW9uKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBhZGRFbENvbnRyb2xzKGVsLCBjb250cm9scykge1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgc3ViRWwuc2V0QXR0cmlidXRlKCdhcmlhLWNvbnRyb2xzJywgY29udHJvbHMpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGFkZEVsTGFiZWwoZWwsIGxhYmVsKSB7XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBzdWJFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBsYWJlbCk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gYWRkRWxJZChlbCwgaWQpIHtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIHN1YkVsLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gYWRkRWxMaXZlKGVsLCBsaXZlKSB7XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBzdWJFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGl2ZScsIGxpdmUpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGRpc2FibGVFbChlbCkge1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgc3ViRWwuc2V0QXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJywgdHJ1ZSk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZW5hYmxlRWwoZWwpIHtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIHN1YkVsLnNldEF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcsIGZhbHNlKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBvbkVudGVyT3JTcGFjZUtleShlKSB7XG4gICAgaWYgKGUua2V5Q29kZSAhPT0gMTMgJiYgZS5rZXlDb2RlICE9PSAzMikgcmV0dXJuO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuYTExeTtcbiAgICBjb25zdCB0YXJnZXRFbCA9IGUudGFyZ2V0O1xuICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFnaW5hdGlvbi5lbCAmJiAodGFyZ2V0RWwgPT09IHN3aXBlci5wYWdpbmF0aW9uLmVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLmVsLmNvbnRhaW5zKGUudGFyZ2V0KSkpIHtcbiAgICAgIGlmICghZS50YXJnZXQubWF0Y2hlcyhjbGFzc2VzVG9TZWxlY3Rvcihzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpKSkgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsICYmIHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCkge1xuICAgICAgY29uc3QgcHJldkVscyA9IG1ha2VFbGVtZW50c0FycmF5KHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCk7XG4gICAgICBjb25zdCBuZXh0RWxzID0gbWFrZUVsZW1lbnRzQXJyYXkoc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsKTtcbiAgICAgIGlmIChuZXh0RWxzLmluY2x1ZGVzKHRhcmdldEVsKSkge1xuICAgICAgICBpZiAoIShzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgICAgIG5vdGlmeShwYXJhbXMubGFzdFNsaWRlTWVzc2FnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm90aWZ5KHBhcmFtcy5uZXh0U2xpZGVNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHByZXZFbHMuaW5jbHVkZXModGFyZ2V0RWwpKSB7XG4gICAgICAgIGlmICghKHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSkge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVByZXYoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nKSB7XG4gICAgICAgICAgbm90aWZ5KHBhcmFtcy5maXJzdFNsaWRlTWVzc2FnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm90aWZ5KHBhcmFtcy5wcmV2U2xpZGVNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24gJiYgdGFyZ2V0RWwubWF0Y2hlcyhjbGFzc2VzVG9TZWxlY3Rvcihzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpKSkge1xuICAgICAgdGFyZ2V0RWwuY2xpY2soKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlTmF2aWdhdGlvbigpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wIHx8IHN3aXBlci5wYXJhbXMucmV3aW5kIHx8ICFzd2lwZXIubmF2aWdhdGlvbikgcmV0dXJuO1xuICAgIGNvbnN0IHtcbiAgICAgIG5leHRFbCxcbiAgICAgIHByZXZFbFxuICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nKSB7XG4gICAgICAgIGRpc2FibGVFbChwcmV2RWwpO1xuICAgICAgICBtYWtlRWxOb3RGb2N1c2FibGUocHJldkVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVuYWJsZUVsKHByZXZFbCk7XG4gICAgICAgIG1ha2VFbEZvY3VzYWJsZShwcmV2RWwpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobmV4dEVsKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgIGRpc2FibGVFbChuZXh0RWwpO1xuICAgICAgICBtYWtlRWxOb3RGb2N1c2FibGUobmV4dEVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVuYWJsZUVsKG5leHRFbCk7XG4gICAgICAgIG1ha2VFbEZvY3VzYWJsZShuZXh0RWwpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBoYXNQYWdpbmF0aW9uKCkge1xuICAgIHJldHVybiBzd2lwZXIucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoO1xuICB9XG4gIGZ1bmN0aW9uIGhhc0NsaWNrYWJsZVBhZ2luYXRpb24oKSB7XG4gICAgcmV0dXJuIGhhc1BhZ2luYXRpb24oKSAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uY2xpY2thYmxlO1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZVBhZ2luYXRpb24oKSB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuICAgIGlmICghaGFzUGFnaW5hdGlvbigpKSByZXR1cm47XG4gICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5mb3JFYWNoKGJ1bGxldEVsID0+IHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uY2xpY2thYmxlKSB7XG4gICAgICAgIG1ha2VFbEZvY3VzYWJsZShidWxsZXRFbCk7XG4gICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLnJlbmRlckJ1bGxldCkge1xuICAgICAgICAgIGFkZEVsUm9sZShidWxsZXRFbCwgJ2J1dHRvbicpO1xuICAgICAgICAgIGFkZEVsTGFiZWwoYnVsbGV0RWwsIHBhcmFtcy5wYWdpbmF0aW9uQnVsbGV0TWVzc2FnZS5yZXBsYWNlKC9cXHtcXHtpbmRleFxcfVxcfS8sIGVsZW1lbnRJbmRleChidWxsZXRFbCkgKyAxKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChidWxsZXRFbC5tYXRjaGVzKGNsYXNzZXNUb1NlbGVjdG9yKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRBY3RpdmVDbGFzcykpKSB7XG4gICAgICAgIGJ1bGxldEVsLnNldEF0dHJpYnV0ZSgnYXJpYS1jdXJyZW50JywgJ3RydWUnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1bGxldEVsLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1jdXJyZW50Jyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgY29uc3QgaW5pdE5hdkVsID0gKGVsLCB3cmFwcGVySWQsIG1lc3NhZ2UpID0+IHtcbiAgICBtYWtlRWxGb2N1c2FibGUoZWwpO1xuICAgIGlmIChlbC50YWdOYW1lICE9PSAnQlVUVE9OJykge1xuICAgICAgYWRkRWxSb2xlKGVsLCAnYnV0dG9uJyk7XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25FbnRlck9yU3BhY2VLZXkpO1xuICAgIH1cbiAgICBhZGRFbExhYmVsKGVsLCBtZXNzYWdlKTtcbiAgICBhZGRFbENvbnRyb2xzKGVsLCB3cmFwcGVySWQpO1xuICB9O1xuICBjb25zdCBoYW5kbGVQb2ludGVyRG93biA9IGUgPT4ge1xuICAgIGlmIChmb2N1c1RhcmdldFNsaWRlRWwgJiYgZm9jdXNUYXJnZXRTbGlkZUVsICE9PSBlLnRhcmdldCAmJiAhZm9jdXNUYXJnZXRTbGlkZUVsLmNvbnRhaW5zKGUudGFyZ2V0KSkge1xuICAgICAgcHJldmVudEZvY3VzSGFuZGxlciA9IHRydWU7XG4gICAgfVxuICAgIHN3aXBlci5hMTF5LmNsaWNrZWQgPSB0cnVlO1xuICB9O1xuICBjb25zdCBoYW5kbGVQb2ludGVyVXAgPSAoKSA9PiB7XG4gICAgcHJldmVudEZvY3VzSGFuZGxlciA9IGZhbHNlO1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBpZiAoIXN3aXBlci5kZXN0cm95ZWQpIHtcbiAgICAgICAgICBzd2lwZXIuYTExeS5jbGlja2VkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuICBjb25zdCBvblZpc2liaWxpdHlDaGFuZ2UgPSBlID0+IHtcbiAgICB2aXNpYmlsaXR5Q2hhbmdlZFRpbWVzdGFtcCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICB9O1xuICBjb25zdCBoYW5kbGVGb2N1cyA9IGUgPT4ge1xuICAgIGlmIChzd2lwZXIuYTExeS5jbGlja2VkIHx8ICFzd2lwZXIucGFyYW1zLmExMXkuc2Nyb2xsT25Gb2N1cykgcmV0dXJuO1xuICAgIGlmIChuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHZpc2liaWxpdHlDaGFuZ2VkVGltZXN0YW1wIDwgMTAwKSByZXR1cm47XG4gICAgY29uc3Qgc2xpZGVFbCA9IGUudGFyZ2V0LmNsb3Nlc3QoYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICAgIGlmICghc2xpZGVFbCB8fCAhc3dpcGVyLnNsaWRlcy5pbmNsdWRlcyhzbGlkZUVsKSkgcmV0dXJuO1xuICAgIGZvY3VzVGFyZ2V0U2xpZGVFbCA9IHNsaWRlRWw7XG4gICAgY29uc3QgaXNBY3RpdmUgPSBzd2lwZXIuc2xpZGVzLmluZGV4T2Yoc2xpZGVFbCkgPT09IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICBjb25zdCBpc1Zpc2libGUgPSBzd2lwZXIucGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgJiYgc3dpcGVyLnZpc2libGVTbGlkZXMgJiYgc3dpcGVyLnZpc2libGVTbGlkZXMuaW5jbHVkZXMoc2xpZGVFbCk7XG4gICAgaWYgKGlzQWN0aXZlIHx8IGlzVmlzaWJsZSkgcmV0dXJuO1xuICAgIGlmIChlLnNvdXJjZUNhcGFiaWxpdGllcyAmJiBlLnNvdXJjZUNhcGFiaWxpdGllcy5maXJlc1RvdWNoRXZlbnRzKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgc3dpcGVyLmVsLnNjcm9sbExlZnQgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuZWwuc2Nyb2xsVG9wID0gMDtcbiAgICB9XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIGlmIChwcmV2ZW50Rm9jdXNIYW5kbGVyKSByZXR1cm47XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvTG9vcChwYXJzZUludChzbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSksIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5pbmRleE9mKHNsaWRlRWwpLCAwKTtcbiAgICAgIH1cbiAgICAgIHByZXZlbnRGb2N1c0hhbmRsZXIgPSBmYWxzZTtcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgaW5pdFNsaWRlcyA9ICgpID0+IHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmExMXk7XG4gICAgaWYgKHBhcmFtcy5pdGVtUm9sZURlc2NyaXB0aW9uTWVzc2FnZSkge1xuICAgICAgYWRkRWxSb2xlRGVzY3JpcHRpb24oc3dpcGVyLnNsaWRlcywgcGFyYW1zLml0ZW1Sb2xlRGVzY3JpcHRpb25NZXNzYWdlKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5zbGlkZVJvbGUpIHtcbiAgICAgIGFkZEVsUm9sZShzd2lwZXIuc2xpZGVzLCBwYXJhbXMuc2xpZGVSb2xlKTtcbiAgICB9XG4gICAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gICAgaWYgKHBhcmFtcy5zbGlkZUxhYmVsTWVzc2FnZSkge1xuICAgICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKChzbGlkZUVsLCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBzbGlkZUluZGV4ID0gc3dpcGVyLnBhcmFtcy5sb29wID8gcGFyc2VJbnQoc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKSA6IGluZGV4O1xuICAgICAgICBjb25zdCBhcmlhTGFiZWxNZXNzYWdlID0gcGFyYW1zLnNsaWRlTGFiZWxNZXNzYWdlLnJlcGxhY2UoL1xce1xce2luZGV4XFx9XFx9Lywgc2xpZGVJbmRleCArIDEpLnJlcGxhY2UoL1xce1xce3NsaWRlc0xlbmd0aFxcfVxcfS8sIHNsaWRlc0xlbmd0aCk7XG4gICAgICAgIGFkZEVsTGFiZWwoc2xpZGVFbCwgYXJpYUxhYmVsTWVzc2FnZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGluaXQgPSAoKSA9PiB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuICAgIHN3aXBlci5lbC5hcHBlbmQobGl2ZVJlZ2lvbik7XG5cbiAgICAvLyBDb250YWluZXJcbiAgICBjb25zdCBjb250YWluZXJFbCA9IHN3aXBlci5lbDtcbiAgICBpZiAocGFyYW1zLmNvbnRhaW5lclJvbGVEZXNjcmlwdGlvbk1lc3NhZ2UpIHtcbiAgICAgIGFkZEVsUm9sZURlc2NyaXB0aW9uKGNvbnRhaW5lckVsLCBwYXJhbXMuY29udGFpbmVyUm9sZURlc2NyaXB0aW9uTWVzc2FnZSk7XG4gICAgfVxuICAgIGlmIChwYXJhbXMuY29udGFpbmVyTWVzc2FnZSkge1xuICAgICAgYWRkRWxMYWJlbChjb250YWluZXJFbCwgcGFyYW1zLmNvbnRhaW5lck1lc3NhZ2UpO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLmNvbnRhaW5lclJvbGUpIHtcbiAgICAgIGFkZEVsUm9sZShjb250YWluZXJFbCwgcGFyYW1zLmNvbnRhaW5lclJvbGUpO1xuICAgIH1cblxuICAgIC8vIFdyYXBwZXJcbiAgICBjb25zdCB3cmFwcGVyRWwgPSBzd2lwZXIud3JhcHBlckVsO1xuICAgIGNvbnN0IHdyYXBwZXJJZCA9IHBhcmFtcy5pZCB8fCB3cmFwcGVyRWwuZ2V0QXR0cmlidXRlKCdpZCcpIHx8IGBzd2lwZXItd3JhcHBlci0ke2dldFJhbmRvbU51bWJlcigxNil9YDtcbiAgICBjb25zdCBsaXZlID0gc3dpcGVyLnBhcmFtcy5hdXRvcGxheSAmJiBzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmVuYWJsZWQgPyAnb2ZmJyA6ICdwb2xpdGUnO1xuICAgIGFkZEVsSWQod3JhcHBlckVsLCB3cmFwcGVySWQpO1xuICAgIGFkZEVsTGl2ZSh3cmFwcGVyRWwsIGxpdmUpO1xuXG4gICAgLy8gU2xpZGVcbiAgICBpbml0U2xpZGVzKCk7XG5cbiAgICAvLyBOYXZpZ2F0aW9uXG4gICAgbGV0IHtcbiAgICAgIG5leHRFbCxcbiAgICAgIHByZXZFbFxuICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbiA/IHN3aXBlci5uYXZpZ2F0aW9uIDoge307XG4gICAgbmV4dEVsID0gbWFrZUVsZW1lbnRzQXJyYXkobmV4dEVsKTtcbiAgICBwcmV2RWwgPSBtYWtlRWxlbWVudHNBcnJheShwcmV2RWwpO1xuICAgIGlmIChuZXh0RWwpIHtcbiAgICAgIG5leHRFbC5mb3JFYWNoKGVsID0+IGluaXROYXZFbChlbCwgd3JhcHBlcklkLCBwYXJhbXMubmV4dFNsaWRlTWVzc2FnZSkpO1xuICAgIH1cbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuZm9yRWFjaChlbCA9PiBpbml0TmF2RWwoZWwsIHdyYXBwZXJJZCwgcGFyYW1zLnByZXZTbGlkZU1lc3NhZ2UpKTtcbiAgICB9XG5cbiAgICAvLyBQYWdpbmF0aW9uXG4gICAgaWYgKGhhc0NsaWNrYWJsZVBhZ2luYXRpb24oKSkge1xuICAgICAgY29uc3QgcGFnaW5hdGlvbkVsID0gbWFrZUVsZW1lbnRzQXJyYXkoc3dpcGVyLnBhZ2luYXRpb24uZWwpO1xuICAgICAgcGFnaW5hdGlvbkVsLmZvckVhY2goZWwgPT4ge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25FbnRlck9yU3BhY2VLZXkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gVGFiIGZvY3VzXG4gICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBvblZpc2liaWxpdHlDaGFuZ2UpO1xuICAgIHN3aXBlci5lbC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGhhbmRsZUZvY3VzLCB0cnVlKTtcbiAgICBzd2lwZXIuZWwuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBoYW5kbGVGb2N1cywgdHJ1ZSk7XG4gICAgc3dpcGVyLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICAgIHN3aXBlci5lbC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCBoYW5kbGVQb2ludGVyVXAsIHRydWUpO1xuICB9O1xuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGlmIChsaXZlUmVnaW9uKSBsaXZlUmVnaW9uLnJlbW92ZSgpO1xuICAgIGxldCB7XG4gICAgICBuZXh0RWwsXG4gICAgICBwcmV2RWxcbiAgICB9ID0gc3dpcGVyLm5hdmlnYXRpb24gPyBzd2lwZXIubmF2aWdhdGlvbiA6IHt9O1xuICAgIG5leHRFbCA9IG1ha2VFbGVtZW50c0FycmF5KG5leHRFbCk7XG4gICAgcHJldkVsID0gbWFrZUVsZW1lbnRzQXJyYXkocHJldkVsKTtcbiAgICBpZiAobmV4dEVsKSB7XG4gICAgICBuZXh0RWwuZm9yRWFjaChlbCA9PiBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25FbnRlck9yU3BhY2VLZXkpKTtcbiAgICB9XG4gICAgaWYgKHByZXZFbCkge1xuICAgICAgcHJldkVsLmZvckVhY2goZWwgPT4gZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uRW50ZXJPclNwYWNlS2V5KSk7XG4gICAgfVxuXG4gICAgLy8gUGFnaW5hdGlvblxuICAgIGlmIChoYXNDbGlja2FibGVQYWdpbmF0aW9uKCkpIHtcbiAgICAgIGNvbnN0IHBhZ2luYXRpb25FbCA9IG1ha2VFbGVtZW50c0FycmF5KHN3aXBlci5wYWdpbmF0aW9uLmVsKTtcbiAgICAgIHBhZ2luYXRpb25FbC5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uRW50ZXJPclNwYWNlS2V5KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIG9uVmlzaWJpbGl0eUNoYW5nZSk7XG4gICAgLy8gVGFiIGZvY3VzXG4gICAgaWYgKHN3aXBlci5lbCAmJiB0eXBlb2Ygc3dpcGVyLmVsICE9PSAnc3RyaW5nJykge1xuICAgICAgc3dpcGVyLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgaGFuZGxlRm9jdXMsIHRydWUpO1xuICAgICAgc3dpcGVyLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICAgICAgc3dpcGVyLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIGhhbmRsZVBvaW50ZXJVcCwgdHJ1ZSk7XG4gICAgfVxuICB9XG4gIG9uKCdiZWZvcmVJbml0JywgKCkgPT4ge1xuICAgIGxpdmVSZWdpb24gPSBjcmVhdGVFbGVtZW50KCdzcGFuJywgc3dpcGVyLnBhcmFtcy5hMTF5Lm5vdGlmaWNhdGlvbkNsYXNzKTtcbiAgICBsaXZlUmVnaW9uLnNldEF0dHJpYnV0ZSgnYXJpYS1saXZlJywgJ2Fzc2VydGl2ZScpO1xuICAgIGxpdmVSZWdpb24uc2V0QXR0cmlidXRlKCdhcmlhLWF0b21pYycsICd0cnVlJyk7XG4gIH0pO1xuICBvbignYWZ0ZXJJbml0JywgKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjtcbiAgICBpbml0KCk7XG4gIH0pO1xuICBvbignc2xpZGVzTGVuZ3RoQ2hhbmdlIHNuYXBHcmlkTGVuZ3RoQ2hhbmdlIHNsaWRlc0dyaWRMZW5ndGhDaGFuZ2UnLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgIGluaXRTbGlkZXMoKTtcbiAgfSk7XG4gIG9uKCdmcm9tRWRnZSB0b0VkZ2UgYWZ0ZXJJbml0IGxvY2sgdW5sb2NrJywgKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjtcbiAgICB1cGRhdGVOYXZpZ2F0aW9uKCk7XG4gIH0pO1xuICBvbigncGFnaW5hdGlvblVwZGF0ZScsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgdXBkYXRlUGFnaW5hdGlvbigpO1xuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgIGRlc3Ryb3koKTtcbiAgfSk7XG59XG5cbmV4cG9ydCB7IEExMXkgYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbImciLCJnZXREb2N1bWVudCIsImMiLCJjbGFzc2VzVG9TZWxlY3RvciIsImNyZWF0ZUVsZW1lbnQiLCJpIiwiZWxlbWVudEluZGV4IiwibSIsIm1ha2VFbGVtZW50c0FycmF5IiwicyIsInNldElubmVySFRNTCIsIkExMXkiLCJfcmVmIiwic3dpcGVyIiwiZXh0ZW5kUGFyYW1zIiwib24iLCJhMTF5IiwiZW5hYmxlZCIsIm5vdGlmaWNhdGlvbkNsYXNzIiwicHJldlNsaWRlTWVzc2FnZSIsIm5leHRTbGlkZU1lc3NhZ2UiLCJmaXJzdFNsaWRlTWVzc2FnZSIsImxhc3RTbGlkZU1lc3NhZ2UiLCJwYWdpbmF0aW9uQnVsbGV0TWVzc2FnZSIsInNsaWRlTGFiZWxNZXNzYWdlIiwiY29udGFpbmVyTWVzc2FnZSIsImNvbnRhaW5lclJvbGVEZXNjcmlwdGlvbk1lc3NhZ2UiLCJjb250YWluZXJSb2xlIiwiaXRlbVJvbGVEZXNjcmlwdGlvbk1lc3NhZ2UiLCJzbGlkZVJvbGUiLCJpZCIsInNjcm9sbE9uRm9jdXMiLCJjbGlja2VkIiwibGl2ZVJlZ2lvbiIsInByZXZlbnRGb2N1c0hhbmRsZXIiLCJmb2N1c1RhcmdldFNsaWRlRWwiLCJ2aXNpYmlsaXR5Q2hhbmdlZFRpbWVzdGFtcCIsIkRhdGUiLCJnZXRUaW1lIiwibm90aWZ5IiwibWVzc2FnZSIsIm5vdGlmaWNhdGlvbiIsImxlbmd0aCIsImdldFJhbmRvbU51bWJlciIsInNpemUiLCJyYW5kb21DaGFyIiwiTWF0aCIsInJvdW5kIiwicmFuZG9tIiwidG9TdHJpbmciLCJyZXBlYXQiLCJyZXBsYWNlIiwibWFrZUVsRm9jdXNhYmxlIiwiZWwiLCJmb3JFYWNoIiwic3ViRWwiLCJzZXRBdHRyaWJ1dGUiLCJtYWtlRWxOb3RGb2N1c2FibGUiLCJhZGRFbFJvbGUiLCJyb2xlIiwiYWRkRWxSb2xlRGVzY3JpcHRpb24iLCJkZXNjcmlwdGlvbiIsImFkZEVsQ29udHJvbHMiLCJjb250cm9scyIsImFkZEVsTGFiZWwiLCJsYWJlbCIsImFkZEVsSWQiLCJhZGRFbExpdmUiLCJsaXZlIiwiZGlzYWJsZUVsIiwiZW5hYmxlRWwiLCJvbkVudGVyT3JTcGFjZUtleSIsImUiLCJrZXlDb2RlIiwicGFyYW1zIiwidGFyZ2V0RWwiLCJ0YXJnZXQiLCJwYWdpbmF0aW9uIiwiY29udGFpbnMiLCJtYXRjaGVzIiwiYnVsbGV0Q2xhc3MiLCJuYXZpZ2F0aW9uIiwicHJldkVsIiwibmV4dEVsIiwicHJldkVscyIsIm5leHRFbHMiLCJpbmNsdWRlcyIsImlzRW5kIiwibG9vcCIsInNsaWRlTmV4dCIsImlzQmVnaW5uaW5nIiwic2xpZGVQcmV2IiwiY2xpY2siLCJ1cGRhdGVOYXZpZ2F0aW9uIiwicmV3aW5kIiwiaGFzUGFnaW5hdGlvbiIsImJ1bGxldHMiLCJoYXNDbGlja2FibGVQYWdpbmF0aW9uIiwiY2xpY2thYmxlIiwidXBkYXRlUGFnaW5hdGlvbiIsImJ1bGxldEVsIiwicmVuZGVyQnVsbGV0IiwiYnVsbGV0QWN0aXZlQ2xhc3MiLCJyZW1vdmVBdHRyaWJ1dGUiLCJpbml0TmF2RWwiLCJ3cmFwcGVySWQiLCJ0YWdOYW1lIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZVBvaW50ZXJEb3duIiwiaGFuZGxlUG9pbnRlclVwIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZGVzdHJveWVkIiwib25WaXNpYmlsaXR5Q2hhbmdlIiwiaGFuZGxlRm9jdXMiLCJzbGlkZUVsIiwiY2xvc2VzdCIsInNsaWRlQ2xhc3MiLCJzbGlkZXMiLCJpc0FjdGl2ZSIsImluZGV4T2YiLCJhY3RpdmVJbmRleCIsImlzVmlzaWJsZSIsIndhdGNoU2xpZGVzUHJvZ3Jlc3MiLCJ2aXNpYmxlU2xpZGVzIiwic291cmNlQ2FwYWJpbGl0aWVzIiwiZmlyZXNUb3VjaEV2ZW50cyIsImlzSG9yaXpvbnRhbCIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJzbGlkZVRvTG9vcCIsInBhcnNlSW50IiwiZ2V0QXR0cmlidXRlIiwic2xpZGVUbyIsImluaXRTbGlkZXMiLCJzbGlkZXNMZW5ndGgiLCJpbmRleCIsInNsaWRlSW5kZXgiLCJhcmlhTGFiZWxNZXNzYWdlIiwiaW5pdCIsImFwcGVuZCIsImNvbnRhaW5lckVsIiwid3JhcHBlckVsIiwiYXV0b3BsYXkiLCJwYWdpbmF0aW9uRWwiLCJkb2N1bWVudCIsImRlc3Ryb3kiLCJyZW1vdmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/a11y.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/autoplay.mjs":
/*!**************************************************!*\
  !*** ./node_modules/swiper/modules/autoplay.mjs ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Autoplay; }\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n\n/* eslint no-underscore-dangle: \"off\" */ /* eslint no-use-before-define: \"off\" */ function Autoplay(_ref) {\n    let { swiper, extendParams, on, emit, params } = _ref;\n    swiper.autoplay = {\n        running: false,\n        paused: false,\n        timeLeft: 0\n    };\n    extendParams({\n        autoplay: {\n            enabled: false,\n            delay: 3000,\n            waitForTransition: true,\n            disableOnInteraction: false,\n            stopOnLastSlide: false,\n            reverseDirection: false,\n            pauseOnMouseEnter: false\n        }\n    });\n    let timeout;\n    let raf;\n    let autoplayDelayTotal = params && params.autoplay ? params.autoplay.delay : 3000;\n    let autoplayDelayCurrent = params && params.autoplay ? params.autoplay.delay : 3000;\n    let autoplayTimeLeft;\n    let autoplayStartTime = new Date().getTime();\n    let wasPaused;\n    let isTouched;\n    let pausedByTouch;\n    let touchStartTimeout;\n    let slideChanged;\n    let pausedByInteraction;\n    let pausedByPointerEnter;\n    function onTransitionEnd(e) {\n        if (!swiper || swiper.destroyed || !swiper.wrapperEl) return;\n        if (e.target !== swiper.wrapperEl) return;\n        swiper.wrapperEl.removeEventListener(\"transitionend\", onTransitionEnd);\n        if (pausedByPointerEnter || e.detail && e.detail.bySwiperTouchMove) {\n            return;\n        }\n        resume();\n    }\n    const calcTimeLeft = ()=>{\n        if (swiper.destroyed || !swiper.autoplay.running) return;\n        if (swiper.autoplay.paused) {\n            wasPaused = true;\n        } else if (wasPaused) {\n            autoplayDelayCurrent = autoplayTimeLeft;\n            wasPaused = false;\n        }\n        const timeLeft = swiper.autoplay.paused ? autoplayTimeLeft : autoplayStartTime + autoplayDelayCurrent - new Date().getTime();\n        swiper.autoplay.timeLeft = timeLeft;\n        emit(\"autoplayTimeLeft\", timeLeft, timeLeft / autoplayDelayTotal);\n        raf = requestAnimationFrame(()=>{\n            calcTimeLeft();\n        });\n    };\n    const getSlideDelay = ()=>{\n        let activeSlideEl;\n        if (swiper.virtual && swiper.params.virtual.enabled) {\n            activeSlideEl = swiper.slides.find((slideEl)=>slideEl.classList.contains(\"swiper-slide-active\"));\n        } else {\n            activeSlideEl = swiper.slides[swiper.activeIndex];\n        }\n        if (!activeSlideEl) return undefined;\n        const currentSlideDelay = parseInt(activeSlideEl.getAttribute(\"data-swiper-autoplay\"), 10);\n        return currentSlideDelay;\n    };\n    const run = (delayForce)=>{\n        if (swiper.destroyed || !swiper.autoplay.running) return;\n        cancelAnimationFrame(raf);\n        calcTimeLeft();\n        let delay = typeof delayForce === \"undefined\" ? swiper.params.autoplay.delay : delayForce;\n        autoplayDelayTotal = swiper.params.autoplay.delay;\n        autoplayDelayCurrent = swiper.params.autoplay.delay;\n        const currentSlideDelay = getSlideDelay();\n        if (!Number.isNaN(currentSlideDelay) && currentSlideDelay > 0 && typeof delayForce === \"undefined\") {\n            delay = currentSlideDelay;\n            autoplayDelayTotal = currentSlideDelay;\n            autoplayDelayCurrent = currentSlideDelay;\n        }\n        autoplayTimeLeft = delay;\n        const speed = swiper.params.speed;\n        const proceed = ()=>{\n            if (!swiper || swiper.destroyed) return;\n            if (swiper.params.autoplay.reverseDirection) {\n                if (!swiper.isBeginning || swiper.params.loop || swiper.params.rewind) {\n                    swiper.slidePrev(speed, true, true);\n                    emit(\"autoplay\");\n                } else if (!swiper.params.autoplay.stopOnLastSlide) {\n                    swiper.slideTo(swiper.slides.length - 1, speed, true, true);\n                    emit(\"autoplay\");\n                }\n            } else {\n                if (!swiper.isEnd || swiper.params.loop || swiper.params.rewind) {\n                    swiper.slideNext(speed, true, true);\n                    emit(\"autoplay\");\n                } else if (!swiper.params.autoplay.stopOnLastSlide) {\n                    swiper.slideTo(0, speed, true, true);\n                    emit(\"autoplay\");\n                }\n            }\n            if (swiper.params.cssMode) {\n                autoplayStartTime = new Date().getTime();\n                requestAnimationFrame(()=>{\n                    run();\n                });\n            }\n        };\n        if (delay > 0) {\n            clearTimeout(timeout);\n            timeout = setTimeout(()=>{\n                proceed();\n            }, delay);\n        } else {\n            requestAnimationFrame(()=>{\n                proceed();\n            });\n        }\n        // eslint-disable-next-line\n        return delay;\n    };\n    const start = ()=>{\n        autoplayStartTime = new Date().getTime();\n        swiper.autoplay.running = true;\n        run();\n        emit(\"autoplayStart\");\n    };\n    const stop = ()=>{\n        swiper.autoplay.running = false;\n        clearTimeout(timeout);\n        cancelAnimationFrame(raf);\n        emit(\"autoplayStop\");\n    };\n    const pause = (internal, reset)=>{\n        if (swiper.destroyed || !swiper.autoplay.running) return;\n        clearTimeout(timeout);\n        if (!internal) {\n            pausedByInteraction = true;\n        }\n        const proceed = ()=>{\n            emit(\"autoplayPause\");\n            if (swiper.params.autoplay.waitForTransition) {\n                swiper.wrapperEl.addEventListener(\"transitionend\", onTransitionEnd);\n            } else {\n                resume();\n            }\n        };\n        swiper.autoplay.paused = true;\n        if (reset) {\n            if (slideChanged) {\n                autoplayTimeLeft = swiper.params.autoplay.delay;\n            }\n            slideChanged = false;\n            proceed();\n            return;\n        }\n        const delay = autoplayTimeLeft || swiper.params.autoplay.delay;\n        autoplayTimeLeft = delay - (new Date().getTime() - autoplayStartTime);\n        if (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop) return;\n        if (autoplayTimeLeft < 0) autoplayTimeLeft = 0;\n        proceed();\n    };\n    const resume = ()=>{\n        if (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop || swiper.destroyed || !swiper.autoplay.running) return;\n        autoplayStartTime = new Date().getTime();\n        if (pausedByInteraction) {\n            pausedByInteraction = false;\n            run(autoplayTimeLeft);\n        } else {\n            run();\n        }\n        swiper.autoplay.paused = false;\n        emit(\"autoplayResume\");\n    };\n    const onVisibilityChange = ()=>{\n        if (swiper.destroyed || !swiper.autoplay.running) return;\n        const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n        if (document.visibilityState === \"hidden\") {\n            pausedByInteraction = true;\n            pause(true);\n        }\n        if (document.visibilityState === \"visible\") {\n            resume();\n        }\n    };\n    const onPointerEnter = (e)=>{\n        if (e.pointerType !== \"mouse\") return;\n        pausedByInteraction = true;\n        pausedByPointerEnter = true;\n        if (swiper.animating || swiper.autoplay.paused) return;\n        pause(true);\n    };\n    const onPointerLeave = (e)=>{\n        if (e.pointerType !== \"mouse\") return;\n        pausedByPointerEnter = false;\n        if (swiper.autoplay.paused) {\n            resume();\n        }\n    };\n    const attachMouseEvents = ()=>{\n        if (swiper.params.autoplay.pauseOnMouseEnter) {\n            swiper.el.addEventListener(\"pointerenter\", onPointerEnter);\n            swiper.el.addEventListener(\"pointerleave\", onPointerLeave);\n        }\n    };\n    const detachMouseEvents = ()=>{\n        if (swiper.el && typeof swiper.el !== \"string\") {\n            swiper.el.removeEventListener(\"pointerenter\", onPointerEnter);\n            swiper.el.removeEventListener(\"pointerleave\", onPointerLeave);\n        }\n    };\n    const attachDocumentEvents = ()=>{\n        const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n        document.addEventListener(\"visibilitychange\", onVisibilityChange);\n    };\n    const detachDocumentEvents = ()=>{\n        const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n        document.removeEventListener(\"visibilitychange\", onVisibilityChange);\n    };\n    on(\"init\", ()=>{\n        if (swiper.params.autoplay.enabled) {\n            attachMouseEvents();\n            attachDocumentEvents();\n            start();\n        }\n    });\n    on(\"destroy\", ()=>{\n        detachMouseEvents();\n        detachDocumentEvents();\n        if (swiper.autoplay.running) {\n            stop();\n        }\n    });\n    on(\"_freeModeStaticRelease\", ()=>{\n        if (pausedByTouch || pausedByInteraction) {\n            resume();\n        }\n    });\n    on(\"_freeModeNoMomentumRelease\", ()=>{\n        if (!swiper.params.autoplay.disableOnInteraction) {\n            pause(true, true);\n        } else {\n            stop();\n        }\n    });\n    on(\"beforeTransitionStart\", (_s, speed, internal)=>{\n        if (swiper.destroyed || !swiper.autoplay.running) return;\n        if (internal || !swiper.params.autoplay.disableOnInteraction) {\n            pause(true, true);\n        } else {\n            stop();\n        }\n    });\n    on(\"sliderFirstMove\", ()=>{\n        if (swiper.destroyed || !swiper.autoplay.running) return;\n        if (swiper.params.autoplay.disableOnInteraction) {\n            stop();\n            return;\n        }\n        isTouched = true;\n        pausedByTouch = false;\n        pausedByInteraction = false;\n        touchStartTimeout = setTimeout(()=>{\n            pausedByInteraction = true;\n            pausedByTouch = true;\n            pause(true);\n        }, 200);\n    });\n    on(\"touchEnd\", ()=>{\n        if (swiper.destroyed || !swiper.autoplay.running || !isTouched) return;\n        clearTimeout(touchStartTimeout);\n        clearTimeout(timeout);\n        if (swiper.params.autoplay.disableOnInteraction) {\n            pausedByTouch = false;\n            isTouched = false;\n            return;\n        }\n        if (pausedByTouch && swiper.params.cssMode) resume();\n        pausedByTouch = false;\n        isTouched = false;\n    });\n    on(\"slideChange\", ()=>{\n        if (swiper.destroyed || !swiper.autoplay.running) return;\n        slideChanged = true;\n    });\n    Object.assign(swiper.autoplay, {\n        start,\n        stop,\n        pause,\n        resume\n    });\n}\n_c = Autoplay;\n\nvar _c;\n$RefreshReg$(_c, \"Autoplay\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/autoplay.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/controller.mjs":
/*!****************************************************!*\
  !*** ./node_modules/swiper/modules/controller.mjs ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Controller; }\n/* harmony export */ });\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n\n/* eslint no-bitwise: [\"error\", { \"allow\": [\">>\"] }] */ function Controller(_ref) {\n    let { swiper, extendParams, on } = _ref;\n    extendParams({\n        controller: {\n            control: undefined,\n            inverse: false,\n            by: \"slide\" // or 'container'\n        }\n    });\n    swiper.controller = {\n        control: undefined\n    };\n    function LinearSpline(x, y) {\n        const binarySearch = function search() {\n            let maxIndex;\n            let minIndex;\n            let guess;\n            return (array, val)=>{\n                minIndex = -1;\n                maxIndex = array.length;\n                while(maxIndex - minIndex > 1){\n                    guess = maxIndex + minIndex >> 1;\n                    if (array[guess] <= val) {\n                        minIndex = guess;\n                    } else {\n                        maxIndex = guess;\n                    }\n                }\n                return maxIndex;\n            };\n        }();\n        this.x = x;\n        this.y = y;\n        this.lastIndex = x.length - 1;\n        // Given an x value (x2), return the expected y2 value:\n        // (x1,y1) is the known point before given value,\n        // (x3,y3) is the known point after given value.\n        let i1;\n        let i3;\n        this.interpolate = function interpolate(x2) {\n            if (!x2) return 0;\n            // Get the indexes of x1 and x3 (the array indexes before and after given x2):\n            i3 = binarySearch(this.x, x2);\n            i1 = i3 - 1;\n            // We have our indexes i1 & i3, so we can calculate already:\n            // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1\n            return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];\n        };\n        return this;\n    }\n    function getInterpolateFunction(c) {\n        swiper.controller.spline = swiper.params.loop ? new LinearSpline(swiper.slidesGrid, c.slidesGrid) : new LinearSpline(swiper.snapGrid, c.snapGrid);\n    }\n    function setTranslate(_t, byController) {\n        const controlled = swiper.controller.control;\n        let multiplier;\n        let controlledTranslate;\n        const Swiper = swiper.constructor;\n        function setControlledTranslate(c) {\n            if (c.destroyed) return;\n            // this will create an Interpolate function based on the snapGrids\n            // x is the Grid of the scrolled scroller and y will be the controlled scroller\n            // it makes sense to create this only once and recall it for the interpolation\n            // the function does a lot of value caching for performance\n            const translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;\n            if (swiper.params.controller.by === \"slide\") {\n                getInterpolateFunction(c);\n                // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid\n                // but it did not work out\n                controlledTranslate = -swiper.controller.spline.interpolate(-translate);\n            }\n            if (!controlledTranslate || swiper.params.controller.by === \"container\") {\n                multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());\n                if (Number.isNaN(multiplier) || !Number.isFinite(multiplier)) {\n                    multiplier = 1;\n                }\n                controlledTranslate = (translate - swiper.minTranslate()) * multiplier + c.minTranslate();\n            }\n            if (swiper.params.controller.inverse) {\n                controlledTranslate = c.maxTranslate() - controlledTranslate;\n            }\n            c.updateProgress(controlledTranslate);\n            c.setTranslate(controlledTranslate, swiper);\n            c.updateActiveIndex();\n            c.updateSlidesClasses();\n        }\n        if (Array.isArray(controlled)) {\n            for(let i = 0; i < controlled.length; i += 1){\n                if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\n                    setControlledTranslate(controlled[i]);\n                }\n            }\n        } else if (controlled instanceof Swiper && byController !== controlled) {\n            setControlledTranslate(controlled);\n        }\n    }\n    function setTransition(duration, byController) {\n        const Swiper = swiper.constructor;\n        const controlled = swiper.controller.control;\n        let i;\n        function setControlledTransition(c) {\n            if (c.destroyed) return;\n            c.setTransition(duration, swiper);\n            if (duration !== 0) {\n                c.transitionStart();\n                if (c.params.autoHeight) {\n                    (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(()=>{\n                        c.updateAutoHeight();\n                    });\n                }\n                (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.l)(c.wrapperEl, ()=>{\n                    if (!controlled) return;\n                    c.transitionEnd();\n                });\n            }\n        }\n        if (Array.isArray(controlled)) {\n            for(i = 0; i < controlled.length; i += 1){\n                if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\n                    setControlledTransition(controlled[i]);\n                }\n            }\n        } else if (controlled instanceof Swiper && byController !== controlled) {\n            setControlledTransition(controlled);\n        }\n    }\n    function removeSpline() {\n        if (!swiper.controller.control) return;\n        if (swiper.controller.spline) {\n            swiper.controller.spline = undefined;\n            delete swiper.controller.spline;\n        }\n    }\n    on(\"beforeInit\", ()=>{\n        if ( true && // eslint-disable-line\n        (typeof swiper.params.controller.control === \"string\" || swiper.params.controller.control instanceof HTMLElement)) {\n            const controlElements = typeof swiper.params.controller.control === \"string\" ? [\n                ...document.querySelectorAll(swiper.params.controller.control)\n            ] : [\n                swiper.params.controller.control\n            ];\n            controlElements.forEach((controlElement)=>{\n                if (!swiper.controller.control) swiper.controller.control = [];\n                if (controlElement && controlElement.swiper) {\n                    swiper.controller.control.push(controlElement.swiper);\n                } else if (controlElement) {\n                    const eventName = \"\".concat(swiper.params.eventsPrefix, \"init\");\n                    const onControllerSwiper = (e)=>{\n                        swiper.controller.control.push(e.detail[0]);\n                        swiper.update();\n                        controlElement.removeEventListener(eventName, onControllerSwiper);\n                    };\n                    controlElement.addEventListener(eventName, onControllerSwiper);\n                }\n            });\n            return;\n        }\n        swiper.controller.control = swiper.params.controller.control;\n    });\n    on(\"update\", ()=>{\n        removeSpline();\n    });\n    on(\"resize\", ()=>{\n        removeSpline();\n    });\n    on(\"observerUpdate\", ()=>{\n        removeSpline();\n    });\n    on(\"setTranslate\", (_s, translate, byController)=>{\n        if (!swiper.controller.control || swiper.controller.control.destroyed) return;\n        swiper.controller.setTranslate(translate, byController);\n    });\n    on(\"setTransition\", (_s, duration, byController)=>{\n        if (!swiper.controller.control || swiper.controller.control.destroyed) return;\n        swiper.controller.setTransition(duration, byController);\n    });\n    Object.assign(swiper.controller, {\n        setTranslate,\n        setTransition\n    });\n}\n_c = Controller;\n\nvar _c;\n$RefreshReg$(_c, \"Controller\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/controller.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/effect-cards.mjs":
/*!******************************************************!*\
  !*** ./node_modules/swiper/modules/effect-cards.mjs ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ EffectCards; }\n/* harmony export */ });\n/* harmony import */ var _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/create-shadow.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/create-shadow.mjs\");\n/* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/effect-init.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/effect-init.mjs\");\n/* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/effect-target.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/effect-target.mjs\");\n/* harmony import */ var _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/effect-virtual-transition-end.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/effect-virtual-transition-end.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n\n\n\n\n\nfunction EffectCards(_ref) {\n    let { swiper, extendParams, on } = _ref;\n    extendParams({\n        cardsEffect: {\n            slideShadows: true,\n            rotate: true,\n            perSlideRotate: 2,\n            perSlideOffset: 8\n        }\n    });\n    const setTranslate = ()=>{\n        const { slides, activeIndex, rtlTranslate: rtl } = swiper;\n        const params = swiper.params.cardsEffect;\n        const { startTranslate, isTouched } = swiper.touchEventsData;\n        const currentTranslate = rtl ? -swiper.translate : swiper.translate;\n        for(let i = 0; i < slides.length; i += 1){\n            const slideEl = slides[i];\n            const slideProgress = slideEl.progress;\n            const progress = Math.min(Math.max(slideProgress, -4), 4);\n            let offset = slideEl.swiperSlideOffset;\n            if (swiper.params.centeredSlides && !swiper.params.cssMode) {\n                swiper.wrapperEl.style.transform = \"translateX(\".concat(swiper.minTranslate(), \"px)\");\n            }\n            if (swiper.params.centeredSlides && swiper.params.cssMode) {\n                offset -= slides[0].swiperSlideOffset;\n            }\n            let tX = swiper.params.cssMode ? -offset - swiper.translate : -offset;\n            let tY = 0;\n            const tZ = -100 * Math.abs(progress);\n            let scale = 1;\n            let rotate = -params.perSlideRotate * progress;\n            let tXAdd = params.perSlideOffset - Math.abs(progress) * 0.75;\n            const slideIndex = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.from + i : i;\n            const isSwipeToNext = (slideIndex === activeIndex || slideIndex === activeIndex - 1) && progress > 0 && progress < 1 && (isTouched || swiper.params.cssMode) && currentTranslate < startTranslate;\n            const isSwipeToPrev = (slideIndex === activeIndex || slideIndex === activeIndex + 1) && progress < 0 && progress > -1 && (isTouched || swiper.params.cssMode) && currentTranslate > startTranslate;\n            if (isSwipeToNext || isSwipeToPrev) {\n                const subProgress = (1 - Math.abs((Math.abs(progress) - 0.5) / 0.5)) ** 0.5;\n                rotate += -28 * progress * subProgress;\n                scale += -0.5 * subProgress;\n                tXAdd += 96 * subProgress;\n                tY = \"\".concat(-25 * subProgress * Math.abs(progress), \"%\");\n            }\n            if (progress < 0) {\n                // next\n                tX = \"calc(\".concat(tX, \"px \").concat(rtl ? \"-\" : \"+\", \" (\").concat(tXAdd * Math.abs(progress), \"%))\");\n            } else if (progress > 0) {\n                // prev\n                tX = \"calc(\".concat(tX, \"px \").concat(rtl ? \"-\" : \"+\", \" (-\").concat(tXAdd * Math.abs(progress), \"%))\");\n            } else {\n                tX = \"\".concat(tX, \"px\");\n            }\n            if (!swiper.isHorizontal()) {\n                const prevY = tY;\n                tY = tX;\n                tX = prevY;\n            }\n            const scaleString = progress < 0 ? \"\".concat(1 + (1 - scale) * progress) : \"\".concat(1 - (1 - scale) * progress);\n            /* eslint-disable */ const transform = \"\\n        translate3d(\".concat(tX, \", \").concat(tY, \", \").concat(tZ, \"px)\\n        rotateZ(\").concat(params.rotate ? rtl ? -rotate : rotate : 0, \"deg)\\n        scale(\").concat(scaleString, \")\\n      \");\n            /* eslint-enable */ if (params.slideShadows) {\n                // Set shadows\n                let shadowEl = slideEl.querySelector(\".swiper-slide-shadow\");\n                if (!shadowEl) {\n                    shadowEl = (0,_shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\"cards\", slideEl);\n                }\n                if (shadowEl) shadowEl.style.opacity = Math.min(Math.max((Math.abs(progress) - 0.5) / 0.5, 0), 1);\n            }\n            slideEl.style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\n            const targetEl = (0,_shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(params, slideEl);\n            targetEl.style.transform = transform;\n        }\n    };\n    const setTransition = (duration)=>{\n        const transformElements = swiper.slides.map((slideEl)=>(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.g)(slideEl));\n        transformElements.forEach((el)=>{\n            el.style.transitionDuration = \"\".concat(duration, \"ms\");\n            el.querySelectorAll(\".swiper-slide-shadow\").forEach((shadowEl)=>{\n                shadowEl.style.transitionDuration = \"\".concat(duration, \"ms\");\n            });\n        });\n        (0,_shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__.e)({\n            swiper,\n            duration,\n            transformElements\n        });\n    };\n    (0,_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__.e)({\n        effect: \"cards\",\n        swiper,\n        on,\n        setTranslate,\n        setTransition,\n        perspective: ()=>true,\n        overwriteParams: ()=>({\n                _loopSwapReset: false,\n                watchSlidesProgress: true,\n                loopAdditionalSlides: swiper.params.cardsEffect.rotate ? 3 : 2,\n                centeredSlides: true,\n                virtualTranslate: !swiper.params.cssMode\n            })\n    });\n}\n_c = EffectCards;\n\nvar _c;\n$RefreshReg$(_c, \"EffectCards\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/effect-cards.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/effect-coverflow.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/swiper/modules/effect-coverflow.mjs ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ EffectCoverflow; }\n/* harmony export */ });\n/* harmony import */ var _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/create-shadow.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/create-shadow.mjs\");\n/* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/effect-init.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/effect-init.mjs\");\n/* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/effect-target.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/effect-target.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n\n\n\n\nfunction EffectCoverflow(_ref) {\n    let { swiper, extendParams, on } = _ref;\n    extendParams({\n        coverflowEffect: {\n            rotate: 50,\n            stretch: 0,\n            depth: 100,\n            scale: 1,\n            modifier: 1,\n            slideShadows: true\n        }\n    });\n    const setTranslate = ()=>{\n        const { width: swiperWidth, height: swiperHeight, slides, slidesSizesGrid } = swiper;\n        const params = swiper.params.coverflowEffect;\n        const isHorizontal = swiper.isHorizontal();\n        const transform = swiper.translate;\n        const center = isHorizontal ? -transform + swiperWidth / 2 : -transform + swiperHeight / 2;\n        const rotate = isHorizontal ? params.rotate : -params.rotate;\n        const translate = params.depth;\n        const r = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.p)(swiper);\n        // Each slide offset from center\n        for(let i = 0, length = slides.length; i < length; i += 1){\n            const slideEl = slides[i];\n            const slideSize = slidesSizesGrid[i];\n            const slideOffset = slideEl.swiperSlideOffset;\n            const centerOffset = (center - slideOffset - slideSize / 2) / slideSize;\n            const offsetMultiplier = typeof params.modifier === \"function\" ? params.modifier(centerOffset) : centerOffset * params.modifier;\n            let rotateY = isHorizontal ? rotate * offsetMultiplier : 0;\n            let rotateX = isHorizontal ? 0 : rotate * offsetMultiplier;\n            // var rotateZ = 0\n            let translateZ = -translate * Math.abs(offsetMultiplier);\n            let stretch = params.stretch;\n            // Allow percentage to make a relative stretch for responsive sliders\n            if (typeof stretch === \"string\" && stretch.indexOf(\"%\") !== -1) {\n                stretch = parseFloat(params.stretch) / 100 * slideSize;\n            }\n            let translateY = isHorizontal ? 0 : stretch * offsetMultiplier;\n            let translateX = isHorizontal ? stretch * offsetMultiplier : 0;\n            let scale = 1 - (1 - params.scale) * Math.abs(offsetMultiplier);\n            // Fix for ultra small values\n            if (Math.abs(translateX) < 0.001) translateX = 0;\n            if (Math.abs(translateY) < 0.001) translateY = 0;\n            if (Math.abs(translateZ) < 0.001) translateZ = 0;\n            if (Math.abs(rotateY) < 0.001) rotateY = 0;\n            if (Math.abs(rotateX) < 0.001) rotateX = 0;\n            if (Math.abs(scale) < 0.001) scale = 0;\n            const slideTransform = \"translate3d(\".concat(translateX, \"px,\").concat(translateY, \"px,\").concat(translateZ, \"px)  rotateX(\").concat(r(rotateX), \"deg) rotateY(\").concat(r(rotateY), \"deg) scale(\").concat(scale, \")\");\n            const targetEl = (0,_shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(params, slideEl);\n            targetEl.style.transform = slideTransform;\n            slideEl.style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;\n            if (params.slideShadows) {\n                // Set shadows\n                let shadowBeforeEl = isHorizontal ? slideEl.querySelector(\".swiper-slide-shadow-left\") : slideEl.querySelector(\".swiper-slide-shadow-top\");\n                let shadowAfterEl = isHorizontal ? slideEl.querySelector(\".swiper-slide-shadow-right\") : slideEl.querySelector(\".swiper-slide-shadow-bottom\");\n                if (!shadowBeforeEl) {\n                    shadowBeforeEl = (0,_shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\"coverflow\", slideEl, isHorizontal ? \"left\" : \"top\");\n                }\n                if (!shadowAfterEl) {\n                    shadowAfterEl = (0,_shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\"coverflow\", slideEl, isHorizontal ? \"right\" : \"bottom\");\n                }\n                if (shadowBeforeEl) shadowBeforeEl.style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;\n                if (shadowAfterEl) shadowAfterEl.style.opacity = -offsetMultiplier > 0 ? -offsetMultiplier : 0;\n            }\n        }\n    };\n    const setTransition = (duration)=>{\n        const transformElements = swiper.slides.map((slideEl)=>(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.g)(slideEl));\n        transformElements.forEach((el)=>{\n            el.style.transitionDuration = \"\".concat(duration, \"ms\");\n            el.querySelectorAll(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").forEach((shadowEl)=>{\n                shadowEl.style.transitionDuration = \"\".concat(duration, \"ms\");\n            });\n        });\n    };\n    (0,_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__.e)({\n        effect: \"coverflow\",\n        swiper,\n        on,\n        setTranslate,\n        setTransition,\n        perspective: ()=>true,\n        overwriteParams: ()=>({\n                watchSlidesProgress: true\n            })\n    });\n}\n_c = EffectCoverflow;\n\nvar _c;\n$RefreshReg$(_c, \"EffectCoverflow\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/effect-coverflow.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/effect-creative.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/swiper/modules/effect-creative.mjs ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ EffectCreative; }\n/* harmony export */ });\n/* harmony import */ var _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/create-shadow.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/create-shadow.mjs\");\n/* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/effect-init.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/effect-init.mjs\");\n/* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/effect-target.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/effect-target.mjs\");\n/* harmony import */ var _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/effect-virtual-transition-end.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/effect-virtual-transition-end.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n\n\n\n\n\nfunction EffectCreative(_ref) {\n    let { swiper, extendParams, on } = _ref;\n    extendParams({\n        creativeEffect: {\n            limitProgress: 1,\n            shadowPerProgress: false,\n            progressMultiplier: 1,\n            perspective: true,\n            prev: {\n                translate: [\n                    0,\n                    0,\n                    0\n                ],\n                rotate: [\n                    0,\n                    0,\n                    0\n                ],\n                opacity: 1,\n                scale: 1\n            },\n            next: {\n                translate: [\n                    0,\n                    0,\n                    0\n                ],\n                rotate: [\n                    0,\n                    0,\n                    0\n                ],\n                opacity: 1,\n                scale: 1\n            }\n        }\n    });\n    const getTranslateValue = (value)=>{\n        if (typeof value === \"string\") return value;\n        return \"\".concat(value, \"px\");\n    };\n    const setTranslate = ()=>{\n        const { slides, wrapperEl, slidesSizesGrid } = swiper;\n        const params = swiper.params.creativeEffect;\n        const { progressMultiplier: multiplier } = params;\n        const isCenteredSlides = swiper.params.centeredSlides;\n        const rotateFix = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.p)(swiper);\n        if (isCenteredSlides) {\n            const margin = slidesSizesGrid[0] / 2 - swiper.params.slidesOffsetBefore || 0;\n            wrapperEl.style.transform = \"translateX(calc(50% - \".concat(margin, \"px))\");\n        }\n        for(let i = 0; i < slides.length; i += 1){\n            const slideEl = slides[i];\n            const slideProgress = slideEl.progress;\n            const progress = Math.min(Math.max(slideEl.progress, -params.limitProgress), params.limitProgress);\n            let originalProgress = progress;\n            if (!isCenteredSlides) {\n                originalProgress = Math.min(Math.max(slideEl.originalProgress, -params.limitProgress), params.limitProgress);\n            }\n            const offset = slideEl.swiperSlideOffset;\n            const t = [\n                swiper.params.cssMode ? -offset - swiper.translate : -offset,\n                0,\n                0\n            ];\n            const r = [\n                0,\n                0,\n                0\n            ];\n            let custom = false;\n            if (!swiper.isHorizontal()) {\n                t[1] = t[0];\n                t[0] = 0;\n            }\n            let data = {\n                translate: [\n                    0,\n                    0,\n                    0\n                ],\n                rotate: [\n                    0,\n                    0,\n                    0\n                ],\n                scale: 1,\n                opacity: 1\n            };\n            if (progress < 0) {\n                data = params.next;\n                custom = true;\n            } else if (progress > 0) {\n                data = params.prev;\n                custom = true;\n            }\n            // set translate\n            t.forEach((value, index)=>{\n                t[index] = \"calc(\".concat(value, \"px + (\").concat(getTranslateValue(data.translate[index]), \" * \").concat(Math.abs(progress * multiplier), \"))\");\n            });\n            // set rotates\n            r.forEach((value, index)=>{\n                let val = data.rotate[index] * Math.abs(progress * multiplier);\n                r[index] = val;\n            });\n            slideEl.style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\n            const translateString = t.join(\", \");\n            const rotateString = \"rotateX(\".concat(rotateFix(r[0]), \"deg) rotateY(\").concat(rotateFix(r[1]), \"deg) rotateZ(\").concat(rotateFix(r[2]), \"deg)\");\n            const scaleString = originalProgress < 0 ? \"scale(\".concat(1 + (1 - data.scale) * originalProgress * multiplier, \")\") : \"scale(\".concat(1 - (1 - data.scale) * originalProgress * multiplier, \")\");\n            const opacityString = originalProgress < 0 ? 1 + (1 - data.opacity) * originalProgress * multiplier : 1 - (1 - data.opacity) * originalProgress * multiplier;\n            const transform = \"translate3d(\".concat(translateString, \") \").concat(rotateString, \" \").concat(scaleString);\n            // Set shadows\n            if (custom && data.shadow || !custom) {\n                let shadowEl = slideEl.querySelector(\".swiper-slide-shadow\");\n                if (!shadowEl && data.shadow) {\n                    shadowEl = (0,_shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\"creative\", slideEl);\n                }\n                if (shadowEl) {\n                    const shadowOpacity = params.shadowPerProgress ? progress * (1 / params.limitProgress) : progress;\n                    shadowEl.style.opacity = Math.min(Math.max(Math.abs(shadowOpacity), 0), 1);\n                }\n            }\n            const targetEl = (0,_shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(params, slideEl);\n            targetEl.style.transform = transform;\n            targetEl.style.opacity = opacityString;\n            if (data.origin) {\n                targetEl.style.transformOrigin = data.origin;\n            }\n        }\n    };\n    const setTransition = (duration)=>{\n        const transformElements = swiper.slides.map((slideEl)=>(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.g)(slideEl));\n        transformElements.forEach((el)=>{\n            el.style.transitionDuration = \"\".concat(duration, \"ms\");\n            el.querySelectorAll(\".swiper-slide-shadow\").forEach((shadowEl)=>{\n                shadowEl.style.transitionDuration = \"\".concat(duration, \"ms\");\n            });\n        });\n        (0,_shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__.e)({\n            swiper,\n            duration,\n            transformElements,\n            allSlides: true\n        });\n    };\n    (0,_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__.e)({\n        effect: \"creative\",\n        swiper,\n        on,\n        setTranslate,\n        setTransition,\n        perspective: ()=>swiper.params.creativeEffect.perspective,\n        overwriteParams: ()=>({\n                watchSlidesProgress: true,\n                virtualTranslate: !swiper.params.cssMode\n            })\n    });\n}\n_c = EffectCreative;\n\nvar _c;\n$RefreshReg$(_c, \"EffectCreative\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/effect-creative.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/effect-cube.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/swiper/modules/effect-cube.mjs ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ EffectCube; }\n/* harmony export */ });\n/* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/effect-init.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/effect-init.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n\n\nfunction EffectCube(_ref) {\n    let { swiper, extendParams, on } = _ref;\n    extendParams({\n        cubeEffect: {\n            slideShadows: true,\n            shadow: true,\n            shadowOffset: 20,\n            shadowScale: 0.94\n        }\n    });\n    const createSlideShadows = (slideEl, progress, isHorizontal)=>{\n        let shadowBefore = isHorizontal ? slideEl.querySelector(\".swiper-slide-shadow-left\") : slideEl.querySelector(\".swiper-slide-shadow-top\");\n        let shadowAfter = isHorizontal ? slideEl.querySelector(\".swiper-slide-shadow-right\") : slideEl.querySelector(\".swiper-slide-shadow-bottom\");\n        if (!shadowBefore) {\n            shadowBefore = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"div\", \"swiper-slide-shadow-cube swiper-slide-shadow-\".concat(isHorizontal ? \"left\" : \"top\").split(\" \"));\n            slideEl.append(shadowBefore);\n        }\n        if (!shadowAfter) {\n            shadowAfter = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"div\", \"swiper-slide-shadow-cube swiper-slide-shadow-\".concat(isHorizontal ? \"right\" : \"bottom\").split(\" \"));\n            slideEl.append(shadowAfter);\n        }\n        if (shadowBefore) shadowBefore.style.opacity = Math.max(-progress, 0);\n        if (shadowAfter) shadowAfter.style.opacity = Math.max(progress, 0);\n    };\n    const recreateShadows = ()=>{\n        // create new ones\n        const isHorizontal = swiper.isHorizontal();\n        swiper.slides.forEach((slideEl)=>{\n            const progress = Math.max(Math.min(slideEl.progress, 1), -1);\n            createSlideShadows(slideEl, progress, isHorizontal);\n        });\n    };\n    const setTranslate = ()=>{\n        const { el, wrapperEl, slides, width: swiperWidth, height: swiperHeight, rtlTranslate: rtl, size: swiperSize, browser } = swiper;\n        const r = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.p)(swiper);\n        const params = swiper.params.cubeEffect;\n        const isHorizontal = swiper.isHorizontal();\n        const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n        let wrapperRotate = 0;\n        let cubeShadowEl;\n        if (params.shadow) {\n            if (isHorizontal) {\n                cubeShadowEl = swiper.wrapperEl.querySelector(\".swiper-cube-shadow\");\n                if (!cubeShadowEl) {\n                    cubeShadowEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"div\", \"swiper-cube-shadow\");\n                    swiper.wrapperEl.append(cubeShadowEl);\n                }\n                cubeShadowEl.style.height = \"\".concat(swiperWidth, \"px\");\n            } else {\n                cubeShadowEl = el.querySelector(\".swiper-cube-shadow\");\n                if (!cubeShadowEl) {\n                    cubeShadowEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"div\", \"swiper-cube-shadow\");\n                    el.append(cubeShadowEl);\n                }\n            }\n        }\n        for(let i = 0; i < slides.length; i += 1){\n            const slideEl = slides[i];\n            let slideIndex = i;\n            if (isVirtual) {\n                slideIndex = parseInt(slideEl.getAttribute(\"data-swiper-slide-index\"), 10);\n            }\n            let slideAngle = slideIndex * 90;\n            let round = Math.floor(slideAngle / 360);\n            if (rtl) {\n                slideAngle = -slideAngle;\n                round = Math.floor(-slideAngle / 360);\n            }\n            const progress = Math.max(Math.min(slideEl.progress, 1), -1);\n            let tx = 0;\n            let ty = 0;\n            let tz = 0;\n            if (slideIndex % 4 === 0) {\n                tx = -round * 4 * swiperSize;\n                tz = 0;\n            } else if ((slideIndex - 1) % 4 === 0) {\n                tx = 0;\n                tz = -round * 4 * swiperSize;\n            } else if ((slideIndex - 2) % 4 === 0) {\n                tx = swiperSize + round * 4 * swiperSize;\n                tz = swiperSize;\n            } else if ((slideIndex - 3) % 4 === 0) {\n                tx = -swiperSize;\n                tz = 3 * swiperSize + swiperSize * 4 * round;\n            }\n            if (rtl) {\n                tx = -tx;\n            }\n            if (!isHorizontal) {\n                ty = tx;\n                tx = 0;\n            }\n            const transform = \"rotateX(\".concat(r(isHorizontal ? 0 : -slideAngle), \"deg) rotateY(\").concat(r(isHorizontal ? slideAngle : 0), \"deg) translate3d(\").concat(tx, \"px, \").concat(ty, \"px, \").concat(tz, \"px)\");\n            if (progress <= 1 && progress > -1) {\n                wrapperRotate = slideIndex * 90 + progress * 90;\n                if (rtl) wrapperRotate = -slideIndex * 90 - progress * 90;\n            }\n            slideEl.style.transform = transform;\n            if (params.slideShadows) {\n                createSlideShadows(slideEl, progress, isHorizontal);\n            }\n        }\n        wrapperEl.style.transformOrigin = \"50% 50% -\".concat(swiperSize / 2, \"px\");\n        wrapperEl.style[\"-webkit-transform-origin\"] = \"50% 50% -\".concat(swiperSize / 2, \"px\");\n        if (params.shadow) {\n            if (isHorizontal) {\n                cubeShadowEl.style.transform = \"translate3d(0px, \".concat(swiperWidth / 2 + params.shadowOffset, \"px, \").concat(-swiperWidth / 2, \"px) rotateX(89.99deg) rotateZ(0deg) scale(\").concat(params.shadowScale, \")\");\n            } else {\n                const shadowAngle = Math.abs(wrapperRotate) - Math.floor(Math.abs(wrapperRotate) / 90) * 90;\n                const multiplier = 1.5 - (Math.sin(shadowAngle * 2 * Math.PI / 360) / 2 + Math.cos(shadowAngle * 2 * Math.PI / 360) / 2);\n                const scale1 = params.shadowScale;\n                const scale2 = params.shadowScale / multiplier;\n                const offset = params.shadowOffset;\n                cubeShadowEl.style.transform = \"scale3d(\".concat(scale1, \", 1, \").concat(scale2, \") translate3d(0px, \").concat(swiperHeight / 2 + offset, \"px, \").concat(-swiperHeight / 2 / scale2, \"px) rotateX(-89.99deg)\");\n            }\n        }\n        const zFactor = (browser.isSafari || browser.isWebView) && browser.needPerspectiveFix ? -swiperSize / 2 : 0;\n        wrapperEl.style.transform = \"translate3d(0px,0,\".concat(zFactor, \"px) rotateX(\").concat(r(swiper.isHorizontal() ? 0 : wrapperRotate), \"deg) rotateY(\").concat(r(swiper.isHorizontal() ? -wrapperRotate : 0), \"deg)\");\n        wrapperEl.style.setProperty(\"--swiper-cube-translate-z\", \"\".concat(zFactor, \"px\"));\n    };\n    const setTransition = (duration)=>{\n        const { el, slides } = swiper;\n        slides.forEach((slideEl)=>{\n            slideEl.style.transitionDuration = \"\".concat(duration, \"ms\");\n            slideEl.querySelectorAll(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").forEach((subEl)=>{\n                subEl.style.transitionDuration = \"\".concat(duration, \"ms\");\n            });\n        });\n        if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {\n            const shadowEl = el.querySelector(\".swiper-cube-shadow\");\n            if (shadowEl) shadowEl.style.transitionDuration = \"\".concat(duration, \"ms\");\n        }\n    };\n    (0,_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_0__.e)({\n        effect: \"cube\",\n        swiper,\n        on,\n        setTranslate,\n        setTransition,\n        recreateShadows,\n        getEffectParams: ()=>swiper.params.cubeEffect,\n        perspective: ()=>true,\n        overwriteParams: ()=>({\n                slidesPerView: 1,\n                slidesPerGroup: 1,\n                watchSlidesProgress: true,\n                resistanceRatio: 0,\n                spaceBetween: 0,\n                centeredSlides: false,\n                virtualTranslate: true\n            })\n    });\n}\n_c = EffectCube;\n\nvar _c;\n$RefreshReg$(_c, \"EffectCube\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/effect-cube.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/effect-fade.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/swiper/modules/effect-fade.mjs ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ EffectFade; }\n/* harmony export */ });\n/* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/effect-init.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/effect-init.mjs\");\n/* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/effect-target.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/effect-target.mjs\");\n/* harmony import */ var _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/effect-virtual-transition-end.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/effect-virtual-transition-end.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n\n\n\n\nfunction EffectFade(_ref) {\n    let { swiper, extendParams, on } = _ref;\n    extendParams({\n        fadeEffect: {\n            crossFade: false\n        }\n    });\n    const setTranslate = ()=>{\n        const { slides } = swiper;\n        const params = swiper.params.fadeEffect;\n        for(let i = 0; i < slides.length; i += 1){\n            const slideEl = swiper.slides[i];\n            const offset = slideEl.swiperSlideOffset;\n            let tx = -offset;\n            if (!swiper.params.virtualTranslate) tx -= swiper.translate;\n            let ty = 0;\n            if (!swiper.isHorizontal()) {\n                ty = tx;\n                tx = 0;\n            }\n            const slideOpacity = swiper.params.fadeEffect.crossFade ? Math.max(1 - Math.abs(slideEl.progress), 0) : 1 + Math.min(Math.max(slideEl.progress, -1), 0);\n            const targetEl = (0,_shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(params, slideEl);\n            targetEl.style.opacity = slideOpacity;\n            targetEl.style.transform = \"translate3d(\".concat(tx, \"px, \").concat(ty, \"px, 0px)\");\n        }\n    };\n    const setTransition = (duration)=>{\n        const transformElements = swiper.slides.map((slideEl)=>(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.g)(slideEl));\n        transformElements.forEach((el)=>{\n            el.style.transitionDuration = \"\".concat(duration, \"ms\");\n        });\n        (0,_shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_2__.e)({\n            swiper,\n            duration,\n            transformElements,\n            allSlides: true\n        });\n    };\n    (0,_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_0__.e)({\n        effect: \"fade\",\n        swiper,\n        on,\n        setTranslate,\n        setTransition,\n        overwriteParams: ()=>({\n                slidesPerView: 1,\n                slidesPerGroup: 1,\n                watchSlidesProgress: true,\n                spaceBetween: 0,\n                virtualTranslate: !swiper.params.cssMode\n            })\n    });\n}\n_c = EffectFade;\n\nvar _c;\n$RefreshReg$(_c, \"EffectFade\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9lZmZlY3QtZmFkZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNEQ7QUFDSTtBQUM4QjtBQUMvQjtBQUUvRCxTQUFTTSxXQUFXQyxJQUFJO0lBQ3RCLElBQUksRUFDRkMsTUFBTSxFQUNOQyxZQUFZLEVBQ1pDLEVBQUUsRUFDSCxHQUFHSDtJQUNKRSxhQUFhO1FBQ1hFLFlBQVk7WUFDVkMsV0FBVztRQUNiO0lBQ0Y7SUFDQSxNQUFNQyxlQUFlO1FBQ25CLE1BQU0sRUFDSkMsTUFBTSxFQUNQLEdBQUdOO1FBQ0osTUFBTU8sU0FBU1AsT0FBT08sTUFBTSxDQUFDSixVQUFVO1FBQ3ZDLElBQUssSUFBSUssSUFBSSxHQUFHQSxJQUFJRixPQUFPRyxNQUFNLEVBQUVELEtBQUssRUFBRztZQUN6QyxNQUFNRSxVQUFVVixPQUFPTSxNQUFNLENBQUNFLEVBQUU7WUFDaEMsTUFBTUcsU0FBU0QsUUFBUUUsaUJBQWlCO1lBQ3hDLElBQUlDLEtBQUssQ0FBQ0Y7WUFDVixJQUFJLENBQUNYLE9BQU9PLE1BQU0sQ0FBQ08sZ0JBQWdCLEVBQUVELE1BQU1iLE9BQU9lLFNBQVM7WUFDM0QsSUFBSUMsS0FBSztZQUNULElBQUksQ0FBQ2hCLE9BQU9pQixZQUFZLElBQUk7Z0JBQzFCRCxLQUFLSDtnQkFDTEEsS0FBSztZQUNQO1lBQ0EsTUFBTUssZUFBZWxCLE9BQU9PLE1BQU0sQ0FBQ0osVUFBVSxDQUFDQyxTQUFTLEdBQUdlLEtBQUtDLEdBQUcsQ0FBQyxJQUFJRCxLQUFLRSxHQUFHLENBQUNYLFFBQVFZLFFBQVEsR0FBRyxLQUFLLElBQUlILEtBQUtJLEdBQUcsQ0FBQ0osS0FBS0MsR0FBRyxDQUFDVixRQUFRWSxRQUFRLEVBQUUsQ0FBQyxJQUFJO1lBQ3JKLE1BQU1FLFdBQVc5Qiw0REFBWUEsQ0FBQ2EsUUFBUUc7WUFDdENjLFNBQVNDLEtBQUssQ0FBQ0MsT0FBTyxHQUFHUjtZQUN6Qk0sU0FBU0MsS0FBSyxDQUFDRSxTQUFTLEdBQUcsZUFBd0JYLE9BQVRILElBQUcsUUFBUyxPQUFIRyxJQUFHO1FBQ3hEO0lBQ0Y7SUFDQSxNQUFNWSxnQkFBZ0JDLENBQUFBO1FBQ3BCLE1BQU1DLG9CQUFvQjlCLE9BQU9NLE1BQU0sQ0FBQ3lCLEdBQUcsQ0FBQ3JCLENBQUFBLFVBQVdiLG9EQUFtQkEsQ0FBQ2E7UUFDM0VvQixrQkFBa0JFLE9BQU8sQ0FBQ0MsQ0FBQUE7WUFDeEJBLEdBQUdSLEtBQUssQ0FBQ1Msa0JBQWtCLEdBQUcsR0FBWSxPQUFUTCxVQUFTO1FBQzVDO1FBQ0FsQyw0RUFBMEJBLENBQUM7WUFDekJLO1lBQ0E2QjtZQUNBQztZQUNBSyxXQUFXO1FBQ2I7SUFDRjtJQUNBMUMsMERBQVVBLENBQUM7UUFDVDJDLFFBQVE7UUFDUnBDO1FBQ0FFO1FBQ0FHO1FBQ0F1QjtRQUNBUyxpQkFBaUIsSUFBTztnQkFDdEJDLGVBQWU7Z0JBQ2ZDLGdCQUFnQjtnQkFDaEJDLHFCQUFxQjtnQkFDckJDLGNBQWM7Z0JBQ2QzQixrQkFBa0IsQ0FBQ2QsT0FBT08sTUFBTSxDQUFDbUMsT0FBTztZQUMxQztJQUNGO0FBQ0Y7S0ExRFM1QztBQTREd0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2VmZmVjdC1mYWRlLm1qcz9iZGNiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGUgYXMgZWZmZWN0SW5pdCB9IGZyb20gJy4uL3NoYXJlZC9lZmZlY3QtaW5pdC5tanMnO1xuaW1wb3J0IHsgZSBhcyBlZmZlY3RUYXJnZXQgfSBmcm9tICcuLi9zaGFyZWQvZWZmZWN0LXRhcmdldC5tanMnO1xuaW1wb3J0IHsgZSBhcyBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCB9IGZyb20gJy4uL3NoYXJlZC9lZmZlY3QtdmlydHVhbC10cmFuc2l0aW9uLWVuZC5tanMnO1xuaW1wb3J0IHsgZyBhcyBnZXRTbGlkZVRyYW5zZm9ybUVsIH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzLm1qcyc7XG5cbmZ1bmN0aW9uIEVmZmVjdEZhZGUoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBleHRlbmRQYXJhbXMsXG4gICAgb25cbiAgfSA9IF9yZWY7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgZmFkZUVmZmVjdDoge1xuICAgICAgY3Jvc3NGYWRlOiBmYWxzZVxuICAgIH1cbiAgfSk7XG4gIGNvbnN0IHNldFRyYW5zbGF0ZSA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBzbGlkZXNcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuZmFkZUVmZmVjdDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3Qgc2xpZGVFbCA9IHN3aXBlci5zbGlkZXNbaV07XG4gICAgICBjb25zdCBvZmZzZXQgPSBzbGlkZUVsLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgbGV0IHR4ID0gLW9mZnNldDtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB0eCAtPSBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgbGV0IHR5ID0gMDtcbiAgICAgIGlmICghc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIHR5ID0gdHg7XG4gICAgICAgIHR4ID0gMDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNsaWRlT3BhY2l0eSA9IHN3aXBlci5wYXJhbXMuZmFkZUVmZmVjdC5jcm9zc0ZhZGUgPyBNYXRoLm1heCgxIC0gTWF0aC5hYnMoc2xpZGVFbC5wcm9ncmVzcyksIDApIDogMSArIE1hdGgubWluKE1hdGgubWF4KHNsaWRlRWwucHJvZ3Jlc3MsIC0xKSwgMCk7XG4gICAgICBjb25zdCB0YXJnZXRFbCA9IGVmZmVjdFRhcmdldChwYXJhbXMsIHNsaWRlRWwpO1xuICAgICAgdGFyZ2V0RWwuc3R5bGUub3BhY2l0eSA9IHNsaWRlT3BhY2l0eTtcbiAgICAgIHRhcmdldEVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3R4fXB4LCAke3R5fXB4LCAwcHgpYDtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHNldFRyYW5zaXRpb24gPSBkdXJhdGlvbiA9PiB7XG4gICAgY29uc3QgdHJhbnNmb3JtRWxlbWVudHMgPSBzd2lwZXIuc2xpZGVzLm1hcChzbGlkZUVsID0+IGdldFNsaWRlVHJhbnNmb3JtRWwoc2xpZGVFbCkpO1xuICAgIHRyYW5zZm9ybUVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgIH0pO1xuICAgIGVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kKHtcbiAgICAgIHN3aXBlcixcbiAgICAgIGR1cmF0aW9uLFxuICAgICAgdHJhbnNmb3JtRWxlbWVudHMsXG4gICAgICBhbGxTbGlkZXM6IHRydWVcbiAgICB9KTtcbiAgfTtcbiAgZWZmZWN0SW5pdCh7XG4gICAgZWZmZWN0OiAnZmFkZScsXG4gICAgc3dpcGVyLFxuICAgIG9uLFxuICAgIHNldFRyYW5zbGF0ZSxcbiAgICBzZXRUcmFuc2l0aW9uLFxuICAgIG92ZXJ3cml0ZVBhcmFtczogKCkgPT4gKHtcbiAgICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgICBzbGlkZXNQZXJHcm91cDogMSxcbiAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICBzcGFjZUJldHdlZW46IDAsXG4gICAgICB2aXJ0dWFsVHJhbnNsYXRlOiAhc3dpcGVyLnBhcmFtcy5jc3NNb2RlXG4gICAgfSlcbiAgfSk7XG59XG5cbmV4cG9ydCB7IEVmZmVjdEZhZGUgYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbImUiLCJlZmZlY3RJbml0IiwiZWZmZWN0VGFyZ2V0IiwiZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQiLCJnIiwiZ2V0U2xpZGVUcmFuc2Zvcm1FbCIsIkVmZmVjdEZhZGUiLCJfcmVmIiwic3dpcGVyIiwiZXh0ZW5kUGFyYW1zIiwib24iLCJmYWRlRWZmZWN0IiwiY3Jvc3NGYWRlIiwic2V0VHJhbnNsYXRlIiwic2xpZGVzIiwicGFyYW1zIiwiaSIsImxlbmd0aCIsInNsaWRlRWwiLCJvZmZzZXQiLCJzd2lwZXJTbGlkZU9mZnNldCIsInR4IiwidmlydHVhbFRyYW5zbGF0ZSIsInRyYW5zbGF0ZSIsInR5IiwiaXNIb3Jpem9udGFsIiwic2xpZGVPcGFjaXR5IiwiTWF0aCIsIm1heCIsImFicyIsInByb2dyZXNzIiwibWluIiwidGFyZ2V0RWwiLCJzdHlsZSIsIm9wYWNpdHkiLCJ0cmFuc2Zvcm0iLCJzZXRUcmFuc2l0aW9uIiwiZHVyYXRpb24iLCJ0cmFuc2Zvcm1FbGVtZW50cyIsIm1hcCIsImZvckVhY2giLCJlbCIsInRyYW5zaXRpb25EdXJhdGlvbiIsImFsbFNsaWRlcyIsImVmZmVjdCIsIm92ZXJ3cml0ZVBhcmFtcyIsInNsaWRlc1BlclZpZXciLCJzbGlkZXNQZXJHcm91cCIsIndhdGNoU2xpZGVzUHJvZ3Jlc3MiLCJzcGFjZUJldHdlZW4iLCJjc3NNb2RlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/effect-fade.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/effect-flip.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/swiper/modules/effect-flip.mjs ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ EffectFlip; }\n/* harmony export */ });\n/* harmony import */ var _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/create-shadow.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/create-shadow.mjs\");\n/* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/effect-init.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/effect-init.mjs\");\n/* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/effect-target.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/effect-target.mjs\");\n/* harmony import */ var _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/effect-virtual-transition-end.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/effect-virtual-transition-end.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n\n\n\n\n\nfunction EffectFlip(_ref) {\n    let { swiper, extendParams, on } = _ref;\n    extendParams({\n        flipEffect: {\n            slideShadows: true,\n            limitRotation: true\n        }\n    });\n    const createSlideShadows = (slideEl, progress)=>{\n        let shadowBefore = swiper.isHorizontal() ? slideEl.querySelector(\".swiper-slide-shadow-left\") : slideEl.querySelector(\".swiper-slide-shadow-top\");\n        let shadowAfter = swiper.isHorizontal() ? slideEl.querySelector(\".swiper-slide-shadow-right\") : slideEl.querySelector(\".swiper-slide-shadow-bottom\");\n        if (!shadowBefore) {\n            shadowBefore = (0,_shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\"flip\", slideEl, swiper.isHorizontal() ? \"left\" : \"top\");\n        }\n        if (!shadowAfter) {\n            shadowAfter = (0,_shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\"flip\", slideEl, swiper.isHorizontal() ? \"right\" : \"bottom\");\n        }\n        if (shadowBefore) shadowBefore.style.opacity = Math.max(-progress, 0);\n        if (shadowAfter) shadowAfter.style.opacity = Math.max(progress, 0);\n    };\n    const recreateShadows = ()=>{\n        // Set shadows\n        swiper.params.flipEffect;\n        swiper.slides.forEach((slideEl)=>{\n            let progress = slideEl.progress;\n            if (swiper.params.flipEffect.limitRotation) {\n                progress = Math.max(Math.min(slideEl.progress, 1), -1);\n            }\n            createSlideShadows(slideEl, progress);\n        });\n    };\n    const setTranslate = ()=>{\n        const { slides, rtlTranslate: rtl } = swiper;\n        const params = swiper.params.flipEffect;\n        const rotateFix = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.p)(swiper);\n        for(let i = 0; i < slides.length; i += 1){\n            const slideEl = slides[i];\n            let progress = slideEl.progress;\n            if (swiper.params.flipEffect.limitRotation) {\n                progress = Math.max(Math.min(slideEl.progress, 1), -1);\n            }\n            const offset = slideEl.swiperSlideOffset;\n            const rotate = -180 * progress;\n            let rotateY = rotate;\n            let rotateX = 0;\n            let tx = swiper.params.cssMode ? -offset - swiper.translate : -offset;\n            let ty = 0;\n            if (!swiper.isHorizontal()) {\n                ty = tx;\n                tx = 0;\n                rotateX = -rotateY;\n                rotateY = 0;\n            } else if (rtl) {\n                rotateY = -rotateY;\n            }\n            slideEl.style.zIndex = -Math.abs(Math.round(progress)) + slides.length;\n            if (params.slideShadows) {\n                createSlideShadows(slideEl, progress);\n            }\n            const transform = \"translate3d(\".concat(tx, \"px, \").concat(ty, \"px, 0px) rotateX(\").concat(rotateFix(rotateX), \"deg) rotateY(\").concat(rotateFix(rotateY), \"deg)\");\n            const targetEl = (0,_shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(params, slideEl);\n            targetEl.style.transform = transform;\n        }\n    };\n    const setTransition = (duration)=>{\n        const transformElements = swiper.slides.map((slideEl)=>(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.g)(slideEl));\n        transformElements.forEach((el)=>{\n            el.style.transitionDuration = \"\".concat(duration, \"ms\");\n            el.querySelectorAll(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").forEach((shadowEl)=>{\n                shadowEl.style.transitionDuration = \"\".concat(duration, \"ms\");\n            });\n        });\n        (0,_shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__.e)({\n            swiper,\n            duration,\n            transformElements\n        });\n    };\n    (0,_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__.e)({\n        effect: \"flip\",\n        swiper,\n        on,\n        setTranslate,\n        setTransition,\n        recreateShadows,\n        getEffectParams: ()=>swiper.params.flipEffect,\n        perspective: ()=>true,\n        overwriteParams: ()=>({\n                slidesPerView: 1,\n                slidesPerGroup: 1,\n                watchSlidesProgress: true,\n                spaceBetween: 0,\n                virtualTranslate: !swiper.params.cssMode\n            })\n    });\n}\n_c = EffectFlip;\n\nvar _c;\n$RefreshReg$(_c, \"EffectFlip\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/effect-flip.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/free-mode.mjs":
/*!***************************************************!*\
  !*** ./node_modules/swiper/modules/free-mode.mjs ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ freeMode; }\n/* harmony export */ });\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n\nfunction freeMode(_ref) {\n    let { swiper, extendParams, emit, once } = _ref;\n    extendParams({\n        freeMode: {\n            enabled: false,\n            momentum: true,\n            momentumRatio: 1,\n            momentumBounce: true,\n            momentumBounceRatio: 1,\n            momentumVelocityRatio: 1,\n            sticky: false,\n            minimumVelocity: 0.02\n        }\n    });\n    function onTouchStart() {\n        if (swiper.params.cssMode) return;\n        const translate = swiper.getTranslate();\n        swiper.setTranslate(translate);\n        swiper.setTransition(0);\n        swiper.touchEventsData.velocities.length = 0;\n        swiper.freeMode.onTouchEnd({\n            currentPos: swiper.rtl ? swiper.translate : -swiper.translate\n        });\n    }\n    function onTouchMove() {\n        if (swiper.params.cssMode) return;\n        const { touchEventsData: data, touches } = swiper;\n        // Velocity\n        if (data.velocities.length === 0) {\n            data.velocities.push({\n                position: touches[swiper.isHorizontal() ? \"startX\" : \"startY\"],\n                time: data.touchStartTime\n            });\n        }\n        data.velocities.push({\n            position: touches[swiper.isHorizontal() ? \"currentX\" : \"currentY\"],\n            time: (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.f)()\n        });\n    }\n    function onTouchEnd(_ref2) {\n        let { currentPos } = _ref2;\n        if (swiper.params.cssMode) return;\n        const { params, wrapperEl, rtlTranslate: rtl, snapGrid, touchEventsData: data } = swiper;\n        // Time diff\n        const touchEndTime = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.f)();\n        const timeDiff = touchEndTime - data.touchStartTime;\n        if (currentPos < -swiper.minTranslate()) {\n            swiper.slideTo(swiper.activeIndex);\n            return;\n        }\n        if (currentPos > -swiper.maxTranslate()) {\n            if (swiper.slides.length < snapGrid.length) {\n                swiper.slideTo(snapGrid.length - 1);\n            } else {\n                swiper.slideTo(swiper.slides.length - 1);\n            }\n            return;\n        }\n        if (params.freeMode.momentum) {\n            if (data.velocities.length > 1) {\n                const lastMoveEvent = data.velocities.pop();\n                const velocityEvent = data.velocities.pop();\n                const distance = lastMoveEvent.position - velocityEvent.position;\n                const time = lastMoveEvent.time - velocityEvent.time;\n                swiper.velocity = distance / time;\n                swiper.velocity /= 2;\n                if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {\n                    swiper.velocity = 0;\n                }\n                // this implies that the user stopped moving a finger then released.\n                // There would be no events with distance zero, so the last event is stale.\n                if (time > 150 || (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.f)() - lastMoveEvent.time > 300) {\n                    swiper.velocity = 0;\n                }\n            } else {\n                swiper.velocity = 0;\n            }\n            swiper.velocity *= params.freeMode.momentumVelocityRatio;\n            data.velocities.length = 0;\n            let momentumDuration = 1000 * params.freeMode.momentumRatio;\n            const momentumDistance = swiper.velocity * momentumDuration;\n            let newPosition = swiper.translate + momentumDistance;\n            if (rtl) newPosition = -newPosition;\n            let doBounce = false;\n            let afterBouncePosition;\n            const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;\n            let needsLoopFix;\n            if (newPosition < swiper.maxTranslate()) {\n                if (params.freeMode.momentumBounce) {\n                    if (newPosition + swiper.maxTranslate() < -bounceAmount) {\n                        newPosition = swiper.maxTranslate() - bounceAmount;\n                    }\n                    afterBouncePosition = swiper.maxTranslate();\n                    doBounce = true;\n                    data.allowMomentumBounce = true;\n                } else {\n                    newPosition = swiper.maxTranslate();\n                }\n                if (params.loop && params.centeredSlides) needsLoopFix = true;\n            } else if (newPosition > swiper.minTranslate()) {\n                if (params.freeMode.momentumBounce) {\n                    if (newPosition - swiper.minTranslate() > bounceAmount) {\n                        newPosition = swiper.minTranslate() + bounceAmount;\n                    }\n                    afterBouncePosition = swiper.minTranslate();\n                    doBounce = true;\n                    data.allowMomentumBounce = true;\n                } else {\n                    newPosition = swiper.minTranslate();\n                }\n                if (params.loop && params.centeredSlides) needsLoopFix = true;\n            } else if (params.freeMode.sticky) {\n                let nextSlide;\n                for(let j = 0; j < snapGrid.length; j += 1){\n                    if (snapGrid[j] > -newPosition) {\n                        nextSlide = j;\n                        break;\n                    }\n                }\n                if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === \"next\") {\n                    newPosition = snapGrid[nextSlide];\n                } else {\n                    newPosition = snapGrid[nextSlide - 1];\n                }\n                newPosition = -newPosition;\n            }\n            if (needsLoopFix) {\n                once(\"transitionEnd\", ()=>{\n                    swiper.loopFix();\n                });\n            }\n            // Fix duration\n            if (swiper.velocity !== 0) {\n                if (rtl) {\n                    momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\n                } else {\n                    momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\n                }\n                if (params.freeMode.sticky) {\n                    // If freeMode.sticky is active and the user ends a swipe with a slow-velocity\n                    // event, then durations can be 20+ seconds to slide one (or zero!) slides.\n                    // It's easy to see this when simulating touch with mouse events. To fix this,\n                    // limit single-slide swipes to the default slide duration. This also has the\n                    // nice side effect of matching slide speed if the user stopped moving before\n                    // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.\n                    // For faster swipes, also apply limits (albeit higher ones).\n                    const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\n                    const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\n                    if (moveDistance < currentSlideSize) {\n                        momentumDuration = params.speed;\n                    } else if (moveDistance < 2 * currentSlideSize) {\n                        momentumDuration = params.speed * 1.5;\n                    } else {\n                        momentumDuration = params.speed * 2.5;\n                    }\n                }\n            } else if (params.freeMode.sticky) {\n                swiper.slideToClosest();\n                return;\n            }\n            if (params.freeMode.momentumBounce && doBounce) {\n                swiper.updateProgress(afterBouncePosition);\n                swiper.setTransition(momentumDuration);\n                swiper.setTranslate(newPosition);\n                swiper.transitionStart(true, swiper.swipeDirection);\n                swiper.animating = true;\n                (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.l)(wrapperEl, ()=>{\n                    if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;\n                    emit(\"momentumBounce\");\n                    swiper.setTransition(params.speed);\n                    setTimeout(()=>{\n                        swiper.setTranslate(afterBouncePosition);\n                        (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.l)(wrapperEl, ()=>{\n                            if (!swiper || swiper.destroyed) return;\n                            swiper.transitionEnd();\n                        });\n                    }, 0);\n                });\n            } else if (swiper.velocity) {\n                emit(\"_freeModeNoMomentumRelease\");\n                swiper.updateProgress(newPosition);\n                swiper.setTransition(momentumDuration);\n                swiper.setTranslate(newPosition);\n                swiper.transitionStart(true, swiper.swipeDirection);\n                if (!swiper.animating) {\n                    swiper.animating = true;\n                    (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.l)(wrapperEl, ()=>{\n                        if (!swiper || swiper.destroyed) return;\n                        swiper.transitionEnd();\n                    });\n                }\n            } else {\n                swiper.updateProgress(newPosition);\n            }\n            swiper.updateActiveIndex();\n            swiper.updateSlidesClasses();\n        } else if (params.freeMode.sticky) {\n            swiper.slideToClosest();\n            return;\n        } else if (params.freeMode) {\n            emit(\"_freeModeNoMomentumRelease\");\n        }\n        if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {\n            emit(\"_freeModeStaticRelease\");\n            swiper.updateProgress();\n            swiper.updateActiveIndex();\n            swiper.updateSlidesClasses();\n        }\n    }\n    Object.assign(swiper, {\n        freeMode: {\n            onTouchStart,\n            onTouchMove,\n            onTouchEnd\n        }\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/free-mode.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/grid.mjs":
/*!**********************************************!*\
  !*** ./node_modules/swiper/modules/grid.mjs ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Grid; }\n/* harmony export */ });\nfunction Grid(_ref) {\n    let { swiper, extendParams, on } = _ref;\n    extendParams({\n        grid: {\n            rows: 1,\n            fill: \"column\"\n        }\n    });\n    let slidesNumberEvenToRows;\n    let slidesPerRow;\n    let numFullColumns;\n    let wasMultiRow;\n    const getSpaceBetween = ()=>{\n        let spaceBetween = swiper.params.spaceBetween;\n        if (typeof spaceBetween === \"string\" && spaceBetween.indexOf(\"%\") >= 0) {\n            spaceBetween = parseFloat(spaceBetween.replace(\"%\", \"\")) / 100 * swiper.size;\n        } else if (typeof spaceBetween === \"string\") {\n            spaceBetween = parseFloat(spaceBetween);\n        }\n        return spaceBetween;\n    };\n    const initSlides = (slides)=>{\n        const { slidesPerView } = swiper.params;\n        const { rows, fill } = swiper.params.grid;\n        const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : slides.length;\n        numFullColumns = Math.floor(slidesLength / rows);\n        if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n            slidesNumberEvenToRows = slidesLength;\n        } else {\n            slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n        }\n        if (slidesPerView !== \"auto\" && fill === \"row\") {\n            slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n        }\n        slidesPerRow = slidesNumberEvenToRows / rows;\n    };\n    const unsetSlides = ()=>{\n        if (swiper.slides) {\n            swiper.slides.forEach((slide)=>{\n                if (slide.swiperSlideGridSet) {\n                    slide.style.height = \"\";\n                    slide.style[swiper.getDirectionLabel(\"margin-top\")] = \"\";\n                }\n            });\n        }\n    };\n    const updateSlide = (i, slide, slides)=>{\n        const { slidesPerGroup } = swiper.params;\n        const spaceBetween = getSpaceBetween();\n        const { rows, fill } = swiper.params.grid;\n        const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : slides.length;\n        // Set slides order\n        let newSlideOrderIndex;\n        let column;\n        let row;\n        if (fill === \"row\" && slidesPerGroup > 1) {\n            const groupIndex = Math.floor(i / (slidesPerGroup * rows));\n            const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n            const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n            row = Math.floor(slideIndexInGroup / columnsInGroup);\n            column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n            newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n            slide.style.order = newSlideOrderIndex;\n        } else if (fill === \"column\") {\n            column = Math.floor(i / rows);\n            row = i - column * rows;\n            if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n                row += 1;\n                if (row >= rows) {\n                    row = 0;\n                    column += 1;\n                }\n            }\n        } else {\n            row = Math.floor(i / slidesPerRow);\n            column = i - row * slidesPerRow;\n        }\n        slide.row = row;\n        slide.column = column;\n        slide.style.height = \"calc((100% - \".concat((rows - 1) * spaceBetween, \"px) / \").concat(rows, \")\");\n        slide.style[swiper.getDirectionLabel(\"margin-top\")] = row !== 0 ? spaceBetween && \"\".concat(spaceBetween, \"px\") : \"\";\n        slide.swiperSlideGridSet = true;\n    };\n    const updateWrapperSize = (slideSize, snapGrid)=>{\n        const { centeredSlides, roundLengths } = swiper.params;\n        const spaceBetween = getSpaceBetween();\n        const { rows } = swiper.params.grid;\n        swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n        swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n        if (!swiper.params.cssMode) {\n            swiper.wrapperEl.style[swiper.getDirectionLabel(\"width\")] = \"\".concat(swiper.virtualSize + spaceBetween, \"px\");\n        }\n        if (centeredSlides) {\n            const newSlidesGrid = [];\n            for(let i = 0; i < snapGrid.length; i += 1){\n                let slidesGridItem = snapGrid[i];\n                if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n                if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n            }\n            snapGrid.splice(0, snapGrid.length);\n            snapGrid.push(...newSlidesGrid);\n        }\n    };\n    const onInit = ()=>{\n        wasMultiRow = swiper.params.grid && swiper.params.grid.rows > 1;\n    };\n    const onUpdate = ()=>{\n        const { params, el } = swiper;\n        const isMultiRow = params.grid && params.grid.rows > 1;\n        if (wasMultiRow && !isMultiRow) {\n            el.classList.remove(\"\".concat(params.containerModifierClass, \"grid\"), \"\".concat(params.containerModifierClass, \"grid-column\"));\n            numFullColumns = 1;\n            swiper.emitContainerClasses();\n        } else if (!wasMultiRow && isMultiRow) {\n            el.classList.add(\"\".concat(params.containerModifierClass, \"grid\"));\n            if (params.grid.fill === \"column\") {\n                el.classList.add(\"\".concat(params.containerModifierClass, \"grid-column\"));\n            }\n            swiper.emitContainerClasses();\n        }\n        wasMultiRow = isMultiRow;\n    };\n    on(\"init\", onInit);\n    on(\"update\", onUpdate);\n    swiper.grid = {\n        initSlides,\n        unsetSlides,\n        updateSlide,\n        updateWrapperSize\n    };\n}\n_c = Grid;\n\nvar _c;\n$RefreshReg$(_c, \"Grid\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/grid.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/hash-navigation.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/swiper/modules/hash-navigation.mjs ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ HashNavigation; }\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n\n\nfunction HashNavigation(_ref) {\n    let { swiper, extendParams, emit, on } = _ref;\n    let initialized = false;\n    const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    extendParams({\n        hashNavigation: {\n            enabled: false,\n            replaceState: false,\n            watchState: false,\n            getSlideIndex (_s, hash) {\n                if (swiper.virtual && swiper.params.virtual.enabled) {\n                    const slideWithHash = swiper.slides.find((slideEl)=>slideEl.getAttribute(\"data-hash\") === hash);\n                    if (!slideWithHash) return 0;\n                    const index = parseInt(slideWithHash.getAttribute(\"data-swiper-slide-index\"), 10);\n                    return index;\n                }\n                return swiper.getSlideIndex((0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(swiper.slidesEl, \".\".concat(swiper.params.slideClass, '[data-hash=\"').concat(hash, '\"], swiper-slide[data-hash=\"').concat(hash, '\"]'))[0]);\n            }\n        }\n    });\n    const onHashChange = ()=>{\n        emit(\"hashChange\");\n        const newHash = document.location.hash.replace(\"#\", \"\");\n        const activeSlideEl = swiper.virtual && swiper.params.virtual.enabled ? swiper.slidesEl.querySelector('[data-swiper-slide-index=\"'.concat(swiper.activeIndex, '\"]')) : swiper.slides[swiper.activeIndex];\n        const activeSlideHash = activeSlideEl ? activeSlideEl.getAttribute(\"data-hash\") : \"\";\n        if (newHash !== activeSlideHash) {\n            const newIndex = swiper.params.hashNavigation.getSlideIndex(swiper, newHash);\n            if (typeof newIndex === \"undefined\" || Number.isNaN(newIndex)) return;\n            swiper.slideTo(newIndex);\n        }\n    };\n    const setHash = ()=>{\n        if (!initialized || !swiper.params.hashNavigation.enabled) return;\n        const activeSlideEl = swiper.virtual && swiper.params.virtual.enabled ? swiper.slidesEl.querySelector('[data-swiper-slide-index=\"'.concat(swiper.activeIndex, '\"]')) : swiper.slides[swiper.activeIndex];\n        const activeSlideHash = activeSlideEl ? activeSlideEl.getAttribute(\"data-hash\") || activeSlideEl.getAttribute(\"data-history\") : \"\";\n        if (swiper.params.hashNavigation.replaceState && window.history && window.history.replaceState) {\n            window.history.replaceState(null, null, \"#\".concat(activeSlideHash) || 0);\n            emit(\"hashSet\");\n        } else {\n            document.location.hash = activeSlideHash || \"\";\n            emit(\"hashSet\");\n        }\n    };\n    const init = ()=>{\n        if (!swiper.params.hashNavigation.enabled || swiper.params.history && swiper.params.history.enabled) return;\n        initialized = true;\n        const hash = document.location.hash.replace(\"#\", \"\");\n        if (hash) {\n            const speed = 0;\n            const index = swiper.params.hashNavigation.getSlideIndex(swiper, hash);\n            swiper.slideTo(index || 0, speed, swiper.params.runCallbacksOnInit, true);\n        }\n        if (swiper.params.hashNavigation.watchState) {\n            window.addEventListener(\"hashchange\", onHashChange);\n        }\n    };\n    const destroy = ()=>{\n        if (swiper.params.hashNavigation.watchState) {\n            window.removeEventListener(\"hashchange\", onHashChange);\n        }\n    };\n    on(\"init\", ()=>{\n        if (swiper.params.hashNavigation.enabled) {\n            init();\n        }\n    });\n    on(\"destroy\", ()=>{\n        if (swiper.params.hashNavigation.enabled) {\n            destroy();\n        }\n    });\n    on(\"transitionEnd _freeModeNoMomentumRelease\", ()=>{\n        if (initialized) {\n            setHash();\n        }\n    });\n    on(\"slideChange\", ()=>{\n        if (initialized && swiper.params.cssMode) {\n            setHash();\n        }\n    });\n}\n_c = HashNavigation;\n\nvar _c;\n$RefreshReg$(_c, \"HashNavigation\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/hash-navigation.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/history.mjs":
/*!*************************************************!*\
  !*** ./node_modules/swiper/modules/history.mjs ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ History; }\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n\nfunction History(_ref) {\n    let { swiper, extendParams, on } = _ref;\n    extendParams({\n        history: {\n            enabled: false,\n            root: \"\",\n            replaceState: false,\n            key: \"slides\",\n            keepQuery: false\n        }\n    });\n    let initialized = false;\n    let paths = {};\n    const slugify = (text)=>{\n        return text.toString().replace(/\\s+/g, \"-\").replace(/[^\\w-]+/g, \"\").replace(/--+/g, \"-\").replace(/^-+/, \"\").replace(/-+$/, \"\");\n    };\n    const getPathValues = (urlOverride)=>{\n        const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n        let location;\n        if (urlOverride) {\n            location = new URL(urlOverride);\n        } else {\n            location = window.location;\n        }\n        const pathArray = location.pathname.slice(1).split(\"/\").filter((part)=>part !== \"\");\n        const total = pathArray.length;\n        const key = pathArray[total - 2];\n        const value = pathArray[total - 1];\n        return {\n            key,\n            value\n        };\n    };\n    const setHistory = (key, index)=>{\n        const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n        if (!initialized || !swiper.params.history.enabled) return;\n        let location;\n        if (swiper.params.url) {\n            location = new URL(swiper.params.url);\n        } else {\n            location = window.location;\n        }\n        const slide = swiper.virtual && swiper.params.virtual.enabled ? swiper.slidesEl.querySelector('[data-swiper-slide-index=\"'.concat(index, '\"]')) : swiper.slides[index];\n        let value = slugify(slide.getAttribute(\"data-history\"));\n        if (swiper.params.history.root.length > 0) {\n            let root = swiper.params.history.root;\n            if (root[root.length - 1] === \"/\") root = root.slice(0, root.length - 1);\n            value = \"\".concat(root, \"/\").concat(key ? \"\".concat(key, \"/\") : \"\").concat(value);\n        } else if (!location.pathname.includes(key)) {\n            value = \"\".concat(key ? \"\".concat(key, \"/\") : \"\").concat(value);\n        }\n        if (swiper.params.history.keepQuery) {\n            value += location.search;\n        }\n        const currentState = window.history.state;\n        if (currentState && currentState.value === value) {\n            return;\n        }\n        if (swiper.params.history.replaceState) {\n            window.history.replaceState({\n                value\n            }, null, value);\n        } else {\n            window.history.pushState({\n                value\n            }, null, value);\n        }\n    };\n    const scrollToSlide = (speed, value, runCallbacks)=>{\n        if (value) {\n            for(let i = 0, length = swiper.slides.length; i < length; i += 1){\n                const slide = swiper.slides[i];\n                const slideHistory = slugify(slide.getAttribute(\"data-history\"));\n                if (slideHistory === value) {\n                    const index = swiper.getSlideIndex(slide);\n                    swiper.slideTo(index, speed, runCallbacks);\n                }\n            }\n        } else {\n            swiper.slideTo(0, speed, runCallbacks);\n        }\n    };\n    const setHistoryPopState = ()=>{\n        paths = getPathValues(swiper.params.url);\n        scrollToSlide(swiper.params.speed, paths.value, false);\n    };\n    const init = ()=>{\n        const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n        if (!swiper.params.history) return;\n        if (!window.history || !window.history.pushState) {\n            swiper.params.history.enabled = false;\n            swiper.params.hashNavigation.enabled = true;\n            return;\n        }\n        initialized = true;\n        paths = getPathValues(swiper.params.url);\n        if (!paths.key && !paths.value) {\n            if (!swiper.params.history.replaceState) {\n                window.addEventListener(\"popstate\", setHistoryPopState);\n            }\n            return;\n        }\n        scrollToSlide(0, paths.value, swiper.params.runCallbacksOnInit);\n        if (!swiper.params.history.replaceState) {\n            window.addEventListener(\"popstate\", setHistoryPopState);\n        }\n    };\n    const destroy = ()=>{\n        const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n        if (!swiper.params.history.replaceState) {\n            window.removeEventListener(\"popstate\", setHistoryPopState);\n        }\n    };\n    on(\"init\", ()=>{\n        if (swiper.params.history.enabled) {\n            init();\n        }\n    });\n    on(\"destroy\", ()=>{\n        if (swiper.params.history.enabled) {\n            destroy();\n        }\n    });\n    on(\"transitionEnd _freeModeNoMomentumRelease\", ()=>{\n        if (initialized) {\n            setHistory(swiper.params.history.key, swiper.activeIndex);\n        }\n    });\n    on(\"slideChange\", ()=>{\n        if (initialized && swiper.params.cssMode) {\n            setHistory(swiper.params.history.key, swiper.activeIndex);\n        }\n    });\n}\n_c = History;\n\nvar _c;\n$RefreshReg$(_c, \"History\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9oaXN0b3J5Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE4RDtBQUU5RCxTQUFTRSxRQUFRQyxJQUFJO0lBQ25CLElBQUksRUFDRkMsTUFBTSxFQUNOQyxZQUFZLEVBQ1pDLEVBQUUsRUFDSCxHQUFHSDtJQUNKRSxhQUFhO1FBQ1hFLFNBQVM7WUFDUEMsU0FBUztZQUNUQyxNQUFNO1lBQ05DLGNBQWM7WUFDZEMsS0FBSztZQUNMQyxXQUFXO1FBQ2I7SUFDRjtJQUNBLElBQUlDLGNBQWM7SUFDbEIsSUFBSUMsUUFBUSxDQUFDO0lBQ2IsTUFBTUMsVUFBVUMsQ0FBQUE7UUFDZCxPQUFPQSxLQUFLQyxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxRQUFRLEtBQUtBLE9BQU8sQ0FBQyxZQUFZLElBQUlBLE9BQU8sQ0FBQyxRQUFRLEtBQUtBLE9BQU8sQ0FBQyxPQUFPLElBQUlBLE9BQU8sQ0FBQyxPQUFPO0lBQzdIO0lBQ0EsTUFBTUMsZ0JBQWdCQyxDQUFBQTtRQUNwQixNQUFNQyxTQUFTcEIsNkRBQVNBO1FBQ3hCLElBQUlxQjtRQUNKLElBQUlGLGFBQWE7WUFDZkUsV0FBVyxJQUFJQyxJQUFJSDtRQUNyQixPQUFPO1lBQ0xFLFdBQVdELE9BQU9DLFFBQVE7UUFDNUI7UUFDQSxNQUFNRSxZQUFZRixTQUFTRyxRQUFRLENBQUNDLEtBQUssQ0FBQyxHQUFHQyxLQUFLLENBQUMsS0FBS0MsTUFBTSxDQUFDQyxDQUFBQSxPQUFRQSxTQUFTO1FBQ2hGLE1BQU1DLFFBQVFOLFVBQVVPLE1BQU07UUFDOUIsTUFBTXBCLE1BQU1hLFNBQVMsQ0FBQ00sUUFBUSxFQUFFO1FBQ2hDLE1BQU1FLFFBQVFSLFNBQVMsQ0FBQ00sUUFBUSxFQUFFO1FBQ2xDLE9BQU87WUFDTG5CO1lBQ0FxQjtRQUNGO0lBQ0Y7SUFDQSxNQUFNQyxhQUFhLENBQUN0QixLQUFLdUI7UUFDdkIsTUFBTWIsU0FBU3BCLDZEQUFT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RjtJQUNGO0lBQ0F0RCxHQUFHLDRDQUE0QztRQUM3QyxJQUFJTyxhQUFhO1lBQ2ZvQixXQUFXN0IsT0FBTytCLE1BQU0sQ0FBQzVCLE9BQU8sQ0FBQ0ksR0FBRyxFQUFFUCxPQUFPMEQsV0FBVztRQUMxRDtJQUNGO0lBQ0F4RCxHQUFHLGVBQWU7UUFDaEIsSUFBSU8sZUFBZVQsT0FBTytCLE1BQU0sQ0FBQzRCLE9BQU8sRUFBRTtZQUN4QzlCLFdBQVc3QixPQUFPK0IsTUFBTSxDQUFDNUIsT0FBTyxDQUFDSSxHQUFHLEVBQUVQLE9BQU8wRCxXQUFXO1FBQzFEO0lBQ0Y7QUFDRjtLQXpJUzVEO0FBMklxQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvaGlzdG9yeS5tanM/NmQ2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhIGFzIGdldFdpbmRvdyB9IGZyb20gJy4uL3NoYXJlZC9zc3Itd2luZG93LmVzbS5tanMnO1xuXG5mdW5jdGlvbiBIaXN0b3J5KF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgZXh0ZW5kUGFyYW1zLFxuICAgIG9uXG4gIH0gPSBfcmVmO1xuICBleHRlbmRQYXJhbXMoe1xuICAgIGhpc3Rvcnk6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgcm9vdDogJycsXG4gICAgICByZXBsYWNlU3RhdGU6IGZhbHNlLFxuICAgICAga2V5OiAnc2xpZGVzJyxcbiAgICAgIGtlZXBRdWVyeTogZmFsc2VcbiAgICB9XG4gIH0pO1xuICBsZXQgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgbGV0IHBhdGhzID0ge307XG4gIGNvbnN0IHNsdWdpZnkgPSB0ZXh0ID0+IHtcbiAgICByZXR1cm4gdGV4dC50b1N0cmluZygpLnJlcGxhY2UoL1xccysvZywgJy0nKS5yZXBsYWNlKC9bXlxcdy1dKy9nLCAnJykucmVwbGFjZSgvLS0rL2csICctJykucmVwbGFjZSgvXi0rLywgJycpLnJlcGxhY2UoLy0rJC8sICcnKTtcbiAgfTtcbiAgY29uc3QgZ2V0UGF0aFZhbHVlcyA9IHVybE92ZXJyaWRlID0+IHtcbiAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICBsZXQgbG9jYXRpb247XG4gICAgaWYgKHVybE92ZXJyaWRlKSB7XG4gICAgICBsb2NhdGlvbiA9IG5ldyBVUkwodXJsT3ZlcnJpZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICB9XG4gICAgY29uc3QgcGF0aEFycmF5ID0gbG9jYXRpb24ucGF0aG5hbWUuc2xpY2UoMSkuc3BsaXQoJy8nKS5maWx0ZXIocGFydCA9PiBwYXJ0ICE9PSAnJyk7XG4gICAgY29uc3QgdG90YWwgPSBwYXRoQXJyYXkubGVuZ3RoO1xuICAgIGNvbnN0IGtleSA9IHBhdGhBcnJheVt0b3RhbCAtIDJdO1xuICAgIGNvbnN0IHZhbHVlID0gcGF0aEFycmF5W3RvdGFsIC0gMV07XG4gICAgcmV0dXJuIHtcbiAgICAgIGtleSxcbiAgICAgIHZhbHVlXG4gICAgfTtcbiAgfTtcbiAgY29uc3Qgc2V0SGlzdG9yeSA9IChrZXksIGluZGV4KSA9PiB7XG4gICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgaWYgKCFpbml0aWFsaXplZCB8fCAhc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHJldHVybjtcbiAgICBsZXQgbG9jYXRpb247XG4gICAgaWYgKHN3aXBlci5wYXJhbXMudXJsKSB7XG4gICAgICBsb2NhdGlvbiA9IG5ldyBVUkwoc3dpcGVyLnBhcmFtcy51cmwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICB9XG4gICAgY29uc3Qgc2xpZGUgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci5zbGlkZXNFbC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke2luZGV4fVwiXWApIDogc3dpcGVyLnNsaWRlc1tpbmRleF07XG4gICAgbGV0IHZhbHVlID0gc2x1Z2lmeShzbGlkZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaGlzdG9yeScpKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LnJvb3QubGVuZ3RoID4gMCkge1xuICAgICAgbGV0IHJvb3QgPSBzd2lwZXIucGFyYW1zLmhpc3Rvcnkucm9vdDtcbiAgICAgIGlmIChyb290W3Jvb3QubGVuZ3RoIC0gMV0gPT09ICcvJykgcm9vdCA9IHJvb3Quc2xpY2UoMCwgcm9vdC5sZW5ndGggLSAxKTtcbiAgICAgIHZhbHVlID0gYCR7cm9vdH0vJHtrZXkgPyBgJHtrZXl9L2AgOiAnJ30ke3ZhbHVlfWA7XG4gICAgfSBlbHNlIGlmICghbG9jYXRpb24ucGF0aG5hbWUuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgdmFsdWUgPSBgJHtrZXkgPyBgJHtrZXl9L2AgOiAnJ30ke3ZhbHVlfWA7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3Rvcnkua2VlcFF1ZXJ5KSB7XG4gICAgICB2YWx1ZSArPSBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfVxuICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IHdpbmRvdy5oaXN0b3J5LnN0YXRlO1xuICAgIGlmIChjdXJyZW50U3RhdGUgJiYgY3VycmVudFN0YXRlLnZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgdmFsdWVcbiAgICAgIH0sIG51bGwsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHtcbiAgICAgICAgdmFsdWVcbiAgICAgIH0sIG51bGwsIHZhbHVlKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHNjcm9sbFRvU2xpZGUgPSAoc3BlZWQsIHZhbHVlLCBydW5DYWxsYmFja3MpID0+IHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IHNsaWRlID0gc3dpcGVyLnNsaWRlc1tpXTtcbiAgICAgICAgY29uc3Qgc2xpZGVIaXN0b3J5ID0gc2x1Z2lmeShzbGlkZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaGlzdG9yeScpKTtcbiAgICAgICAgaWYgKHNsaWRlSGlzdG9yeSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICBjb25zdCBpbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4KHNsaWRlKTtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oMCwgc3BlZWQsIHJ1bkNhbGxiYWNrcyk7XG4gICAgfVxuICB9O1xuICBjb25zdCBzZXRIaXN0b3J5UG9wU3RhdGUgPSAoKSA9PiB7XG4gICAgcGF0aHMgPSBnZXRQYXRoVmFsdWVzKHN3aXBlci5wYXJhbXMudXJsKTtcbiAgICBzY3JvbGxUb1NsaWRlKHN3aXBlci5wYXJhbXMuc3BlZWQsIHBhdGhzLnZhbHVlLCBmYWxzZSk7XG4gIH07XG4gIGNvbnN0IGluaXQgPSAoKSA9PiB7XG4gICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmhpc3RvcnkpIHJldHVybjtcbiAgICBpZiAoIXdpbmRvdy5oaXN0b3J5IHx8ICF3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUpIHtcbiAgICAgIHN3aXBlci5wYXJhbXMuaGlzdG9yeS5lbmFibGVkID0gZmFsc2U7XG4gICAgICBzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbml0aWFsaXplZCA9IHRydWU7XG4gICAgcGF0aHMgPSBnZXRQYXRoVmFsdWVzKHN3aXBlci5wYXJhbXMudXJsKTtcbiAgICBpZiAoIXBhdGhzLmtleSAmJiAhcGF0aHMudmFsdWUpIHtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBzZXRIaXN0b3J5UG9wU3RhdGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzY3JvbGxUb1NsaWRlKDAsIHBhdGhzLnZhbHVlLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCk7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBzZXRIaXN0b3J5UG9wU3RhdGUpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHNldEhpc3RvcnlQb3BTdGF0ZSk7XG4gICAgfVxuICB9O1xuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHtcbiAgICAgIGluaXQoKTtcbiAgICB9XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHtcbiAgICAgIGRlc3Ryb3koKTtcbiAgICB9XG4gIH0pO1xuICBvbigndHJhbnNpdGlvbkVuZCBfZnJlZU1vZGVOb01vbWVudHVtUmVsZWFzZScsICgpID0+IHtcbiAgICBpZiAoaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHNldEhpc3Rvcnkoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmtleSwgc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICB9XG4gIH0pO1xuICBvbignc2xpZGVDaGFuZ2UnLCAoKSA9PiB7XG4gICAgaWYgKGluaXRpYWxpemVkICYmIHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgc2V0SGlzdG9yeShzd2lwZXIucGFyYW1zLmhpc3Rvcnkua2V5LCBzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydCB7IEhpc3RvcnkgYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbImEiLCJnZXRXaW5kb3ciLCJIaXN0b3J5IiwiX3JlZiIsInN3aXBlciIsImV4dGVuZFBhcmFtcyIsIm9uIiwiaGlzdG9yeSIsImVuYWJsZWQiLCJyb290IiwicmVwbGFjZVN0YXRlIiwia2V5Iiwia2VlcFF1ZXJ5IiwiaW5pdGlhbGl6ZWQiLCJwYXRocyIsInNsdWdpZnkiLCJ0ZXh0IiwidG9TdHJpbmciLCJyZXBsYWNlIiwiZ2V0UGF0aFZhbHVlcyIsInVybE92ZXJyaWRlIiwid2luZG93IiwibG9jYXRpb24iLCJVUkwiLCJwYXRoQXJyYXkiLCJwYXRobmFtZSIsInNsaWNlIiwic3BsaXQiLCJmaWx0ZXIiLCJwYXJ0IiwidG90YWwiLCJsZW5ndGgiLCJ2YWx1ZSIsInNldEhpc3RvcnkiLCJpbmRleCIsInBhcmFtcyIsInVybCIsInNsaWRlIiwidmlydHVhbCIsInNsaWRlc0VsIiwicXVlcnlTZWxlY3RvciIsInNsaWRlcyIsImdldEF0dHJpYnV0ZSIsImluY2x1ZGVzIiwic2VhcmNoIiwiY3VycmVudFN0YXRlIiwic3RhdGUiLCJwdXNoU3RhdGUiLCJzY3JvbGxUb1NsaWRlIiwic3BlZWQiLCJydW5DYWxsYmFja3MiLCJpIiwic2xpZGVIaXN0b3J5IiwiZ2V0U2xpZGVJbmRleCIsInNsaWRlVG8iLCJzZXRIaXN0b3J5UG9wU3RhdGUiLCJpbml0IiwiaGFzaE5hdmlnYXRpb24iLCJhZGRFdmVudExpc3RlbmVyIiwicnVuQ2FsbGJhY2tzT25Jbml0IiwiZGVzdHJveSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhY3RpdmVJbmRleCIsImNzc01vZGUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/history.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/index.mjs":
/*!***********************************************!*\
  !*** ./node_modules/swiper/modules/index.mjs ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A11y: function() { return /* reexport safe */ _a11y_mjs__WEBPACK_IMPORTED_MODULE_9__[\"default\"]; },\n/* harmony export */   Autoplay: function() { return /* reexport safe */ _autoplay_mjs__WEBPACK_IMPORTED_MODULE_12__[\"default\"]; },\n/* harmony export */   Controller: function() { return /* reexport safe */ _controller_mjs__WEBPACK_IMPORTED_MODULE_8__[\"default\"]; },\n/* harmony export */   EffectCards: function() { return /* reexport safe */ _effect_cards_mjs__WEBPACK_IMPORTED_MODULE_22__[\"default\"]; },\n/* harmony export */   EffectCoverflow: function() { return /* reexport safe */ _effect_coverflow_mjs__WEBPACK_IMPORTED_MODULE_20__[\"default\"]; },\n/* harmony export */   EffectCreative: function() { return /* reexport safe */ _effect_creative_mjs__WEBPACK_IMPORTED_MODULE_21__[\"default\"]; },\n/* harmony export */   EffectCube: function() { return /* reexport safe */ _effect_cube_mjs__WEBPACK_IMPORTED_MODULE_18__[\"default\"]; },\n/* harmony export */   EffectFade: function() { return /* reexport safe */ _effect_fade_mjs__WEBPACK_IMPORTED_MODULE_17__[\"default\"]; },\n/* harmony export */   EffectFlip: function() { return /* reexport safe */ _effect_flip_mjs__WEBPACK_IMPORTED_MODULE_19__[\"default\"]; },\n/* harmony export */   FreeMode: function() { return /* reexport safe */ _free_mode_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"]; },\n/* harmony export */   Grid: function() { return /* reexport safe */ _grid_mjs__WEBPACK_IMPORTED_MODULE_15__[\"default\"]; },\n/* harmony export */   HashNavigation: function() { return /* reexport safe */ _hash_navigation_mjs__WEBPACK_IMPORTED_MODULE_11__[\"default\"]; },\n/* harmony export */   History: function() { return /* reexport safe */ _history_mjs__WEBPACK_IMPORTED_MODULE_10__[\"default\"]; },\n/* harmony export */   Keyboard: function() { return /* reexport safe */ _keyboard_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; },\n/* harmony export */   Manipulation: function() { return /* reexport safe */ _manipulation_mjs__WEBPACK_IMPORTED_MODULE_16__[\"default\"]; },\n/* harmony export */   Mousewheel: function() { return /* reexport safe */ _mousewheel_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; },\n/* harmony export */   Navigation: function() { return /* reexport safe */ _navigation_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"]; },\n/* harmony export */   Pagination: function() { return /* reexport safe */ _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__[\"default\"]; },\n/* harmony export */   Parallax: function() { return /* reexport safe */ _parallax_mjs__WEBPACK_IMPORTED_MODULE_6__[\"default\"]; },\n/* harmony export */   Scrollbar: function() { return /* reexport safe */ _scrollbar_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"]; },\n/* harmony export */   Thumbs: function() { return /* reexport safe */ _thumbs_mjs__WEBPACK_IMPORTED_MODULE_13__[\"default\"]; },\n/* harmony export */   Virtual: function() { return /* reexport safe */ _virtual_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; },\n/* harmony export */   Zoom: function() { return /* reexport safe */ _zoom_mjs__WEBPACK_IMPORTED_MODULE_7__[\"default\"]; }\n/* harmony export */ });\n/* harmony import */ var _virtual_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./virtual.mjs */ \"(app-pages-browser)/./node_modules/swiper/modules/virtual.mjs\");\n/* harmony import */ var _keyboard_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keyboard.mjs */ \"(app-pages-browser)/./node_modules/swiper/modules/keyboard.mjs\");\n/* harmony import */ var _mousewheel_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mousewheel.mjs */ \"(app-pages-browser)/./node_modules/swiper/modules/mousewheel.mjs\");\n/* harmony import */ var _navigation_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./navigation.mjs */ \"(app-pages-browser)/./node_modules/swiper/modules/navigation.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pagination.mjs */ \"(app-pages-browser)/./node_modules/swiper/modules/pagination.mjs\");\n/* harmony import */ var _scrollbar_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./scrollbar.mjs */ \"(app-pages-browser)/./node_modules/swiper/modules/scrollbar.mjs\");\n/* harmony import */ var _parallax_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parallax.mjs */ \"(app-pages-browser)/./node_modules/swiper/modules/parallax.mjs\");\n/* harmony import */ var _zoom_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./zoom.mjs */ \"(app-pages-browser)/./node_modules/swiper/modules/zoom.mjs\");\n/* harmony import */ var _controller_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./controller.mjs */ \"(app-pages-browser)/./node_modules/swiper/modules/controller.mjs\");\n/* harmony import */ var _a11y_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./a11y.mjs */ \"(app-pages-browser)/./node_modules/swiper/modules/a11y.mjs\");\n/* harmony import */ var _history_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./history.mjs */ \"(app-pages-browser)/./node_modules/swiper/modules/history.mjs\");\n/* harmony import */ var _hash_navigation_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./hash-navigation.mjs */ \"(app-pages-browser)/./node_modules/swiper/modules/hash-navigation.mjs\");\n/* harmony import */ var _autoplay_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./autoplay.mjs */ \"(app-pages-browser)/./node_modules/swiper/modules/autoplay.mjs\");\n/* harmony import */ var _thumbs_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./thumbs.mjs */ \"(app-pages-browser)/./node_modules/swiper/modules/thumbs.mjs\");\n/* harmony import */ var _free_mode_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./free-mode.mjs */ \"(app-pages-browser)/./node_modules/swiper/modules/free-mode.mjs\");\n/* harmony import */ var _grid_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./grid.mjs */ \"(app-pages-browser)/./node_modules/swiper/modules/grid.mjs\");\n/* harmony import */ var _manipulation_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./manipulation.mjs */ \"(app-pages-browser)/./node_modules/swiper/modules/manipulation.mjs\");\n/* harmony import */ var _effect_fade_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./effect-fade.mjs */ \"(app-pages-browser)/./node_modules/swiper/modules/effect-fade.mjs\");\n/* harmony import */ var _effect_cube_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./effect-cube.mjs */ \"(app-pages-browser)/./node_modules/swiper/modules/effect-cube.mjs\");\n/* harmony import */ var _effect_flip_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./effect-flip.mjs */ \"(app-pages-browser)/./node_modules/swiper/modules/effect-flip.mjs\");\n/* harmony import */ var _effect_coverflow_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./effect-coverflow.mjs */ \"(app-pages-browser)/./node_modules/swiper/modules/effect-coverflow.mjs\");\n/* harmony import */ var _effect_creative_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./effect-creative.mjs */ \"(app-pages-browser)/./node_modules/swiper/modules/effect-creative.mjs\");\n/* harmony import */ var _effect_cards_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./effect-cards.mjs */ \"(app-pages-browser)/./node_modules/swiper/modules/effect-cards.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFpRDtBQUNFO0FBQ0k7QUFDQTtBQUNBO0FBQ0Y7QUFDRjtBQUNSO0FBQ1k7QUFDWjtBQUNNO0FBQ2U7QUFDYjtBQUNKO0FBQ0s7QUFDVDtBQUNnQjtBQUNIO0FBQ0E7QUFDQTtBQUNVO0FBQ0Y7QUFDTiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvaW5kZXgubWpzPzY5ZGIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHtkZWZhdWx0IGFzIFZpcnR1YWx9IGZyb20gJy4vdmlydHVhbC5tanMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIEtleWJvYXJkfSBmcm9tICcuL2tleWJvYXJkLm1qcyc7XG5leHBvcnQge2RlZmF1bHQgYXMgTW91c2V3aGVlbH0gZnJvbSAnLi9tb3VzZXdoZWVsLm1qcyc7XG5leHBvcnQge2RlZmF1bHQgYXMgTmF2aWdhdGlvbn0gZnJvbSAnLi9uYXZpZ2F0aW9uLm1qcyc7XG5leHBvcnQge2RlZmF1bHQgYXMgUGFnaW5hdGlvbn0gZnJvbSAnLi9wYWdpbmF0aW9uLm1qcyc7XG5leHBvcnQge2RlZmF1bHQgYXMgU2Nyb2xsYmFyfSBmcm9tICcuL3Njcm9sbGJhci5tanMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIFBhcmFsbGF4fSBmcm9tICcuL3BhcmFsbGF4Lm1qcyc7XG5leHBvcnQge2RlZmF1bHQgYXMgWm9vbX0gZnJvbSAnLi96b29tLm1qcyc7XG5leHBvcnQge2RlZmF1bHQgYXMgQ29udHJvbGxlcn0gZnJvbSAnLi9jb250cm9sbGVyLm1qcyc7XG5leHBvcnQge2RlZmF1bHQgYXMgQTExeX0gZnJvbSAnLi9hMTF5Lm1qcyc7XG5leHBvcnQge2RlZmF1bHQgYXMgSGlzdG9yeX0gZnJvbSAnLi9oaXN0b3J5Lm1qcyc7XG5leHBvcnQge2RlZmF1bHQgYXMgSGFzaE5hdmlnYXRpb259IGZyb20gJy4vaGFzaC1uYXZpZ2F0aW9uLm1qcyc7XG5leHBvcnQge2RlZmF1bHQgYXMgQXV0b3BsYXl9IGZyb20gJy4vYXV0b3BsYXkubWpzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBUaHVtYnN9IGZyb20gJy4vdGh1bWJzLm1qcyc7XG5leHBvcnQge2RlZmF1bHQgYXMgRnJlZU1vZGV9IGZyb20gJy4vZnJlZS1tb2RlLm1qcyc7XG5leHBvcnQge2RlZmF1bHQgYXMgR3JpZH0gZnJvbSAnLi9ncmlkLm1qcyc7XG5leHBvcnQge2RlZmF1bHQgYXMgTWFuaXB1bGF0aW9ufSBmcm9tICcuL21hbmlwdWxhdGlvbi5tanMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIEVmZmVjdEZhZGV9IGZyb20gJy4vZWZmZWN0LWZhZGUubWpzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBFZmZlY3RDdWJlfSBmcm9tICcuL2VmZmVjdC1jdWJlLm1qcyc7XG5leHBvcnQge2RlZmF1bHQgYXMgRWZmZWN0RmxpcH0gZnJvbSAnLi9lZmZlY3QtZmxpcC5tanMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIEVmZmVjdENvdmVyZmxvd30gZnJvbSAnLi9lZmZlY3QtY292ZXJmbG93Lm1qcyc7XG5leHBvcnQge2RlZmF1bHQgYXMgRWZmZWN0Q3JlYXRpdmV9IGZyb20gJy4vZWZmZWN0LWNyZWF0aXZlLm1qcyc7XG5leHBvcnQge2RlZmF1bHQgYXMgRWZmZWN0Q2FyZHN9IGZyb20gJy4vZWZmZWN0LWNhcmRzLm1qcyc7Il0sIm5hbWVzIjpbImRlZmF1bHQiLCJWaXJ0dWFsIiwiS2V5Ym9hcmQiLCJNb3VzZXdoZWVsIiwiTmF2aWdhdGlvbiIsIlBhZ2luYXRpb24iLCJTY3JvbGxiYXIiLCJQYXJhbGxheCIsIlpvb20iLCJDb250cm9sbGVyIiwiQTExeSIsIkhpc3RvcnkiLCJIYXNoTmF2aWdhdGlvbiIsIkF1dG9wbGF5IiwiVGh1bWJzIiwiRnJlZU1vZGUiLCJHcmlkIiwiTWFuaXB1bGF0aW9uIiwiRWZmZWN0RmFkZSIsIkVmZmVjdEN1YmUiLCJFZmZlY3RGbGlwIiwiRWZmZWN0Q292ZXJmbG93IiwiRWZmZWN0Q3JlYXRpdmUiLCJFZmZlY3RDYXJkcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/keyboard.mjs":
/*!**************************************************!*\
  !*** ./node_modules/swiper/modules/keyboard.mjs ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Keyboard; }\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n\n\n/* eslint-disable consistent-return */ function Keyboard(_ref) {\n    let { swiper, extendParams, on, emit } = _ref;\n    const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    swiper.keyboard = {\n        enabled: false\n    };\n    extendParams({\n        keyboard: {\n            enabled: false,\n            onlyInViewport: true,\n            pageUpDown: true\n        }\n    });\n    function handle(event) {\n        if (!swiper.enabled) return;\n        const { rtlTranslate: rtl } = swiper;\n        let e = event;\n        if (e.originalEvent) e = e.originalEvent; // jquery fix\n        const kc = e.keyCode || e.charCode;\n        const pageUpDown = swiper.params.keyboard.pageUpDown;\n        const isPageUp = pageUpDown && kc === 33;\n        const isPageDown = pageUpDown && kc === 34;\n        const isArrowLeft = kc === 37;\n        const isArrowRight = kc === 39;\n        const isArrowUp = kc === 38;\n        const isArrowDown = kc === 40;\n        // Directions locks\n        if (!swiper.allowSlideNext && (swiper.isHorizontal() && isArrowRight || swiper.isVertical() && isArrowDown || isPageDown)) {\n            return false;\n        }\n        if (!swiper.allowSlidePrev && (swiper.isHorizontal() && isArrowLeft || swiper.isVertical() && isArrowUp || isPageUp)) {\n            return false;\n        }\n        if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {\n            return undefined;\n        }\n        if (document.activeElement && document.activeElement.nodeName && (document.activeElement.nodeName.toLowerCase() === \"input\" || document.activeElement.nodeName.toLowerCase() === \"textarea\")) {\n            return undefined;\n        }\n        if (swiper.params.keyboard.onlyInViewport && (isPageUp || isPageDown || isArrowLeft || isArrowRight || isArrowUp || isArrowDown)) {\n            let inView = false;\n            // Check that swiper should be inside of visible area of window\n            if ((0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(swiper.el, \".\".concat(swiper.params.slideClass, \", swiper-slide\")).length > 0 && (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(swiper.el, \".\".concat(swiper.params.slideActiveClass)).length === 0) {\n                return undefined;\n            }\n            const el = swiper.el;\n            const swiperWidth = el.clientWidth;\n            const swiperHeight = el.clientHeight;\n            const windowWidth = window.innerWidth;\n            const windowHeight = window.innerHeight;\n            const swiperOffset = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(el);\n            if (rtl) swiperOffset.left -= el.scrollLeft;\n            const swiperCoord = [\n                [\n                    swiperOffset.left,\n                    swiperOffset.top\n                ],\n                [\n                    swiperOffset.left + swiperWidth,\n                    swiperOffset.top\n                ],\n                [\n                    swiperOffset.left,\n                    swiperOffset.top + swiperHeight\n                ],\n                [\n                    swiperOffset.left + swiperWidth,\n                    swiperOffset.top + swiperHeight\n                ]\n            ];\n            for(let i = 0; i < swiperCoord.length; i += 1){\n                const point = swiperCoord[i];\n                if (point[0] >= 0 && point[0] <= windowWidth && point[1] >= 0 && point[1] <= windowHeight) {\n                    if (point[0] === 0 && point[1] === 0) continue; // eslint-disable-line\n                    inView = true;\n                }\n            }\n            if (!inView) return undefined;\n        }\n        if (swiper.isHorizontal()) {\n            if (isPageUp || isPageDown || isArrowLeft || isArrowRight) {\n                if (e.preventDefault) e.preventDefault();\n                else e.returnValue = false;\n            }\n            if ((isPageDown || isArrowRight) && !rtl || (isPageUp || isArrowLeft) && rtl) swiper.slideNext();\n            if ((isPageUp || isArrowLeft) && !rtl || (isPageDown || isArrowRight) && rtl) swiper.slidePrev();\n        } else {\n            if (isPageUp || isPageDown || isArrowUp || isArrowDown) {\n                if (e.preventDefault) e.preventDefault();\n                else e.returnValue = false;\n            }\n            if (isPageDown || isArrowDown) swiper.slideNext();\n            if (isPageUp || isArrowUp) swiper.slidePrev();\n        }\n        emit(\"keyPress\", kc);\n        return undefined;\n    }\n    function enable() {\n        if (swiper.keyboard.enabled) return;\n        document.addEventListener(\"keydown\", handle);\n        swiper.keyboard.enabled = true;\n    }\n    function disable() {\n        if (!swiper.keyboard.enabled) return;\n        document.removeEventListener(\"keydown\", handle);\n        swiper.keyboard.enabled = false;\n    }\n    on(\"init\", ()=>{\n        if (swiper.params.keyboard.enabled) {\n            enable();\n        }\n    });\n    on(\"destroy\", ()=>{\n        if (swiper.keyboard.enabled) {\n            disable();\n        }\n    });\n    Object.assign(swiper.keyboard, {\n        enable,\n        disable\n    });\n}\n_c = Keyboard;\n\nvar _c;\n$RefreshReg$(_c, \"Keyboard\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/keyboard.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/manipulation.mjs":
/*!******************************************************!*\
  !*** ./node_modules/swiper/modules/manipulation.mjs ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Manipulation; }\n/* harmony export */ });\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n\nfunction appendSlide(slides) {\n    const swiper = this;\n    const { params, slidesEl } = swiper;\n    if (params.loop) {\n        swiper.loopDestroy();\n    }\n    const appendElement = (slideEl)=>{\n        if (typeof slideEl === \"string\") {\n            const tempDOM = document.createElement(\"div\");\n            (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(tempDOM, slideEl);\n            slidesEl.append(tempDOM.children[0]);\n            (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(tempDOM, \"\");\n        } else {\n            slidesEl.append(slideEl);\n        }\n    };\n    if (typeof slides === \"object\" && \"length\" in slides) {\n        for(let i = 0; i < slides.length; i += 1){\n            if (slides[i]) appendElement(slides[i]);\n        }\n    } else {\n        appendElement(slides);\n    }\n    swiper.recalcSlides();\n    if (params.loop) {\n        swiper.loopCreate();\n    }\n    if (!params.observer || swiper.isElement) {\n        swiper.update();\n    }\n}\nfunction prependSlide(slides) {\n    const swiper = this;\n    const { params, activeIndex, slidesEl } = swiper;\n    if (params.loop) {\n        swiper.loopDestroy();\n    }\n    let newActiveIndex = activeIndex + 1;\n    const prependElement = (slideEl)=>{\n        if (typeof slideEl === \"string\") {\n            const tempDOM = document.createElement(\"div\");\n            (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(tempDOM, slideEl);\n            slidesEl.prepend(tempDOM.children[0]);\n            (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(tempDOM, \"\");\n        } else {\n            slidesEl.prepend(slideEl);\n        }\n    };\n    if (typeof slides === \"object\" && \"length\" in slides) {\n        for(let i = 0; i < slides.length; i += 1){\n            if (slides[i]) prependElement(slides[i]);\n        }\n        newActiveIndex = activeIndex + slides.length;\n    } else {\n        prependElement(slides);\n    }\n    swiper.recalcSlides();\n    if (params.loop) {\n        swiper.loopCreate();\n    }\n    if (!params.observer || swiper.isElement) {\n        swiper.update();\n    }\n    swiper.slideTo(newActiveIndex, 0, false);\n}\nfunction addSlide(index, slides) {\n    const swiper = this;\n    const { params, activeIndex, slidesEl } = swiper;\n    let activeIndexBuffer = activeIndex;\n    if (params.loop) {\n        activeIndexBuffer -= swiper.loopedSlides;\n        swiper.loopDestroy();\n        swiper.recalcSlides();\n    }\n    const baseLength = swiper.slides.length;\n    if (index <= 0) {\n        swiper.prependSlide(slides);\n        return;\n    }\n    if (index >= baseLength) {\n        swiper.appendSlide(slides);\n        return;\n    }\n    let newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;\n    const slidesBuffer = [];\n    for(let i = baseLength - 1; i >= index; i -= 1){\n        const currentSlide = swiper.slides[i];\n        currentSlide.remove();\n        slidesBuffer.unshift(currentSlide);\n    }\n    if (typeof slides === \"object\" && \"length\" in slides) {\n        for(let i = 0; i < slides.length; i += 1){\n            if (slides[i]) slidesEl.append(slides[i]);\n        }\n        newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;\n    } else {\n        slidesEl.append(slides);\n    }\n    for(let i = 0; i < slidesBuffer.length; i += 1){\n        slidesEl.append(slidesBuffer[i]);\n    }\n    swiper.recalcSlides();\n    if (params.loop) {\n        swiper.loopCreate();\n    }\n    if (!params.observer || swiper.isElement) {\n        swiper.update();\n    }\n    if (params.loop) {\n        swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\n    } else {\n        swiper.slideTo(newActiveIndex, 0, false);\n    }\n}\nfunction removeSlide(slidesIndexes) {\n    const swiper = this;\n    const { params, activeIndex } = swiper;\n    let activeIndexBuffer = activeIndex;\n    if (params.loop) {\n        activeIndexBuffer -= swiper.loopedSlides;\n        swiper.loopDestroy();\n    }\n    let newActiveIndex = activeIndexBuffer;\n    let indexToRemove;\n    if (typeof slidesIndexes === \"object\" && \"length\" in slidesIndexes) {\n        for(let i = 0; i < slidesIndexes.length; i += 1){\n            indexToRemove = slidesIndexes[i];\n            if (swiper.slides[indexToRemove]) swiper.slides[indexToRemove].remove();\n            if (indexToRemove < newActiveIndex) newActiveIndex -= 1;\n        }\n        newActiveIndex = Math.max(newActiveIndex, 0);\n    } else {\n        indexToRemove = slidesIndexes;\n        if (swiper.slides[indexToRemove]) swiper.slides[indexToRemove].remove();\n        if (indexToRemove < newActiveIndex) newActiveIndex -= 1;\n        newActiveIndex = Math.max(newActiveIndex, 0);\n    }\n    swiper.recalcSlides();\n    if (params.loop) {\n        swiper.loopCreate();\n    }\n    if (!params.observer || swiper.isElement) {\n        swiper.update();\n    }\n    if (params.loop) {\n        swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\n    } else {\n        swiper.slideTo(newActiveIndex, 0, false);\n    }\n}\nfunction removeAllSlides() {\n    const swiper = this;\n    const slidesIndexes = [];\n    for(let i = 0; i < swiper.slides.length; i += 1){\n        slidesIndexes.push(i);\n    }\n    swiper.removeSlide(slidesIndexes);\n}\nfunction Manipulation(_ref) {\n    let { swiper } = _ref;\n    Object.assign(swiper, {\n        appendSlide: appendSlide.bind(swiper),\n        prependSlide: prependSlide.bind(swiper),\n        addSlide: addSlide.bind(swiper),\n        removeSlide: removeSlide.bind(swiper),\n        removeAllSlides: removeAllSlides.bind(swiper)\n    });\n}\n_c = Manipulation;\n\nvar _c;\n$RefreshReg$(_c, \"Manipulation\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/manipulation.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/mousewheel.mjs":
/*!****************************************************!*\
  !*** ./node_modules/swiper/modules/mousewheel.mjs ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Mousewheel; }\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n\n\n/* eslint-disable consistent-return */ function Mousewheel(_ref) {\n    let { swiper, extendParams, on, emit } = _ref;\n    const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    extendParams({\n        mousewheel: {\n            enabled: false,\n            releaseOnEdges: false,\n            invert: false,\n            forceToAxis: false,\n            sensitivity: 1,\n            eventsTarget: \"container\",\n            thresholdDelta: null,\n            thresholdTime: null,\n            noMousewheelClass: \"swiper-no-mousewheel\"\n        }\n    });\n    swiper.mousewheel = {\n        enabled: false\n    };\n    let timeout;\n    let lastScrollTime = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)();\n    let lastEventBeforeSnap;\n    const recentWheelEvents = [];\n    function normalize(e) {\n        // Reasonable defaults\n        const PIXEL_STEP = 10;\n        const LINE_HEIGHT = 40;\n        const PAGE_HEIGHT = 800;\n        let sX = 0;\n        let sY = 0; // spinX, spinY\n        let pX = 0;\n        let pY = 0; // pixelX, pixelY\n        // Legacy\n        if (\"detail\" in e) {\n            sY = e.detail;\n        }\n        if (\"wheelDelta\" in e) {\n            sY = -e.wheelDelta / 120;\n        }\n        if (\"wheelDeltaY\" in e) {\n            sY = -e.wheelDeltaY / 120;\n        }\n        if (\"wheelDeltaX\" in e) {\n            sX = -e.wheelDeltaX / 120;\n        }\n        // side scrolling on FF with DOMMouseScroll\n        if (\"axis\" in e && e.axis === e.HORIZONTAL_AXIS) {\n            sX = sY;\n            sY = 0;\n        }\n        pX = sX * PIXEL_STEP;\n        pY = sY * PIXEL_STEP;\n        if (\"deltaY\" in e) {\n            pY = e.deltaY;\n        }\n        if (\"deltaX\" in e) {\n            pX = e.deltaX;\n        }\n        if (e.shiftKey && !pX) {\n            // if user scrolls with shift he wants horizontal scroll\n            pX = pY;\n            pY = 0;\n        }\n        if ((pX || pY) && e.deltaMode) {\n            if (e.deltaMode === 1) {\n                // delta in LINE units\n                pX *= LINE_HEIGHT;\n                pY *= LINE_HEIGHT;\n            } else {\n                // delta in PAGE units\n                pX *= PAGE_HEIGHT;\n                pY *= PAGE_HEIGHT;\n            }\n        }\n        // Fall-back if spin cannot be determined\n        if (pX && !sX) {\n            sX = pX < 1 ? -1 : 1;\n        }\n        if (pY && !sY) {\n            sY = pY < 1 ? -1 : 1;\n        }\n        return {\n            spinX: sX,\n            spinY: sY,\n            pixelX: pX,\n            pixelY: pY\n        };\n    }\n    function handleMouseEnter() {\n        if (!swiper.enabled) return;\n        swiper.mouseEntered = true;\n    }\n    function handleMouseLeave() {\n        if (!swiper.enabled) return;\n        swiper.mouseEntered = false;\n    }\n    function animateSlider(newEvent) {\n        if (swiper.params.mousewheel.thresholdDelta && newEvent.delta < swiper.params.mousewheel.thresholdDelta) {\n            // Prevent if delta of wheel scroll delta is below configured threshold\n            return false;\n        }\n        if (swiper.params.mousewheel.thresholdTime && (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)() - lastScrollTime < swiper.params.mousewheel.thresholdTime) {\n            // Prevent if time between scrolls is below configured threshold\n            return false;\n        }\n        // If the movement is NOT big enough and\n        // if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):\n        //   Don't go any further (avoid insignificant scroll movement).\n        if (newEvent.delta >= 6 && (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)() - lastScrollTime < 60) {\n            // Return false as a default\n            return true;\n        }\n        // If user is scrolling towards the end:\n        //   If the slider hasn't hit the latest slide or\n        //   if the slider is a loop and\n        //   if the slider isn't moving right now:\n        //     Go to next slide and\n        //     emit a scroll event.\n        // Else (the user is scrolling towards the beginning) and\n        // if the slider hasn't hit the first slide or\n        // if the slider is a loop and\n        // if the slider isn't moving right now:\n        //   Go to prev slide and\n        //   emit a scroll event.\n        if (newEvent.direction < 0) {\n            if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {\n                swiper.slideNext();\n                emit(\"scroll\", newEvent.raw);\n            }\n        } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {\n            swiper.slidePrev();\n            emit(\"scroll\", newEvent.raw);\n        }\n        // If you got here is because an animation has been triggered so store the current time\n        lastScrollTime = new window.Date().getTime();\n        // Return false as a default\n        return false;\n    }\n    function releaseScroll(newEvent) {\n        const params = swiper.params.mousewheel;\n        if (newEvent.direction < 0) {\n            if (swiper.isEnd && !swiper.params.loop && params.releaseOnEdges) {\n                // Return true to animate scroll on edges\n                return true;\n            }\n        } else if (swiper.isBeginning && !swiper.params.loop && params.releaseOnEdges) {\n            // Return true to animate scroll on edges\n            return true;\n        }\n        return false;\n    }\n    function handle(event1) {\n        let e = event1;\n        let disableParentSwiper = true;\n        if (!swiper.enabled) return;\n        // Ignore event if the target or its parents have the swiper-no-mousewheel class\n        if (event1.target.closest(\".\".concat(swiper.params.mousewheel.noMousewheelClass))) return;\n        const params = swiper.params.mousewheel;\n        if (swiper.params.cssMode) {\n            e.preventDefault();\n        }\n        let targetEl = swiper.el;\n        if (swiper.params.mousewheel.eventsTarget !== \"container\") {\n            targetEl = document.querySelector(swiper.params.mousewheel.eventsTarget);\n        }\n        const targetElContainsTarget = targetEl && targetEl.contains(e.target);\n        if (!swiper.mouseEntered && !targetElContainsTarget && !params.releaseOnEdges) return true;\n        if (e.originalEvent) e = e.originalEvent; // jquery fix\n        let delta = 0;\n        const rtlFactor = swiper.rtlTranslate ? -1 : 1;\n        const data = normalize(e);\n        if (params.forceToAxis) {\n            if (swiper.isHorizontal()) {\n                if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) delta = -data.pixelX * rtlFactor;\n                else return true;\n            } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) delta = -data.pixelY;\n            else return true;\n        } else {\n            delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;\n        }\n        if (delta === 0) return true;\n        if (params.invert) delta = -delta;\n        // Get the scroll positions\n        let positions = swiper.getTranslate() + delta * params.sensitivity;\n        if (positions >= swiper.minTranslate()) positions = swiper.minTranslate();\n        if (positions <= swiper.maxTranslate()) positions = swiper.maxTranslate();\n        // When loop is true:\n        //     the disableParentSwiper will be true.\n        // When loop is false:\n        //     if the scroll positions is not on edge,\n        //     then the disableParentSwiper will be true.\n        //     if the scroll on edge positions,\n        //     then the disableParentSwiper will be false.\n        disableParentSwiper = swiper.params.loop ? true : !(positions === swiper.minTranslate() || positions === swiper.maxTranslate());\n        if (disableParentSwiper && swiper.params.nested) e.stopPropagation();\n        if (!swiper.params.freeMode || !swiper.params.freeMode.enabled) {\n            // Register the new event in a variable which stores the relevant data\n            const newEvent = {\n                time: (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)(),\n                delta: Math.abs(delta),\n                direction: Math.sign(delta),\n                raw: event1\n            };\n            // Keep the most recent events\n            if (recentWheelEvents.length >= 2) {\n                recentWheelEvents.shift(); // only store the last N events\n            }\n            const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\n            recentWheelEvents.push(newEvent);\n            // If there is at least one previous recorded event:\n            //   If direction has changed or\n            //   if the scroll is quicker than the previous one:\n            //     Animate the slider.\n            // Else (this is the first time the wheel is moved):\n            //     Animate the slider.\n            if (prevEvent) {\n                if (newEvent.direction !== prevEvent.direction || newEvent.delta > prevEvent.delta || newEvent.time > prevEvent.time + 150) {\n                    animateSlider(newEvent);\n                }\n            } else {\n                animateSlider(newEvent);\n            }\n            // If it's time to release the scroll:\n            //   Return now so you don't hit the preventDefault.\n            if (releaseScroll(newEvent)) {\n                return true;\n            }\n        } else {\n            // Freemode or scrollContainer:\n            // If we recently snapped after a momentum scroll, then ignore wheel events\n            // to give time for the deceleration to finish. Stop ignoring after 500 msecs\n            // or if it's a new scroll (larger delta or inverse sign as last event before\n            // an end-of-momentum snap).\n            const newEvent = {\n                time: (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)(),\n                delta: Math.abs(delta),\n                direction: Math.sign(delta)\n            };\n            const ignoreWheelEvents = lastEventBeforeSnap && newEvent.time < lastEventBeforeSnap.time + 500 && newEvent.delta <= lastEventBeforeSnap.delta && newEvent.direction === lastEventBeforeSnap.direction;\n            if (!ignoreWheelEvents) {\n                lastEventBeforeSnap = undefined;\n                let position = swiper.getTranslate() + delta * params.sensitivity;\n                const wasBeginning = swiper.isBeginning;\n                const wasEnd = swiper.isEnd;\n                if (position >= swiper.minTranslate()) position = swiper.minTranslate();\n                if (position <= swiper.maxTranslate()) position = swiper.maxTranslate();\n                swiper.setTransition(0);\n                swiper.setTranslate(position);\n                swiper.updateProgress();\n                swiper.updateActiveIndex();\n                swiper.updateSlidesClasses();\n                if (!wasBeginning && swiper.isBeginning || !wasEnd && swiper.isEnd) {\n                    swiper.updateSlidesClasses();\n                }\n                if (swiper.params.loop) {\n                    swiper.loopFix({\n                        direction: newEvent.direction < 0 ? \"next\" : \"prev\",\n                        byMousewheel: true\n                    });\n                }\n                if (swiper.params.freeMode.sticky) {\n                    // When wheel scrolling starts with sticky (aka snap) enabled, then detect\n                    // the end of a momentum scroll by storing recent (N=15?) wheel events.\n                    // 1. do all N events have decreasing or same (absolute value) delta?\n                    // 2. did all N events arrive in the last M (M=500?) msecs?\n                    // 3. does the earliest event have an (absolute value) delta that's\n                    //    at least P (P=1?) larger than the most recent event's delta?\n                    // 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?\n                    // If 1-4 are \"yes\" then we're near the end of a momentum scroll deceleration.\n                    // Snap immediately and ignore remaining wheel events in this scroll.\n                    // See comment above for \"remaining wheel events in this scroll\" determination.\n                    // If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.\n                    clearTimeout(timeout);\n                    timeout = undefined;\n                    if (recentWheelEvents.length >= 15) {\n                        recentWheelEvents.shift(); // only store the last N events\n                    }\n                    const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\n                    const firstEvent = recentWheelEvents[0];\n                    recentWheelEvents.push(newEvent);\n                    if (prevEvent && (newEvent.delta > prevEvent.delta || newEvent.direction !== prevEvent.direction)) {\n                        // Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.\n                        recentWheelEvents.splice(0);\n                    } else if (recentWheelEvents.length >= 15 && newEvent.time - firstEvent.time < 500 && firstEvent.delta - newEvent.delta >= 1 && newEvent.delta <= 6) {\n                        // We're at the end of the deceleration of a momentum scroll, so there's no need\n                        // to wait for more events. Snap ASAP on the next tick.\n                        // Also, because there's some remaining momentum we'll bias the snap in the\n                        // direction of the ongoing scroll because it's better UX for the scroll to snap\n                        // in the same direction as the scroll instead of reversing to snap.  Therefore,\n                        // if it's already scrolled more than 20% in the current direction, keep going.\n                        const snapToThreshold = delta > 0 ? 0.8 : 0.2;\n                        lastEventBeforeSnap = newEvent;\n                        recentWheelEvents.splice(0);\n                        timeout = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(()=>{\n                            if (swiper.destroyed || !swiper.params) return;\n                            swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\n                        }, 0); // no delay; move on next tick\n                    }\n                    if (!timeout) {\n                        // if we get here, then we haven't detected the end of a momentum scroll, so\n                        // we'll consider a scroll \"complete\" when there haven't been any wheel events\n                        // for 500ms.\n                        timeout = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(()=>{\n                            if (swiper.destroyed || !swiper.params) return;\n                            const snapToThreshold = 0.5;\n                            lastEventBeforeSnap = newEvent;\n                            recentWheelEvents.splice(0);\n                            swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\n                        }, 500);\n                    }\n                }\n                // Emit event\n                if (!ignoreWheelEvents) emit(\"scroll\", e);\n                // Stop autoplay\n                if (swiper.params.autoplay && swiper.params.autoplay.disableOnInteraction) swiper.autoplay.stop();\n                // Return page scroll on edge positions\n                if (params.releaseOnEdges && (position === swiper.minTranslate() || position === swiper.maxTranslate())) {\n                    return true;\n                }\n            }\n        }\n        if (e.preventDefault) e.preventDefault();\n        else e.returnValue = false;\n        return false;\n    }\n    function events(method) {\n        let targetEl = swiper.el;\n        if (swiper.params.mousewheel.eventsTarget !== \"container\") {\n            targetEl = document.querySelector(swiper.params.mousewheel.eventsTarget);\n        }\n        targetEl[method](\"mouseenter\", handleMouseEnter);\n        targetEl[method](\"mouseleave\", handleMouseLeave);\n        targetEl[method](\"wheel\", handle);\n    }\n    function enable() {\n        if (swiper.params.cssMode) {\n            swiper.wrapperEl.removeEventListener(\"wheel\", handle);\n            return true;\n        }\n        if (swiper.mousewheel.enabled) return false;\n        events(\"addEventListener\");\n        swiper.mousewheel.enabled = true;\n        return true;\n    }\n    function disable() {\n        if (swiper.params.cssMode) {\n            swiper.wrapperEl.addEventListener(event, handle);\n            return true;\n        }\n        if (!swiper.mousewheel.enabled) return false;\n        events(\"removeEventListener\");\n        swiper.mousewheel.enabled = false;\n        return true;\n    }\n    on(\"init\", ()=>{\n        if (!swiper.params.mousewheel.enabled && swiper.params.cssMode) {\n            disable();\n        }\n        if (swiper.params.mousewheel.enabled) enable();\n    });\n    on(\"destroy\", ()=>{\n        if (swiper.params.cssMode) {\n            enable();\n        }\n        if (swiper.mousewheel.enabled) disable();\n    });\n    Object.assign(swiper.mousewheel, {\n        enable,\n        disable\n    });\n}\n_c = Mousewheel;\n\nvar _c;\n$RefreshReg$(_c, \"Mousewheel\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/mousewheel.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/navigation.mjs":
/*!****************************************************!*\
  !*** ./node_modules/swiper/modules/navigation.mjs ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Navigation; }\n/* harmony export */ });\n/* harmony import */ var _shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/create-element-if-not-defined.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/create-element-if-not-defined.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n\n\nfunction Navigation(_ref) {\n    let { swiper, extendParams, on, emit } = _ref;\n    extendParams({\n        navigation: {\n            nextEl: null,\n            prevEl: null,\n            hideOnClick: false,\n            disabledClass: \"swiper-button-disabled\",\n            hiddenClass: \"swiper-button-hidden\",\n            lockClass: \"swiper-button-lock\",\n            navigationDisabledClass: \"swiper-navigation-disabled\"\n        }\n    });\n    swiper.navigation = {\n        nextEl: null,\n        prevEl: null\n    };\n    function getEl(el) {\n        let res;\n        if (el && typeof el === \"string\" && swiper.isElement) {\n            res = swiper.el.querySelector(el) || swiper.hostEl.querySelector(el);\n            if (res) return res;\n        }\n        if (el) {\n            if (typeof el === \"string\") res = [\n                ...document.querySelectorAll(el)\n            ];\n            if (swiper.params.uniqueNavElements && typeof el === \"string\" && res && res.length > 1 && swiper.el.querySelectorAll(el).length === 1) {\n                res = swiper.el.querySelector(el);\n            } else if (res && res.length === 1) {\n                res = res[0];\n            }\n        }\n        if (el && !res) return el;\n        // if (Array.isArray(res) && res.length === 1) res = res[0];\n        return res;\n    }\n    function toggleEl(el, disabled) {\n        const params = swiper.params.navigation;\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(el);\n        el.forEach((subEl)=>{\n            if (subEl) {\n                subEl.classList[disabled ? \"add\" : \"remove\"](...params.disabledClass.split(\" \"));\n                if (subEl.tagName === \"BUTTON\") subEl.disabled = disabled;\n                if (swiper.params.watchOverflow && swiper.enabled) {\n                    subEl.classList[swiper.isLocked ? \"add\" : \"remove\"](params.lockClass);\n                }\n            }\n        });\n    }\n    function update() {\n        // Update Navigation Buttons\n        const { nextEl, prevEl } = swiper.navigation;\n        if (swiper.params.loop) {\n            toggleEl(prevEl, false);\n            toggleEl(nextEl, false);\n            return;\n        }\n        toggleEl(prevEl, swiper.isBeginning && !swiper.params.rewind);\n        toggleEl(nextEl, swiper.isEnd && !swiper.params.rewind);\n    }\n    function onPrevClick(e) {\n        e.preventDefault();\n        if (swiper.isBeginning && !swiper.params.loop && !swiper.params.rewind) return;\n        swiper.slidePrev();\n        emit(\"navigationPrev\");\n    }\n    function onNextClick(e) {\n        e.preventDefault();\n        if (swiper.isEnd && !swiper.params.loop && !swiper.params.rewind) return;\n        swiper.slideNext();\n        emit(\"navigationNext\");\n    }\n    function init() {\n        const params = swiper.params.navigation;\n        swiper.params.navigation = (0,_shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(swiper, swiper.originalParams.navigation, swiper.params.navigation, {\n            nextEl: \"swiper-button-next\",\n            prevEl: \"swiper-button-prev\"\n        });\n        if (!(params.nextEl || params.prevEl)) return;\n        let nextEl = getEl(params.nextEl);\n        let prevEl = getEl(params.prevEl);\n        Object.assign(swiper.navigation, {\n            nextEl,\n            prevEl\n        });\n        nextEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(nextEl);\n        prevEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(prevEl);\n        const initButton = (el, dir)=>{\n            if (el) {\n                el.addEventListener(\"click\", dir === \"next\" ? onNextClick : onPrevClick);\n            }\n            if (!swiper.enabled && el) {\n                el.classList.add(...params.lockClass.split(\" \"));\n            }\n        };\n        nextEl.forEach((el)=>initButton(el, \"next\"));\n        prevEl.forEach((el)=>initButton(el, \"prev\"));\n    }\n    function destroy() {\n        let { nextEl, prevEl } = swiper.navigation;\n        nextEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(nextEl);\n        prevEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(prevEl);\n        const destroyButton = (el, dir)=>{\n            el.removeEventListener(\"click\", dir === \"next\" ? onNextClick : onPrevClick);\n            el.classList.remove(...swiper.params.navigation.disabledClass.split(\" \"));\n        };\n        nextEl.forEach((el)=>destroyButton(el, \"next\"));\n        prevEl.forEach((el)=>destroyButton(el, \"prev\"));\n    }\n    on(\"init\", ()=>{\n        if (swiper.params.navigation.enabled === false) {\n            // eslint-disable-next-line\n            disable();\n        } else {\n            init();\n            update();\n        }\n    });\n    on(\"toEdge fromEdge lock unlock\", ()=>{\n        update();\n    });\n    on(\"destroy\", ()=>{\n        destroy();\n    });\n    on(\"enable disable\", ()=>{\n        let { nextEl, prevEl } = swiper.navigation;\n        nextEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(nextEl);\n        prevEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(prevEl);\n        if (swiper.enabled) {\n            update();\n            return;\n        }\n        [\n            ...nextEl,\n            ...prevEl\n        ].filter((el)=>!!el).forEach((el)=>el.classList.add(swiper.params.navigation.lockClass));\n    });\n    on(\"click\", (_s, e)=>{\n        let { nextEl, prevEl } = swiper.navigation;\n        nextEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(nextEl);\n        prevEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(prevEl);\n        const targetEl = e.target;\n        let targetIsButton = prevEl.includes(targetEl) || nextEl.includes(targetEl);\n        if (swiper.isElement && !targetIsButton) {\n            const path = e.path || e.composedPath && e.composedPath();\n            if (path) {\n                targetIsButton = path.find((pathEl)=>nextEl.includes(pathEl) || prevEl.includes(pathEl));\n            }\n        }\n        if (swiper.params.navigation.hideOnClick && !targetIsButton) {\n            if (swiper.pagination && swiper.params.pagination && swiper.params.pagination.clickable && (swiper.pagination.el === targetEl || swiper.pagination.el.contains(targetEl))) return;\n            let isHidden;\n            if (nextEl.length) {\n                isHidden = nextEl[0].classList.contains(swiper.params.navigation.hiddenClass);\n            } else if (prevEl.length) {\n                isHidden = prevEl[0].classList.contains(swiper.params.navigation.hiddenClass);\n            }\n            if (isHidden === true) {\n                emit(\"navigationShow\");\n            } else {\n                emit(\"navigationHide\");\n            }\n            [\n                ...nextEl,\n                ...prevEl\n            ].filter((el)=>!!el).forEach((el)=>el.classList.toggle(swiper.params.navigation.hiddenClass));\n        }\n    });\n    const enable = ()=>{\n        swiper.el.classList.remove(...swiper.params.navigation.navigationDisabledClass.split(\" \"));\n        init();\n        update();\n    };\n    const disable = ()=>{\n        swiper.el.classList.add(...swiper.params.navigation.navigationDisabledClass.split(\" \"));\n        destroy();\n    };\n    Object.assign(swiper.navigation, {\n        enable,\n        disable,\n        update,\n        init,\n        destroy\n    });\n}\n_c = Navigation;\n\nvar _c;\n$RefreshReg$(_c, \"Navigation\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/navigation.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/pagination.mjs":
/*!****************************************************!*\
  !*** ./node_modules/swiper/modules/pagination.mjs ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Pagination; }\n/* harmony export */ });\n/* harmony import */ var _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/classes-to-selector.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/classes-to-selector.mjs\");\n/* harmony import */ var _shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/create-element-if-not-defined.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/create-element-if-not-defined.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n\n\n\nfunction Pagination(_ref) {\n    let { swiper, extendParams, on, emit } = _ref;\n    const pfx = \"swiper-pagination\";\n    extendParams({\n        pagination: {\n            el: null,\n            bulletElement: \"span\",\n            clickable: false,\n            hideOnClick: false,\n            renderBullet: null,\n            renderProgressbar: null,\n            renderFraction: null,\n            renderCustom: null,\n            progressbarOpposite: false,\n            type: \"bullets\",\n            // 'bullets' or 'progressbar' or 'fraction' or 'custom'\n            dynamicBullets: false,\n            dynamicMainBullets: 1,\n            formatFractionCurrent: (number)=>number,\n            formatFractionTotal: (number)=>number,\n            bulletClass: \"\".concat(pfx, \"-bullet\"),\n            bulletActiveClass: \"\".concat(pfx, \"-bullet-active\"),\n            modifierClass: \"\".concat(pfx, \"-\"),\n            currentClass: \"\".concat(pfx, \"-current\"),\n            totalClass: \"\".concat(pfx, \"-total\"),\n            hiddenClass: \"\".concat(pfx, \"-hidden\"),\n            progressbarFillClass: \"\".concat(pfx, \"-progressbar-fill\"),\n            progressbarOppositeClass: \"\".concat(pfx, \"-progressbar-opposite\"),\n            clickableClass: \"\".concat(pfx, \"-clickable\"),\n            lockClass: \"\".concat(pfx, \"-lock\"),\n            horizontalClass: \"\".concat(pfx, \"-horizontal\"),\n            verticalClass: \"\".concat(pfx, \"-vertical\"),\n            paginationDisabledClass: \"\".concat(pfx, \"-disabled\")\n        }\n    });\n    swiper.pagination = {\n        el: null,\n        bullets: []\n    };\n    let bulletSize;\n    let dynamicBulletIndex = 0;\n    function isPaginationDisabled() {\n        return !swiper.params.pagination.el || !swiper.pagination.el || Array.isArray(swiper.pagination.el) && swiper.pagination.el.length === 0;\n    }\n    function setSideBullets(bulletEl, position) {\n        const { bulletActiveClass } = swiper.params.pagination;\n        if (!bulletEl) return;\n        bulletEl = bulletEl[\"\".concat(position === \"prev\" ? \"previous\" : \"next\", \"ElementSibling\")];\n        if (bulletEl) {\n            bulletEl.classList.add(\"\".concat(bulletActiveClass, \"-\").concat(position));\n            bulletEl = bulletEl[\"\".concat(position === \"prev\" ? \"previous\" : \"next\", \"ElementSibling\")];\n            if (bulletEl) {\n                bulletEl.classList.add(\"\".concat(bulletActiveClass, \"-\").concat(position, \"-\").concat(position));\n            }\n        }\n    }\n    function getMoveDirection(prevIndex, nextIndex, length) {\n        prevIndex = prevIndex % length;\n        nextIndex = nextIndex % length;\n        if (nextIndex === prevIndex + 1) {\n            return \"next\";\n        } else if (nextIndex === prevIndex - 1) {\n            return \"previous\";\n        }\n        return;\n    }\n    function onBulletClick(e) {\n        const bulletEl = e.target.closest((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(swiper.params.pagination.bulletClass));\n        if (!bulletEl) {\n            return;\n        }\n        e.preventDefault();\n        const index = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.i)(bulletEl) * swiper.params.slidesPerGroup;\n        if (swiper.params.loop) {\n            if (swiper.realIndex === index) return;\n            const moveDirection = getMoveDirection(swiper.realIndex, index, swiper.slides.length);\n            if (moveDirection === \"next\") {\n                swiper.slideNext();\n            } else if (moveDirection === \"previous\") {\n                swiper.slidePrev();\n            } else {\n                swiper.slideToLoop(index);\n            }\n        } else {\n            swiper.slideTo(index);\n        }\n    }\n    function update() {\n        // Render || Update Pagination bullets/items\n        const rtl = swiper.rtl;\n        const params = swiper.params.pagination;\n        if (isPaginationDisabled()) return;\n        let el = swiper.pagination.el;\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        // Current/Total\n        let current;\n        let previousIndex;\n        const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;\n        const total = swiper.params.loop ? Math.ceil(slidesLength / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\n        if (swiper.params.loop) {\n            previousIndex = swiper.previousRealIndex || 0;\n            current = swiper.params.slidesPerGroup > 1 ? Math.floor(swiper.realIndex / swiper.params.slidesPerGroup) : swiper.realIndex;\n        } else if (typeof swiper.snapIndex !== \"undefined\") {\n            current = swiper.snapIndex;\n            previousIndex = swiper.previousSnapIndex;\n        } else {\n            previousIndex = swiper.previousIndex || 0;\n            current = swiper.activeIndex || 0;\n        }\n        // Types\n        if (params.type === \"bullets\" && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {\n            const bullets = swiper.pagination.bullets;\n            let firstIndex;\n            let lastIndex;\n            let midIndex;\n            if (params.dynamicBullets) {\n                bulletSize = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.h)(bullets[0], swiper.isHorizontal() ? \"width\" : \"height\", true);\n                el.forEach((subEl)=>{\n                    subEl.style[swiper.isHorizontal() ? \"width\" : \"height\"] = \"\".concat(bulletSize * (params.dynamicMainBullets + 4), \"px\");\n                });\n                if (params.dynamicMainBullets > 1 && previousIndex !== undefined) {\n                    dynamicBulletIndex += current - (previousIndex || 0);\n                    if (dynamicBulletIndex > params.dynamicMainBullets - 1) {\n                        dynamicBulletIndex = params.dynamicMainBullets - 1;\n                    } else if (dynamicBulletIndex < 0) {\n                        dynamicBulletIndex = 0;\n                    }\n                }\n                firstIndex = Math.max(current - dynamicBulletIndex, 0);\n                lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);\n                midIndex = (lastIndex + firstIndex) / 2;\n            }\n            bullets.forEach((bulletEl)=>{\n                const classesToRemove = [\n                    ...[\n                        \"\",\n                        \"-next\",\n                        \"-next-next\",\n                        \"-prev\",\n                        \"-prev-prev\",\n                        \"-main\"\n                    ].map((suffix)=>\"\".concat(params.bulletActiveClass).concat(suffix))\n                ].map((s)=>typeof s === \"string\" && s.includes(\" \") ? s.split(\" \") : s).flat();\n                bulletEl.classList.remove(...classesToRemove);\n            });\n            if (el.length > 1) {\n                bullets.forEach((bullet)=>{\n                    const bulletIndex = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.i)(bullet);\n                    if (bulletIndex === current) {\n                        bullet.classList.add(...params.bulletActiveClass.split(\" \"));\n                    } else if (swiper.isElement) {\n                        bullet.setAttribute(\"part\", \"bullet\");\n                    }\n                    if (params.dynamicBullets) {\n                        if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {\n                            bullet.classList.add(...\"\".concat(params.bulletActiveClass, \"-main\").split(\" \"));\n                        }\n                        if (bulletIndex === firstIndex) {\n                            setSideBullets(bullet, \"prev\");\n                        }\n                        if (bulletIndex === lastIndex) {\n                            setSideBullets(bullet, \"next\");\n                        }\n                    }\n                });\n            } else {\n                const bullet = bullets[current];\n                if (bullet) {\n                    bullet.classList.add(...params.bulletActiveClass.split(\" \"));\n                }\n                if (swiper.isElement) {\n                    bullets.forEach((bulletEl, bulletIndex)=>{\n                        bulletEl.setAttribute(\"part\", bulletIndex === current ? \"bullet-active\" : \"bullet\");\n                    });\n                }\n                if (params.dynamicBullets) {\n                    const firstDisplayedBullet = bullets[firstIndex];\n                    const lastDisplayedBullet = bullets[lastIndex];\n                    for(let i = firstIndex; i <= lastIndex; i += 1){\n                        if (bullets[i]) {\n                            bullets[i].classList.add(...\"\".concat(params.bulletActiveClass, \"-main\").split(\" \"));\n                        }\n                    }\n                    setSideBullets(firstDisplayedBullet, \"prev\");\n                    setSideBullets(lastDisplayedBullet, \"next\");\n                }\n            }\n            if (params.dynamicBullets) {\n                const dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);\n                const bulletsOffset = (bulletSize * dynamicBulletsLength - bulletSize) / 2 - midIndex * bulletSize;\n                const offsetProp = rtl ? \"right\" : \"left\";\n                bullets.forEach((bullet)=>{\n                    bullet.style[swiper.isHorizontal() ? offsetProp : \"top\"] = \"\".concat(bulletsOffset, \"px\");\n                });\n            }\n        }\n        el.forEach((subEl, subElIndex)=>{\n            if (params.type === \"fraction\") {\n                subEl.querySelectorAll((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(params.currentClass)).forEach((fractionEl)=>{\n                    fractionEl.textContent = params.formatFractionCurrent(current + 1);\n                });\n                subEl.querySelectorAll((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(params.totalClass)).forEach((totalEl)=>{\n                    totalEl.textContent = params.formatFractionTotal(total);\n                });\n            }\n            if (params.type === \"progressbar\") {\n                let progressbarDirection;\n                if (params.progressbarOpposite) {\n                    progressbarDirection = swiper.isHorizontal() ? \"vertical\" : \"horizontal\";\n                } else {\n                    progressbarDirection = swiper.isHorizontal() ? \"horizontal\" : \"vertical\";\n                }\n                const scale = (current + 1) / total;\n                let scaleX = 1;\n                let scaleY = 1;\n                if (progressbarDirection === \"horizontal\") {\n                    scaleX = scale;\n                } else {\n                    scaleY = scale;\n                }\n                subEl.querySelectorAll((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(params.progressbarFillClass)).forEach((progressEl)=>{\n                    progressEl.style.transform = \"translate3d(0,0,0) scaleX(\".concat(scaleX, \") scaleY(\").concat(scaleY, \")\");\n                    progressEl.style.transitionDuration = \"\".concat(swiper.params.speed, \"ms\");\n                });\n            }\n            if (params.type === \"custom\" && params.renderCustom) {\n                (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.s)(subEl, params.renderCustom(swiper, current + 1, total));\n                if (subElIndex === 0) emit(\"paginationRender\", subEl);\n            } else {\n                if (subElIndex === 0) emit(\"paginationRender\", subEl);\n                emit(\"paginationUpdate\", subEl);\n            }\n            if (swiper.params.watchOverflow && swiper.enabled) {\n                subEl.classList[swiper.isLocked ? \"add\" : \"remove\"](params.lockClass);\n            }\n        });\n    }\n    function render() {\n        // Render Container\n        const params = swiper.params.pagination;\n        if (isPaginationDisabled()) return;\n        const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.grid && swiper.params.grid.rows > 1 ? swiper.slides.length / Math.ceil(swiper.params.grid.rows) : swiper.slides.length;\n        let el = swiper.pagination.el;\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        let paginationHTML = \"\";\n        if (params.type === \"bullets\") {\n            let numberOfBullets = swiper.params.loop ? Math.ceil(slidesLength / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\n            if (swiper.params.freeMode && swiper.params.freeMode.enabled && numberOfBullets > slidesLength) {\n                numberOfBullets = slidesLength;\n            }\n            for(let i = 0; i < numberOfBullets; i += 1){\n                if (params.renderBullet) {\n                    paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);\n                } else {\n                    // prettier-ignore\n                    paginationHTML += \"<\".concat(params.bulletElement, \" \").concat(swiper.isElement ? 'part=\"bullet\"' : \"\", ' class=\"').concat(params.bulletClass, '\"></').concat(params.bulletElement, \">\");\n                }\n            }\n        }\n        if (params.type === \"fraction\") {\n            if (params.renderFraction) {\n                paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);\n            } else {\n                paginationHTML = '<span class=\"'.concat(params.currentClass, '\"></span>') + \" / \" + '<span class=\"'.concat(params.totalClass, '\"></span>');\n            }\n        }\n        if (params.type === \"progressbar\") {\n            if (params.renderProgressbar) {\n                paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);\n            } else {\n                paginationHTML = '<span class=\"'.concat(params.progressbarFillClass, '\"></span>');\n            }\n        }\n        swiper.pagination.bullets = [];\n        el.forEach((subEl)=>{\n            if (params.type !== \"custom\") {\n                (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.s)(subEl, paginationHTML || \"\");\n            }\n            if (params.type === \"bullets\") {\n                swiper.pagination.bullets.push(...subEl.querySelectorAll((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(params.bulletClass)));\n            }\n        });\n        if (params.type !== \"custom\") {\n            emit(\"paginationRender\", el[0]);\n        }\n    }\n    function init() {\n        swiper.params.pagination = (0,_shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(swiper, swiper.originalParams.pagination, swiper.params.pagination, {\n            el: \"swiper-pagination\"\n        });\n        const params = swiper.params.pagination;\n        if (!params.el) return;\n        let el;\n        if (typeof params.el === \"string\" && swiper.isElement) {\n            el = swiper.el.querySelector(params.el);\n        }\n        if (!el && typeof params.el === \"string\") {\n            el = [\n                ...document.querySelectorAll(params.el)\n            ];\n        }\n        if (!el) {\n            el = params.el;\n        }\n        if (!el || el.length === 0) return;\n        if (swiper.params.uniqueNavElements && typeof params.el === \"string\" && Array.isArray(el) && el.length > 1) {\n            el = [\n                ...swiper.el.querySelectorAll(params.el)\n            ];\n            // check if it belongs to another nested Swiper\n            if (el.length > 1) {\n                el = el.find((subEl)=>{\n                    if ((0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.b)(subEl, \".swiper\")[0] !== swiper.el) return false;\n                    return true;\n                });\n            }\n        }\n        if (Array.isArray(el) && el.length === 1) el = el[0];\n        Object.assign(swiper.pagination, {\n            el\n        });\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        el.forEach((subEl)=>{\n            if (params.type === \"bullets\" && params.clickable) {\n                subEl.classList.add(...(params.clickableClass || \"\").split(\" \"));\n            }\n            subEl.classList.add(params.modifierClass + params.type);\n            subEl.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n            if (params.type === \"bullets\" && params.dynamicBullets) {\n                subEl.classList.add(\"\".concat(params.modifierClass).concat(params.type, \"-dynamic\"));\n                dynamicBulletIndex = 0;\n                if (params.dynamicMainBullets < 1) {\n                    params.dynamicMainBullets = 1;\n                }\n            }\n            if (params.type === \"progressbar\" && params.progressbarOpposite) {\n                subEl.classList.add(params.progressbarOppositeClass);\n            }\n            if (params.clickable) {\n                subEl.addEventListener(\"click\", onBulletClick);\n            }\n            if (!swiper.enabled) {\n                subEl.classList.add(params.lockClass);\n            }\n        });\n    }\n    function destroy() {\n        const params = swiper.params.pagination;\n        if (isPaginationDisabled()) return;\n        let el = swiper.pagination.el;\n        if (el) {\n            el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n            el.forEach((subEl)=>{\n                subEl.classList.remove(params.hiddenClass);\n                subEl.classList.remove(params.modifierClass + params.type);\n                subEl.classList.remove(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n                if (params.clickable) {\n                    subEl.classList.remove(...(params.clickableClass || \"\").split(\" \"));\n                    subEl.removeEventListener(\"click\", onBulletClick);\n                }\n            });\n        }\n        if (swiper.pagination.bullets) swiper.pagination.bullets.forEach((subEl)=>subEl.classList.remove(...params.bulletActiveClass.split(\" \")));\n    }\n    on(\"changeDirection\", ()=>{\n        if (!swiper.pagination || !swiper.pagination.el) return;\n        const params = swiper.params.pagination;\n        let { el } = swiper.pagination;\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        el.forEach((subEl)=>{\n            subEl.classList.remove(params.horizontalClass, params.verticalClass);\n            subEl.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n        });\n    });\n    on(\"init\", ()=>{\n        if (swiper.params.pagination.enabled === false) {\n            // eslint-disable-next-line\n            disable();\n        } else {\n            init();\n            render();\n            update();\n        }\n    });\n    on(\"activeIndexChange\", ()=>{\n        if (typeof swiper.snapIndex === \"undefined\") {\n            update();\n        }\n    });\n    on(\"snapIndexChange\", ()=>{\n        update();\n    });\n    on(\"snapGridLengthChange\", ()=>{\n        render();\n        update();\n    });\n    on(\"destroy\", ()=>{\n        destroy();\n    });\n    on(\"enable disable\", ()=>{\n        let { el } = swiper.pagination;\n        if (el) {\n            el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n            el.forEach((subEl)=>subEl.classList[swiper.enabled ? \"remove\" : \"add\"](swiper.params.pagination.lockClass));\n        }\n    });\n    on(\"lock unlock\", ()=>{\n        update();\n    });\n    on(\"click\", (_s, e)=>{\n        const targetEl = e.target;\n        const el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(swiper.pagination.el);\n        if (swiper.params.pagination.el && swiper.params.pagination.hideOnClick && el && el.length > 0 && !targetEl.classList.contains(swiper.params.pagination.bulletClass)) {\n            if (swiper.navigation && (swiper.navigation.nextEl && targetEl === swiper.navigation.nextEl || swiper.navigation.prevEl && targetEl === swiper.navigation.prevEl)) return;\n            const isHidden = el[0].classList.contains(swiper.params.pagination.hiddenClass);\n            if (isHidden === true) {\n                emit(\"paginationShow\");\n            } else {\n                emit(\"paginationHide\");\n            }\n            el.forEach((subEl)=>subEl.classList.toggle(swiper.params.pagination.hiddenClass));\n        }\n    });\n    const enable = ()=>{\n        swiper.el.classList.remove(swiper.params.pagination.paginationDisabledClass);\n        let { el } = swiper.pagination;\n        if (el) {\n            el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n            el.forEach((subEl)=>subEl.classList.remove(swiper.params.pagination.paginationDisabledClass));\n        }\n        init();\n        render();\n        update();\n    };\n    const disable = ()=>{\n        swiper.el.classList.add(swiper.params.pagination.paginationDisabledClass);\n        let { el } = swiper.pagination;\n        if (el) {\n            el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n            el.forEach((subEl)=>subEl.classList.add(swiper.params.pagination.paginationDisabledClass));\n        }\n        destroy();\n    };\n    Object.assign(swiper.pagination, {\n        enable,\n        disable,\n        render,\n        update,\n        init,\n        destroy\n    });\n}\n_c = Pagination;\n\nvar _c;\n$RefreshReg$(_c, \"Pagination\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/pagination.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/parallax.mjs":
/*!**************************************************!*\
  !*** ./node_modules/swiper/modules/parallax.mjs ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Parallax; }\n/* harmony export */ });\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n\nfunction Parallax(_ref) {\n    let { swiper, extendParams, on } = _ref;\n    extendParams({\n        parallax: {\n            enabled: false\n        }\n    });\n    const elementsSelector = \"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\";\n    const setTransform = (el, progress)=>{\n        const { rtl } = swiper;\n        const rtlFactor = rtl ? -1 : 1;\n        const p = el.getAttribute(\"data-swiper-parallax\") || \"0\";\n        let x = el.getAttribute(\"data-swiper-parallax-x\");\n        let y = el.getAttribute(\"data-swiper-parallax-y\");\n        const scale = el.getAttribute(\"data-swiper-parallax-scale\");\n        const opacity = el.getAttribute(\"data-swiper-parallax-opacity\");\n        const rotate = el.getAttribute(\"data-swiper-parallax-rotate\");\n        if (x || y) {\n            x = x || \"0\";\n            y = y || \"0\";\n        } else if (swiper.isHorizontal()) {\n            x = p;\n            y = \"0\";\n        } else {\n            y = p;\n            x = \"0\";\n        }\n        if (x.indexOf(\"%\") >= 0) {\n            x = \"\".concat(parseInt(x, 10) * progress * rtlFactor, \"%\");\n        } else {\n            x = \"\".concat(x * progress * rtlFactor, \"px\");\n        }\n        if (y.indexOf(\"%\") >= 0) {\n            y = \"\".concat(parseInt(y, 10) * progress, \"%\");\n        } else {\n            y = \"\".concat(y * progress, \"px\");\n        }\n        if (typeof opacity !== \"undefined\" && opacity !== null) {\n            const currentOpacity = opacity - (opacity - 1) * (1 - Math.abs(progress));\n            el.style.opacity = currentOpacity;\n        }\n        let transform = \"translate3d(\".concat(x, \", \").concat(y, \", 0px)\");\n        if (typeof scale !== \"undefined\" && scale !== null) {\n            const currentScale = scale - (scale - 1) * (1 - Math.abs(progress));\n            transform += \" scale(\".concat(currentScale, \")\");\n        }\n        if (rotate && typeof rotate !== \"undefined\" && rotate !== null) {\n            const currentRotate = rotate * progress * -1;\n            transform += \" rotate(\".concat(currentRotate, \"deg)\");\n        }\n        el.style.transform = transform;\n    };\n    const setTranslate = ()=>{\n        const { el, slides, progress, snapGrid, isElement } = swiper;\n        const elements = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(el, elementsSelector);\n        if (swiper.isElement) {\n            elements.push(...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(swiper.hostEl, elementsSelector));\n        }\n        elements.forEach((subEl)=>{\n            setTransform(subEl, progress);\n        });\n        slides.forEach((slideEl, slideIndex)=>{\n            let slideProgress = slideEl.progress;\n            if (swiper.params.slidesPerGroup > 1 && swiper.params.slidesPerView !== \"auto\") {\n                slideProgress += Math.ceil(slideIndex / 2) - progress * (snapGrid.length - 1);\n            }\n            slideProgress = Math.min(Math.max(slideProgress, -1), 1);\n            slideEl.querySelectorAll(\"\".concat(elementsSelector, \", [data-swiper-parallax-rotate]\")).forEach((subEl)=>{\n                setTransform(subEl, slideProgress);\n            });\n        });\n    };\n    const setTransition = function(duration) {\n        if (duration === void 0) {\n            duration = swiper.params.speed;\n        }\n        const { el, hostEl } = swiper;\n        const elements = [\n            ...el.querySelectorAll(elementsSelector)\n        ];\n        if (swiper.isElement) {\n            elements.push(...hostEl.querySelectorAll(elementsSelector));\n        }\n        elements.forEach((parallaxEl)=>{\n            let parallaxDuration = parseInt(parallaxEl.getAttribute(\"data-swiper-parallax-duration\"), 10) || duration;\n            if (duration === 0) parallaxDuration = 0;\n            parallaxEl.style.transitionDuration = \"\".concat(parallaxDuration, \"ms\");\n        });\n    };\n    on(\"beforeInit\", ()=>{\n        if (!swiper.params.parallax.enabled) return;\n        swiper.params.watchSlidesProgress = true;\n        swiper.originalParams.watchSlidesProgress = true;\n    });\n    on(\"init\", ()=>{\n        if (!swiper.params.parallax.enabled) return;\n        setTranslate();\n    });\n    on(\"setTranslate\", ()=>{\n        if (!swiper.params.parallax.enabled) return;\n        setTranslate();\n    });\n    on(\"setTransition\", (_swiper, duration)=>{\n        if (!swiper.params.parallax.enabled) return;\n        setTransition(duration);\n    });\n}\n_c = Parallax;\n\nvar _c;\n$RefreshReg$(_c, \"Parallax\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/parallax.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/scrollbar.mjs":
/*!***************************************************!*\
  !*** ./node_modules/swiper/modules/scrollbar.mjs ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Scrollbar; }\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n/* harmony import */ var _shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/create-element-if-not-defined.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/create-element-if-not-defined.mjs\");\n/* harmony import */ var _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/classes-to-selector.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/classes-to-selector.mjs\");\n\n\n\n\nfunction Scrollbar(_ref) {\n    let { swiper, extendParams, on, emit } = _ref;\n    const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    let isTouched = false;\n    let timeout = null;\n    let dragTimeout = null;\n    let dragStartPos;\n    let dragSize;\n    let trackSize;\n    let divider;\n    extendParams({\n        scrollbar: {\n            el: null,\n            dragSize: \"auto\",\n            hide: false,\n            draggable: false,\n            snapOnRelease: true,\n            lockClass: \"swiper-scrollbar-lock\",\n            dragClass: \"swiper-scrollbar-drag\",\n            scrollbarDisabledClass: \"swiper-scrollbar-disabled\",\n            horizontalClass: \"swiper-scrollbar-horizontal\",\n            verticalClass: \"swiper-scrollbar-vertical\"\n        }\n    });\n    swiper.scrollbar = {\n        el: null,\n        dragEl: null\n    };\n    function setTranslate() {\n        if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n        const { scrollbar, rtlTranslate: rtl } = swiper;\n        const { dragEl, el } = scrollbar;\n        const params = swiper.params.scrollbar;\n        const progress = swiper.params.loop ? swiper.progressLoop : swiper.progress;\n        let newSize = dragSize;\n        let newPos = (trackSize - dragSize) * progress;\n        if (rtl) {\n            newPos = -newPos;\n            if (newPos > 0) {\n                newSize = dragSize - newPos;\n                newPos = 0;\n            } else if (-newPos + dragSize > trackSize) {\n                newSize = trackSize + newPos;\n            }\n        } else if (newPos < 0) {\n            newSize = dragSize + newPos;\n            newPos = 0;\n        } else if (newPos + dragSize > trackSize) {\n            newSize = trackSize - newPos;\n        }\n        if (swiper.isHorizontal()) {\n            dragEl.style.transform = \"translate3d(\".concat(newPos, \"px, 0, 0)\");\n            dragEl.style.width = \"\".concat(newSize, \"px\");\n        } else {\n            dragEl.style.transform = \"translate3d(0px, \".concat(newPos, \"px, 0)\");\n            dragEl.style.height = \"\".concat(newSize, \"px\");\n        }\n        if (params.hide) {\n            clearTimeout(timeout);\n            el.style.opacity = 1;\n            timeout = setTimeout(()=>{\n                el.style.opacity = 0;\n                el.style.transitionDuration = \"400ms\";\n            }, 1000);\n        }\n    }\n    function setTransition(duration) {\n        if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n        swiper.scrollbar.dragEl.style.transitionDuration = \"\".concat(duration, \"ms\");\n    }\n    function updateSize() {\n        if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n        const { scrollbar } = swiper;\n        const { dragEl, el } = scrollbar;\n        dragEl.style.width = \"\";\n        dragEl.style.height = \"\";\n        trackSize = swiper.isHorizontal() ? el.offsetWidth : el.offsetHeight;\n        divider = swiper.size / (swiper.virtualSize + swiper.params.slidesOffsetBefore - (swiper.params.centeredSlides ? swiper.snapGrid[0] : 0));\n        if (swiper.params.scrollbar.dragSize === \"auto\") {\n            dragSize = trackSize * divider;\n        } else {\n            dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);\n        }\n        if (swiper.isHorizontal()) {\n            dragEl.style.width = \"\".concat(dragSize, \"px\");\n        } else {\n            dragEl.style.height = \"\".concat(dragSize, \"px\");\n        }\n        if (divider >= 1) {\n            el.style.display = \"none\";\n        } else {\n            el.style.display = \"\";\n        }\n        if (swiper.params.scrollbar.hide) {\n            el.style.opacity = 0;\n        }\n        if (swiper.params.watchOverflow && swiper.enabled) {\n            scrollbar.el.classList[swiper.isLocked ? \"add\" : \"remove\"](swiper.params.scrollbar.lockClass);\n        }\n    }\n    function getPointerPosition(e) {\n        return swiper.isHorizontal() ? e.clientX : e.clientY;\n    }\n    function setDragPosition(e) {\n        const { scrollbar, rtlTranslate: rtl } = swiper;\n        const { el } = scrollbar;\n        let positionRatio;\n        positionRatio = (getPointerPosition(e) - (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(el)[swiper.isHorizontal() ? \"left\" : \"top\"] - (dragStartPos !== null ? dragStartPos : dragSize / 2)) / (trackSize - dragSize);\n        positionRatio = Math.max(Math.min(positionRatio, 1), 0);\n        if (rtl) {\n            positionRatio = 1 - positionRatio;\n        }\n        const position = swiper.minTranslate() + (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;\n        swiper.updateProgress(position);\n        swiper.setTranslate(position);\n        swiper.updateActiveIndex();\n        swiper.updateSlidesClasses();\n    }\n    function onDragStart(e) {\n        const params = swiper.params.scrollbar;\n        const { scrollbar, wrapperEl } = swiper;\n        const { el, dragEl } = scrollbar;\n        isTouched = true;\n        dragStartPos = e.target === dragEl ? getPointerPosition(e) - e.target.getBoundingClientRect()[swiper.isHorizontal() ? \"left\" : \"top\"] : null;\n        e.preventDefault();\n        e.stopPropagation();\n        wrapperEl.style.transitionDuration = \"100ms\";\n        dragEl.style.transitionDuration = \"100ms\";\n        setDragPosition(e);\n        clearTimeout(dragTimeout);\n        el.style.transitionDuration = \"0ms\";\n        if (params.hide) {\n            el.style.opacity = 1;\n        }\n        if (swiper.params.cssMode) {\n            swiper.wrapperEl.style[\"scroll-snap-type\"] = \"none\";\n        }\n        emit(\"scrollbarDragStart\", e);\n    }\n    function onDragMove(e) {\n        const { scrollbar, wrapperEl } = swiper;\n        const { el, dragEl } = scrollbar;\n        if (!isTouched) return;\n        if (e.preventDefault && e.cancelable) e.preventDefault();\n        else e.returnValue = false;\n        setDragPosition(e);\n        wrapperEl.style.transitionDuration = \"0ms\";\n        el.style.transitionDuration = \"0ms\";\n        dragEl.style.transitionDuration = \"0ms\";\n        emit(\"scrollbarDragMove\", e);\n    }\n    function onDragEnd(e) {\n        const params = swiper.params.scrollbar;\n        const { scrollbar, wrapperEl } = swiper;\n        const { el } = scrollbar;\n        if (!isTouched) return;\n        isTouched = false;\n        if (swiper.params.cssMode) {\n            swiper.wrapperEl.style[\"scroll-snap-type\"] = \"\";\n            wrapperEl.style.transitionDuration = \"\";\n        }\n        if (params.hide) {\n            clearTimeout(dragTimeout);\n            dragTimeout = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(()=>{\n                el.style.opacity = 0;\n                el.style.transitionDuration = \"400ms\";\n            }, 1000);\n        }\n        emit(\"scrollbarDragEnd\", e);\n        if (params.snapOnRelease) {\n            swiper.slideToClosest();\n        }\n    }\n    function events(method) {\n        const { scrollbar, params } = swiper;\n        const el = scrollbar.el;\n        if (!el) return;\n        const target = el;\n        const activeListener = params.passiveListeners ? {\n            passive: false,\n            capture: false\n        } : false;\n        const passiveListener = params.passiveListeners ? {\n            passive: true,\n            capture: false\n        } : false;\n        if (!target) return;\n        const eventMethod = method === \"on\" ? \"addEventListener\" : \"removeEventListener\";\n        target[eventMethod](\"pointerdown\", onDragStart, activeListener);\n        document[eventMethod](\"pointermove\", onDragMove, activeListener);\n        document[eventMethod](\"pointerup\", onDragEnd, passiveListener);\n    }\n    function enableDraggable() {\n        if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n        events(\"on\");\n    }\n    function disableDraggable() {\n        if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n        events(\"off\");\n    }\n    function init() {\n        const { scrollbar, el: swiperEl } = swiper;\n        swiper.params.scrollbar = (0,_shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_2__.c)(swiper, swiper.originalParams.scrollbar, swiper.params.scrollbar, {\n            el: \"swiper-scrollbar\"\n        });\n        const params = swiper.params.scrollbar;\n        if (!params.el) return;\n        let el;\n        if (typeof params.el === \"string\" && swiper.isElement) {\n            el = swiper.el.querySelector(params.el);\n        }\n        if (!el && typeof params.el === \"string\") {\n            el = document.querySelectorAll(params.el);\n            if (!el.length) return;\n        } else if (!el) {\n            el = params.el;\n        }\n        if (swiper.params.uniqueNavElements && typeof params.el === \"string\" && el.length > 1 && swiperEl.querySelectorAll(params.el).length === 1) {\n            el = swiperEl.querySelector(params.el);\n        }\n        if (el.length > 0) el = el[0];\n        el.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n        let dragEl;\n        if (el) {\n            dragEl = el.querySelector((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_3__.c)(swiper.params.scrollbar.dragClass));\n            if (!dragEl) {\n                dragEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"div\", swiper.params.scrollbar.dragClass);\n                el.append(dragEl);\n            }\n        }\n        Object.assign(scrollbar, {\n            el,\n            dragEl\n        });\n        if (params.draggable) {\n            enableDraggable();\n        }\n        if (el) {\n            el.classList[swiper.enabled ? \"remove\" : \"add\"](...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(swiper.params.scrollbar.lockClass));\n        }\n    }\n    function destroy() {\n        const params = swiper.params.scrollbar;\n        const el = swiper.scrollbar.el;\n        if (el) {\n            el.classList.remove(...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass));\n        }\n        disableDraggable();\n    }\n    on(\"changeDirection\", ()=>{\n        if (!swiper.scrollbar || !swiper.scrollbar.el) return;\n        const params = swiper.params.scrollbar;\n        let { el } = swiper.scrollbar;\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(el);\n        el.forEach((subEl)=>{\n            subEl.classList.remove(params.horizontalClass, params.verticalClass);\n            subEl.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n        });\n    });\n    on(\"init\", ()=>{\n        if (swiper.params.scrollbar.enabled === false) {\n            // eslint-disable-next-line\n            disable();\n        } else {\n            init();\n            updateSize();\n            setTranslate();\n        }\n    });\n    on(\"update resize observerUpdate lock unlock changeDirection\", ()=>{\n        updateSize();\n    });\n    on(\"setTranslate\", ()=>{\n        setTranslate();\n    });\n    on(\"setTransition\", (_s, duration)=>{\n        setTransition(duration);\n    });\n    on(\"enable disable\", ()=>{\n        const { el } = swiper.scrollbar;\n        if (el) {\n            el.classList[swiper.enabled ? \"remove\" : \"add\"](...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(swiper.params.scrollbar.lockClass));\n        }\n    });\n    on(\"destroy\", ()=>{\n        destroy();\n    });\n    const enable = ()=>{\n        swiper.el.classList.remove(...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(swiper.params.scrollbar.scrollbarDisabledClass));\n        if (swiper.scrollbar.el) {\n            swiper.scrollbar.el.classList.remove(...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(swiper.params.scrollbar.scrollbarDisabledClass));\n        }\n        init();\n        updateSize();\n        setTranslate();\n    };\n    const disable = ()=>{\n        swiper.el.classList.add(...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(swiper.params.scrollbar.scrollbarDisabledClass));\n        if (swiper.scrollbar.el) {\n            swiper.scrollbar.el.classList.add(...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(swiper.params.scrollbar.scrollbarDisabledClass));\n        }\n        destroy();\n    };\n    Object.assign(swiper.scrollbar, {\n        enable,\n        disable,\n        updateSize,\n        setTranslate,\n        init,\n        destroy\n    });\n}\n_c = Scrollbar;\n\nvar _c;\n$RefreshReg$(_c, \"Scrollbar\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9zY3JvbGxiYXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQWdFO0FBQzBFO0FBQzdDO0FBQ2xCO0FBRTNFLFNBQVNjLFVBQVVDLElBQUk7SUFDckIsSUFBSSxFQUNGQyxNQUFNLEVBQ05DLFlBQVksRUFDWkMsRUFBRSxFQUNGQyxJQUFJLEVBQ0wsR0FBR0o7SUFDSixNQUFNSyxXQUFXbkIsNkRBQVdBO0lBQzVCLElBQUlvQixZQUFZO0lBQ2hCLElBQUlDLFVBQVU7SUFDZCxJQUFJQyxjQUFjO0lBQ2xCLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0pWLGFBQWE7UUFDWFcsV0FBVztZQUNUQyxJQUFJO1lBQ0pKLFVBQVU7WUFDVkssTUFBTTtZQUNOQyxXQUFXO1lBQ1hDLGVBQWU7WUFDZkMsV0FBVztZQUNYQyxXQUFXO1lBQ1hDLHdCQUF3QjtZQUN4QkMsaUJBQWtCO1lBQ2xCQyxlQUFnQjtRQUNsQjtJQUNGO0lBQ0FyQixPQUFPWSxTQUFTLEdBQUc7UUFDakJDLElBQUk7UUFDSlMsUUFBUTtJQUNWO0lBQ0EsU0FBU0M7UUFDUCxJQUFJLENBQUN2QixPQUFPd0IsTUFBTSxDQUFDWixTQUFTLENBQUNDLEVBQUUsSUFBSSxDQUFDYixPQUFPWSxTQUFTLENBQUNDLEVBQUUsRUFBRTtRQUN6RCxNQUFNLEVBQ0pELFNBQVMsRUFDVGEsY0FBY0MsR0FBRyxFQUNsQixHQUFHMUI7UUFDSixNQUFNLEVBQ0pzQixNQUFNLEVBQ05ULEVBQUUsRUFDSCxHQUFHRDtRQUNKLE1BQU1ZLFNBQVN4QixPQUFPd0IsTUFBTSxDQUFDWixTQUFTO1FBQ3RDLE1BQU1lLFdBQVczQixPQUFPd0IsTUFBTSxDQUFDSSxJQUFJLEdBQUc1QixPQUFPNkIsWUFBWSxHQUFHN0IsT0FBTzJCLFFBQVE7UUFDM0UsSUFBSUcsVUFBVXJCO1FBQ2QsSUFBSXNCLFNBQVMsQ0FBQ3JC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QUU7UUFDOUJvRztRQUNBRjtRQUNBbkU7UUFDQXBCO1FBQ0F1RTtRQUNBWTtJQUNGO0FBQ0Y7S0F0V1M1RztBQXdXdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL3Njcm9sbGJhci5tanM/ODhlOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnIGFzIGdldERvY3VtZW50IH0gZnJvbSAnLi4vc2hhcmVkL3Nzci13aW5kb3cuZXNtLm1qcyc7XG5pbXBvcnQgeyBtIGFzIG1ha2VFbGVtZW50c0FycmF5LCBqIGFzIGNsYXNzZXNUb1Rva2VucywgYyBhcyBjcmVhdGVFbGVtZW50LCBuIGFzIG5leHRUaWNrLCBkIGFzIGVsZW1lbnRPZmZzZXQgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMubWpzJztcbmltcG9ydCB7IGMgYXMgY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCB9IGZyb20gJy4uL3NoYXJlZC9jcmVhdGUtZWxlbWVudC1pZi1ub3QtZGVmaW5lZC5tanMnO1xuaW1wb3J0IHsgYyBhcyBjbGFzc2VzVG9TZWxlY3RvciB9IGZyb20gJy4uL3NoYXJlZC9jbGFzc2VzLXRvLXNlbGVjdG9yLm1qcyc7XG5cbmZ1bmN0aW9uIFNjcm9sbGJhcihfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIGV4dGVuZFBhcmFtcyxcbiAgICBvbixcbiAgICBlbWl0XG4gIH0gPSBfcmVmO1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGxldCBpc1RvdWNoZWQgPSBmYWxzZTtcbiAgbGV0IHRpbWVvdXQgPSBudWxsO1xuICBsZXQgZHJhZ1RpbWVvdXQgPSBudWxsO1xuICBsZXQgZHJhZ1N0YXJ0UG9zO1xuICBsZXQgZHJhZ1NpemU7XG4gIGxldCB0cmFja1NpemU7XG4gIGxldCBkaXZpZGVyO1xuICBleHRlbmRQYXJhbXMoe1xuICAgIHNjcm9sbGJhcjoge1xuICAgICAgZWw6IG51bGwsXG4gICAgICBkcmFnU2l6ZTogJ2F1dG8nLFxuICAgICAgaGlkZTogZmFsc2UsXG4gICAgICBkcmFnZ2FibGU6IGZhbHNlLFxuICAgICAgc25hcE9uUmVsZWFzZTogdHJ1ZSxcbiAgICAgIGxvY2tDbGFzczogJ3N3aXBlci1zY3JvbGxiYXItbG9jaycsXG4gICAgICBkcmFnQ2xhc3M6ICdzd2lwZXItc2Nyb2xsYmFyLWRyYWcnLFxuICAgICAgc2Nyb2xsYmFyRGlzYWJsZWRDbGFzczogJ3N3aXBlci1zY3JvbGxiYXItZGlzYWJsZWQnLFxuICAgICAgaG9yaXpvbnRhbENsYXNzOiBgc3dpcGVyLXNjcm9sbGJhci1ob3Jpem9udGFsYCxcbiAgICAgIHZlcnRpY2FsQ2xhc3M6IGBzd2lwZXItc2Nyb2xsYmFyLXZlcnRpY2FsYFxuICAgIH1cbiAgfSk7XG4gIHN3aXBlci5zY3JvbGxiYXIgPSB7XG4gICAgZWw6IG51bGwsXG4gICAgZHJhZ0VsOiBudWxsXG4gIH07XG4gIGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgY29uc3Qge1xuICAgICAgc2Nyb2xsYmFyLFxuICAgICAgcnRsVHJhbnNsYXRlOiBydGxcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHtcbiAgICAgIGRyYWdFbCxcbiAgICAgIGVsXG4gICAgfSA9IHNjcm9sbGJhcjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcbiAgICBjb25zdCBwcm9ncmVzcyA9IHN3aXBlci5wYXJhbXMubG9vcCA/IHN3aXBlci5wcm9ncmVzc0xvb3AgOiBzd2lwZXIucHJvZ3Jlc3M7XG4gICAgbGV0IG5ld1NpemUgPSBkcmFnU2l6ZTtcbiAgICBsZXQgbmV3UG9zID0gKHRyYWNrU2l6ZSAtIGRyYWdTaXplKSAqIHByb2dyZXNzO1xuICAgIGlmIChydGwpIHtcbiAgICAgIG5ld1BvcyA9IC1uZXdQb3M7XG4gICAgICBpZiAobmV3UG9zID4gMCkge1xuICAgICAgICBuZXdTaXplID0gZHJhZ1NpemUgLSBuZXdQb3M7XG4gICAgICAgIG5ld1BvcyA9IDA7XG4gICAgICB9IGVsc2UgaWYgKC1uZXdQb3MgKyBkcmFnU2l6ZSA+IHRyYWNrU2l6ZSkge1xuICAgICAgICBuZXdTaXplID0gdHJhY2tTaXplICsgbmV3UG9zO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobmV3UG9zIDwgMCkge1xuICAgICAgbmV3U2l6ZSA9IGRyYWdTaXplICsgbmV3UG9zO1xuICAgICAgbmV3UG9zID0gMDtcbiAgICB9IGVsc2UgaWYgKG5ld1BvcyArIGRyYWdTaXplID4gdHJhY2tTaXplKSB7XG4gICAgICBuZXdTaXplID0gdHJhY2tTaXplIC0gbmV3UG9zO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICBkcmFnRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7bmV3UG9zfXB4LCAwLCAwKWA7XG4gICAgICBkcmFnRWwuc3R5bGUud2lkdGggPSBgJHtuZXdTaXplfXB4YDtcbiAgICB9IGVsc2Uge1xuICAgICAgZHJhZ0VsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgwcHgsICR7bmV3UG9zfXB4LCAwKWA7XG4gICAgICBkcmFnRWwuc3R5bGUuaGVpZ2h0ID0gYCR7bmV3U2l6ZX1weGA7XG4gICAgfVxuICAgIGlmIChwYXJhbXMuaGlkZSkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgICAgICBlbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnNDAwbXMnO1xuICAgICAgfSwgMTAwMCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgc3dpcGVyLnNjcm9sbGJhci5kcmFnRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZVNpemUoKSB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCB8fCAhc3dpcGVyLnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IHtcbiAgICAgIHNjcm9sbGJhclxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3Qge1xuICAgICAgZHJhZ0VsLFxuICAgICAgZWxcbiAgICB9ID0gc2Nyb2xsYmFyO1xuICAgIGRyYWdFbC5zdHlsZS53aWR0aCA9ICcnO1xuICAgIGRyYWdFbC5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICB0cmFja1NpemUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBlbC5vZmZzZXRXaWR0aCA6IGVsLm9mZnNldEhlaWdodDtcbiAgICBkaXZpZGVyID0gc3dpcGVyLnNpemUgLyAoc3dpcGVyLnZpcnR1YWxTaXplICsgc3dpcGVyLnBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUgLSAoc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5zbmFwR3JpZFswXSA6IDApKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ1NpemUgPT09ICdhdXRvJykge1xuICAgICAgZHJhZ1NpemUgPSB0cmFja1NpemUgKiBkaXZpZGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBkcmFnU2l6ZSA9IHBhcnNlSW50KHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdTaXplLCAxMCk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIGRyYWdFbC5zdHlsZS53aWR0aCA9IGAke2RyYWdTaXplfXB4YDtcbiAgICB9IGVsc2Uge1xuICAgICAgZHJhZ0VsLnN0eWxlLmhlaWdodCA9IGAke2RyYWdTaXplfXB4YDtcbiAgICB9XG4gICAgaWYgKGRpdmlkZXIgPj0gMSkge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuaGlkZSkge1xuICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgIHNjcm9sbGJhci5lbC5jbGFzc0xpc3Rbc3dpcGVyLmlzTG9ja2VkID8gJ2FkZCcgOiAncmVtb3ZlJ10oc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIubG9ja0NsYXNzKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2V0UG9pbnRlclBvc2l0aW9uKGUpIHtcbiAgICByZXR1cm4gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gZS5jbGllbnRYIDogZS5jbGllbnRZO1xuICB9XG4gIGZ1bmN0aW9uIHNldERyYWdQb3NpdGlvbihlKSB7XG4gICAgY29uc3Qge1xuICAgICAgc2Nyb2xsYmFyLFxuICAgICAgcnRsVHJhbnNsYXRlOiBydGxcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHtcbiAgICAgIGVsXG4gICAgfSA9IHNjcm9sbGJhcjtcbiAgICBsZXQgcG9zaXRpb25SYXRpbztcbiAgICBwb3NpdGlvblJhdGlvID0gKGdldFBvaW50ZXJQb3NpdGlvbihlKSAtIGVsZW1lbnRPZmZzZXQoZWwpW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdsZWZ0JyA6ICd0b3AnXSAtIChkcmFnU3RhcnRQb3MgIT09IG51bGwgPyBkcmFnU3RhcnRQb3MgOiBkcmFnU2l6ZSAvIDIpKSAvICh0cmFja1NpemUgLSBkcmFnU2l6ZSk7XG4gICAgcG9zaXRpb25SYXRpbyA9IE1hdGgubWF4KE1hdGgubWluKHBvc2l0aW9uUmF0aW8sIDEpLCAwKTtcbiAgICBpZiAocnRsKSB7XG4gICAgICBwb3NpdGlvblJhdGlvID0gMSAtIHBvc2l0aW9uUmF0aW87XG4gICAgfVxuICAgIGNvbnN0IHBvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgKiBwb3NpdGlvblJhdGlvO1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhwb3NpdGlvbik7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShwb3NpdGlvbik7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgfVxuICBmdW5jdGlvbiBvbkRyYWdTdGFydChlKSB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXI7XG4gICAgY29uc3Qge1xuICAgICAgc2Nyb2xsYmFyLFxuICAgICAgd3JhcHBlckVsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCB7XG4gICAgICBlbCxcbiAgICAgIGRyYWdFbFxuICAgIH0gPSBzY3JvbGxiYXI7XG4gICAgaXNUb3VjaGVkID0gdHJ1ZTtcbiAgICBkcmFnU3RhcnRQb3MgPSBlLnRhcmdldCA9PT0gZHJhZ0VsID8gZ2V0UG9pbnRlclBvc2l0aW9uKGUpIC0gZS50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCddIDogbnVsbDtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB3cmFwcGVyRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzEwMG1zJztcbiAgICBkcmFnRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzEwMG1zJztcbiAgICBzZXREcmFnUG9zaXRpb24oZSk7XG4gICAgY2xlYXJUaW1lb3V0KGRyYWdUaW1lb3V0KTtcbiAgICBlbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMG1zJztcbiAgICBpZiAocGFyYW1zLmhpZGUpIHtcbiAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSAxO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlWydzY3JvbGwtc25hcC10eXBlJ10gPSAnbm9uZSc7XG4gICAgfVxuICAgIGVtaXQoJ3Njcm9sbGJhckRyYWdTdGFydCcsIGUpO1xuICB9XG4gIGZ1bmN0aW9uIG9uRHJhZ01vdmUoZSkge1xuICAgIGNvbnN0IHtcbiAgICAgIHNjcm9sbGJhcixcbiAgICAgIHdyYXBwZXJFbFxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3Qge1xuICAgICAgZWwsXG4gICAgICBkcmFnRWxcbiAgICB9ID0gc2Nyb2xsYmFyO1xuICAgIGlmICghaXNUb3VjaGVkKSByZXR1cm47XG4gICAgaWYgKGUucHJldmVudERlZmF1bHQgJiYgZS5jYW5jZWxhYmxlKSBlLnByZXZlbnREZWZhdWx0KCk7ZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgc2V0RHJhZ1Bvc2l0aW9uKGUpO1xuICAgIHdyYXBwZXJFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMG1zJztcbiAgICBlbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMG1zJztcbiAgICBkcmFnRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBtcyc7XG4gICAgZW1pdCgnc2Nyb2xsYmFyRHJhZ01vdmUnLCBlKTtcbiAgfVxuICBmdW5jdGlvbiBvbkRyYWdFbmQoZSkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgIGNvbnN0IHtcbiAgICAgIHNjcm9sbGJhcixcbiAgICAgIHdyYXBwZXJFbFxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3Qge1xuICAgICAgZWxcbiAgICB9ID0gc2Nyb2xsYmFyO1xuICAgIGlmICghaXNUb3VjaGVkKSByZXR1cm47XG4gICAgaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZVsnc2Nyb2xsLXNuYXAtdHlwZSddID0gJyc7XG4gICAgICB3cmFwcGVyRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJyc7XG4gICAgfVxuICAgIGlmIChwYXJhbXMuaGlkZSkge1xuICAgICAgY2xlYXJUaW1lb3V0KGRyYWdUaW1lb3V0KTtcbiAgICAgIGRyYWdUaW1lb3V0ID0gbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzQwMG1zJztcbiAgICAgIH0sIDEwMDApO1xuICAgIH1cbiAgICBlbWl0KCdzY3JvbGxiYXJEcmFnRW5kJywgZSk7XG4gICAgaWYgKHBhcmFtcy5zbmFwT25SZWxlYXNlKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZXZlbnRzKG1ldGhvZCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHNjcm9sbGJhcixcbiAgICAgIHBhcmFtc1xuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgZWwgPSBzY3JvbGxiYXIuZWw7XG4gICAgaWYgKCFlbCkgcmV0dXJuO1xuICAgIGNvbnN0IHRhcmdldCA9IGVsO1xuICAgIGNvbnN0IGFjdGl2ZUxpc3RlbmVyID0gcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7XG4gICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgfSA6IGZhbHNlO1xuICAgIGNvbnN0IHBhc3NpdmVMaXN0ZW5lciA9IHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8ge1xuICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgfSA6IGZhbHNlO1xuICAgIGlmICghdGFyZ2V0KSByZXR1cm47XG4gICAgY29uc3QgZXZlbnRNZXRob2QgPSBtZXRob2QgPT09ICdvbicgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAncmVtb3ZlRXZlbnRMaXN0ZW5lcic7XG4gICAgdGFyZ2V0W2V2ZW50TWV0aG9kXSgncG9pbnRlcmRvd24nLCBvbkRyYWdTdGFydCwgYWN0aXZlTGlzdGVuZXIpO1xuICAgIGRvY3VtZW50W2V2ZW50TWV0aG9kXSgncG9pbnRlcm1vdmUnLCBvbkRyYWdNb3ZlLCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgZG9jdW1lbnRbZXZlbnRNZXRob2RdKCdwb2ludGVydXAnLCBvbkRyYWdFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gIH1cbiAgZnVuY3Rpb24gZW5hYmxlRHJhZ2dhYmxlKCkge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwgfHwgIXN3aXBlci5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICBldmVudHMoJ29uJyk7XG4gIH1cbiAgZnVuY3Rpb24gZGlzYWJsZURyYWdnYWJsZSgpIHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgZXZlbnRzKCdvZmYnKTtcbiAgfVxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHNjcm9sbGJhcixcbiAgICAgIGVsOiBzd2lwZXJFbFxuICAgIH0gPSBzd2lwZXI7XG4gICAgc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIgPSBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKHN3aXBlciwgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLnNjcm9sbGJhciwgc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIsIHtcbiAgICAgIGVsOiAnc3dpcGVyLXNjcm9sbGJhcidcbiAgICB9KTtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcbiAgICBpZiAoIXBhcmFtcy5lbCkgcmV0dXJuO1xuICAgIGxldCBlbDtcbiAgICBpZiAodHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycgJiYgc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgZWwgPSBzd2lwZXIuZWwucXVlcnlTZWxlY3RvcihwYXJhbXMuZWwpO1xuICAgIH1cbiAgICBpZiAoIWVsICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGFyYW1zLmVsKTtcbiAgICAgIGlmICghZWwubGVuZ3RoKSByZXR1cm47XG4gICAgfSBlbHNlIGlmICghZWwpIHtcbiAgICAgIGVsID0gcGFyYW1zLmVsO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiBlbC5sZW5ndGggPiAxICYmIHN3aXBlckVsLnF1ZXJ5U2VsZWN0b3JBbGwocGFyYW1zLmVsKS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGVsID0gc3dpcGVyRWwucXVlcnlTZWxlY3RvcihwYXJhbXMuZWwpO1xuICAgIH1cbiAgICBpZiAoZWwubGVuZ3RoID4gMCkgZWwgPSBlbFswXTtcbiAgICBlbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5pc0hvcml6b250YWwoKSA/IHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MgOiBwYXJhbXMudmVydGljYWxDbGFzcyk7XG4gICAgbGV0IGRyYWdFbDtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGRyYWdFbCA9IGVsLnF1ZXJ5U2VsZWN0b3IoY2xhc3Nlc1RvU2VsZWN0b3Ioc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ0NsYXNzKSk7XG4gICAgICBpZiAoIWRyYWdFbCkge1xuICAgICAgICBkcmFnRWwgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5kcmFnQ2xhc3MpO1xuICAgICAgICBlbC5hcHBlbmQoZHJhZ0VsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbihzY3JvbGxiYXIsIHtcbiAgICAgIGVsLFxuICAgICAgZHJhZ0VsXG4gICAgfSk7XG4gICAgaWYgKHBhcmFtcy5kcmFnZ2FibGUpIHtcbiAgICAgIGVuYWJsZURyYWdnYWJsZSgpO1xuICAgIH1cbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsLmNsYXNzTGlzdFtzd2lwZXIuZW5hYmxlZCA/ICdyZW1vdmUnIDogJ2FkZCddKC4uLmNsYXNzZXNUb1Rva2Vucyhzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5sb2NrQ2xhc3MpKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcbiAgICBjb25zdCBlbCA9IHN3aXBlci5zY3JvbGxiYXIuZWw7XG4gICAgaWYgKGVsKSB7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKC4uLmNsYXNzZXNUb1Rva2Vucyhzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBwYXJhbXMuaG9yaXpvbnRhbENsYXNzIDogcGFyYW1zLnZlcnRpY2FsQ2xhc3MpKTtcbiAgICB9XG4gICAgZGlzYWJsZURyYWdnYWJsZSgpO1xuICB9XG4gIG9uKCdjaGFuZ2VEaXJlY3Rpb24nLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIuc2Nyb2xsYmFyIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXI7XG4gICAgbGV0IHtcbiAgICAgIGVsXG4gICAgfSA9IHN3aXBlci5zY3JvbGxiYXI7XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MsIHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gcGFyYW1zLmhvcml6b250YWxDbGFzcyA6IHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICB9KTtcbiAgfSk7XG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBkaXNhYmxlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluaXQoKTtcbiAgICAgIHVwZGF0ZVNpemUoKTtcbiAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCd1cGRhdGUgcmVzaXplIG9ic2VydmVyVXBkYXRlIGxvY2sgdW5sb2NrIGNoYW5nZURpcmVjdGlvbicsICgpID0+IHtcbiAgICB1cGRhdGVTaXplKCk7XG4gIH0pO1xuICBvbignc2V0VHJhbnNsYXRlJywgKCkgPT4ge1xuICAgIHNldFRyYW5zbGF0ZSgpO1xuICB9KTtcbiAgb24oJ3NldFRyYW5zaXRpb24nLCAoX3MsIGR1cmF0aW9uKSA9PiB7XG4gICAgc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gIH0pO1xuICBvbignZW5hYmxlIGRpc2FibGUnLCAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgZWxcbiAgICB9ID0gc3dpcGVyLnNjcm9sbGJhcjtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsLmNsYXNzTGlzdFtzd2lwZXIuZW5hYmxlZCA/ICdyZW1vdmUnIDogJ2FkZCddKC4uLmNsYXNzZXNUb1Rva2Vucyhzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5sb2NrQ2xhc3MpKTtcbiAgICB9XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICBkZXN0cm95KCk7XG4gIH0pO1xuICBjb25zdCBlbmFibGUgPSAoKSA9PiB7XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uY2xhc3Nlc1RvVG9rZW5zKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLnNjcm9sbGJhckRpc2FibGVkQ2xhc3MpKTtcbiAgICBpZiAoc3dpcGVyLnNjcm9sbGJhci5lbCkge1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5lbC5jbGFzc0xpc3QucmVtb3ZlKC4uLmNsYXNzZXNUb1Rva2Vucyhzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5zY3JvbGxiYXJEaXNhYmxlZENsYXNzKSk7XG4gICAgfVxuICAgIGluaXQoKTtcbiAgICB1cGRhdGVTaXplKCk7XG4gICAgc2V0VHJhbnNsYXRlKCk7XG4gIH07XG4gIGNvbnN0IGRpc2FibGUgPSAoKSA9PiB7XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoLi4uY2xhc3Nlc1RvVG9rZW5zKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLnNjcm9sbGJhckRpc2FibGVkQ2xhc3MpKTtcbiAgICBpZiAoc3dpcGVyLnNjcm9sbGJhci5lbCkge1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5lbC5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzZXNUb1Rva2Vucyhzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5zY3JvbGxiYXJEaXNhYmxlZENsYXNzKSk7XG4gICAgfVxuICAgIGRlc3Ryb3koKTtcbiAgfTtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIuc2Nyb2xsYmFyLCB7XG4gICAgZW5hYmxlLFxuICAgIGRpc2FibGUsXG4gICAgdXBkYXRlU2l6ZSxcbiAgICBzZXRUcmFuc2xhdGUsXG4gICAgaW5pdCxcbiAgICBkZXN0cm95XG4gIH0pO1xufVxuXG5leHBvcnQgeyBTY3JvbGxiYXIgYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbImciLCJnZXREb2N1bWVudCIsIm0iLCJtYWtlRWxlbWVudHNBcnJheSIsImoiLCJjbGFzc2VzVG9Ub2tlbnMiLCJjIiwiY3JlYXRlRWxlbWVudCIsIm4iLCJuZXh0VGljayIsImQiLCJlbGVtZW50T2Zmc2V0IiwiY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCIsImNsYXNzZXNUb1NlbGVjdG9yIiwiU2Nyb2xsYmFyIiwiX3JlZiIsInN3aXBlciIsImV4dGVuZFBhcmFtcyIsIm9uIiwiZW1pdCIsImRvY3VtZW50IiwiaXNUb3VjaGVkIiwidGltZW91dCIsImRyYWdUaW1lb3V0IiwiZHJhZ1N0YXJ0UG9zIiwiZHJhZ1NpemUiLCJ0cmFja1NpemUiLCJkaXZpZGVyIiwic2Nyb2xsYmFyIiwiZWwiLCJoaWRlIiwiZHJhZ2dhYmxlIiwic25hcE9uUmVsZWFzZSIsImxvY2tDbGFzcyIsImRyYWdDbGFzcyIsInNjcm9sbGJhckRpc2FibGVkQ2xhc3MiLCJob3Jpem9udGFsQ2xhc3MiLCJ2ZXJ0aWNhbENsYXNzIiwiZHJhZ0VsIiwic2V0VHJhbnNsYXRlIiwicGFyYW1zIiwicnRsVHJhbnNsYXRlIiwicnRsIiwicHJvZ3Jlc3MiLCJsb29wIiwicHJvZ3Jlc3NMb29wIiwibmV3U2l6ZSIsIm5ld1BvcyIsImlzSG9yaXpvbnRhbCIsInN0eWxlIiwidHJhbnNmb3JtIiwid2lkdGgiLCJoZWlnaHQiLCJjbGVhclRpbWVvdXQiLCJvcGFjaXR5Iiwic2V0VGltZW91dCIsInRyYW5zaXRpb25EdXJhdGlvbiIsInNldFRyYW5zaXRpb24iLCJkdXJhdGlvbiIsInVwZGF0ZVNpemUiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsInNpemUiLCJ2aXJ0dWFsU2l6ZSIsInNsaWRlc09mZnNldEJlZm9yZSIsImNlbnRlcmVkU2xpZGVzIiwic25hcEdyaWQiLCJwYXJzZUludCIsImRpc3BsYXkiLCJ3YXRjaE92ZXJmbG93IiwiZW5hYmxlZCIsImNsYXNzTGlzdCIsImlzTG9ja2VkIiwiZ2V0UG9pbnRlclBvc2l0aW9uIiwiZSIsImNsaWVudFgiLCJjbGllbnRZIiwic2V0RHJhZ1Bvc2l0aW9uIiwicG9zaXRpb25SYXRpbyIsIk1hdGgiLCJtYXgiLCJtaW4iLCJwb3NpdGlvbiIsIm1pblRyYW5zbGF0ZSIsIm1heFRyYW5zbGF0ZSIsInVwZGF0ZVByb2dyZXNzIiwidXBkYXRlQWN0aXZlSW5kZXgiLCJ1cGRhdGVTbGlkZXNDbGFzc2VzIiwib25EcmFnU3RhcnQiLCJ3cmFwcGVyRWwiLCJ0YXJnZXQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImNzc01vZGUiLCJvbkRyYWdNb3ZlIiwiY2FuY2VsYWJsZSIsInJldHVyblZhbHVlIiwib25EcmFnRW5kIiwic2xpZGVUb0Nsb3Nlc3QiLCJldmVudHMiLCJtZXRob2QiLCJhY3RpdmVMaXN0ZW5lciIsInBhc3NpdmVMaXN0ZW5lcnMiLCJwYXNzaXZlIiwiY2FwdHVyZSIsInBhc3NpdmVMaXN0ZW5lciIsImV2ZW50TWV0aG9kIiwiZW5hYmxlRHJhZ2dhYmxlIiwiZGlzYWJsZURyYWdnYWJsZSIsImluaXQiLCJzd2lwZXJFbCIsIm9yaWdpbmFsUGFyYW1zIiwiaXNFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJsZW5ndGgiLCJ1bmlxdWVOYXZFbGVtZW50cyIsImFkZCIsImFwcGVuZCIsIk9iamVjdCIsImFzc2lnbiIsImRlc3Ryb3kiLCJyZW1vdmUiLCJmb3JFYWNoIiwic3ViRWwiLCJkaXNhYmxlIiwiX3MiLCJlbmFibGUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/scrollbar.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/thumbs.mjs":
/*!************************************************!*\
  !*** ./node_modules/swiper/modules/thumbs.mjs ***!
  \************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Thumb; }\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n\n\nfunction Thumb(_ref) {\n    let { swiper, extendParams, on } = _ref;\n    extendParams({\n        thumbs: {\n            swiper: null,\n            multipleActiveThumbs: true,\n            autoScrollOffset: 0,\n            slideThumbActiveClass: \"swiper-slide-thumb-active\",\n            thumbsContainerClass: \"swiper-thumbs\"\n        }\n    });\n    let initialized = false;\n    let swiperCreated = false;\n    swiper.thumbs = {\n        swiper: null\n    };\n    function onThumbClick() {\n        const thumbsSwiper = swiper.thumbs.swiper;\n        if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n        const clickedIndex = thumbsSwiper.clickedIndex;\n        const clickedSlide = thumbsSwiper.clickedSlide;\n        if (clickedSlide && clickedSlide.classList.contains(swiper.params.thumbs.slideThumbActiveClass)) return;\n        if (typeof clickedIndex === \"undefined\" || clickedIndex === null) return;\n        let slideToIndex;\n        if (thumbsSwiper.params.loop) {\n            slideToIndex = parseInt(thumbsSwiper.clickedSlide.getAttribute(\"data-swiper-slide-index\"), 10);\n        } else {\n            slideToIndex = clickedIndex;\n        }\n        if (swiper.params.loop) {\n            swiper.slideToLoop(slideToIndex);\n        } else {\n            swiper.slideTo(slideToIndex);\n        }\n    }\n    function init() {\n        const { thumbs: thumbsParams } = swiper.params;\n        if (initialized) return false;\n        initialized = true;\n        const SwiperClass = swiper.constructor;\n        if (thumbsParams.swiper instanceof SwiperClass) {\n            if (thumbsParams.swiper.destroyed) {\n                initialized = false;\n                return false;\n            }\n            swiper.thumbs.swiper = thumbsParams.swiper;\n            Object.assign(swiper.thumbs.swiper.originalParams, {\n                watchSlidesProgress: true,\n                slideToClickedSlide: false\n            });\n            Object.assign(swiper.thumbs.swiper.params, {\n                watchSlidesProgress: true,\n                slideToClickedSlide: false\n            });\n            swiper.thumbs.swiper.update();\n        } else if ((0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.o)(thumbsParams.swiper)) {\n            const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);\n            Object.assign(thumbsSwiperParams, {\n                watchSlidesProgress: true,\n                slideToClickedSlide: false\n            });\n            swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);\n            swiperCreated = true;\n        }\n        swiper.thumbs.swiper.el.classList.add(swiper.params.thumbs.thumbsContainerClass);\n        swiper.thumbs.swiper.on(\"tap\", onThumbClick);\n        return true;\n    }\n    function update(initial) {\n        const thumbsSwiper = swiper.thumbs.swiper;\n        if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n        const slidesPerView = thumbsSwiper.params.slidesPerView === \"auto\" ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView;\n        // Activate thumbs\n        let thumbsToActivate = 1;\n        const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;\n        if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {\n            thumbsToActivate = swiper.params.slidesPerView;\n        }\n        if (!swiper.params.thumbs.multipleActiveThumbs) {\n            thumbsToActivate = 1;\n        }\n        thumbsToActivate = Math.floor(thumbsToActivate);\n        thumbsSwiper.slides.forEach((slideEl)=>slideEl.classList.remove(thumbActiveClass));\n        if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {\n            for(let i = 0; i < thumbsToActivate; i += 1){\n                (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(thumbsSwiper.slidesEl, '[data-swiper-slide-index=\"'.concat(swiper.realIndex + i, '\"]')).forEach((slideEl)=>{\n                    slideEl.classList.add(thumbActiveClass);\n                });\n            }\n        } else {\n            for(let i = 0; i < thumbsToActivate; i += 1){\n                if (thumbsSwiper.slides[swiper.realIndex + i]) {\n                    thumbsSwiper.slides[swiper.realIndex + i].classList.add(thumbActiveClass);\n                }\n            }\n        }\n        const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;\n        const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;\n        if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {\n            const currentThumbsIndex = thumbsSwiper.activeIndex;\n            let newThumbsIndex;\n            let direction;\n            if (thumbsSwiper.params.loop) {\n                const newThumbsSlide = thumbsSwiper.slides.find((slideEl)=>slideEl.getAttribute(\"data-swiper-slide-index\") === \"\".concat(swiper.realIndex));\n                newThumbsIndex = thumbsSwiper.slides.indexOf(newThumbsSlide);\n                direction = swiper.activeIndex > swiper.previousIndex ? \"next\" : \"prev\";\n            } else {\n                newThumbsIndex = swiper.realIndex;\n                direction = newThumbsIndex > swiper.previousIndex ? \"next\" : \"prev\";\n            }\n            if (useOffset) {\n                newThumbsIndex += direction === \"next\" ? autoScrollOffset : -1 * autoScrollOffset;\n            }\n            if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {\n                if (thumbsSwiper.params.centeredSlides) {\n                    if (newThumbsIndex > currentThumbsIndex) {\n                        newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;\n                    } else {\n                        newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;\n                    }\n                } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1) ;\n                thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);\n            }\n        }\n    }\n    on(\"beforeInit\", ()=>{\n        const { thumbs } = swiper.params;\n        if (!thumbs || !thumbs.swiper) return;\n        if (typeof thumbs.swiper === \"string\" || thumbs.swiper instanceof HTMLElement) {\n            const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n            const getThumbsElementAndInit = ()=>{\n                const thumbsElement = typeof thumbs.swiper === \"string\" ? document.querySelector(thumbs.swiper) : thumbs.swiper;\n                if (thumbsElement && thumbsElement.swiper) {\n                    thumbs.swiper = thumbsElement.swiper;\n                    init();\n                    update(true);\n                } else if (thumbsElement) {\n                    const eventName = \"\".concat(swiper.params.eventsPrefix, \"init\");\n                    const onThumbsSwiper = (e)=>{\n                        thumbs.swiper = e.detail[0];\n                        thumbsElement.removeEventListener(eventName, onThumbsSwiper);\n                        init();\n                        update(true);\n                        thumbs.swiper.update();\n                        swiper.update();\n                    };\n                    thumbsElement.addEventListener(eventName, onThumbsSwiper);\n                }\n                return thumbsElement;\n            };\n            const watchForThumbsToAppear = ()=>{\n                if (swiper.destroyed) return;\n                const thumbsElement = getThumbsElementAndInit();\n                if (!thumbsElement) {\n                    requestAnimationFrame(watchForThumbsToAppear);\n                }\n            };\n            requestAnimationFrame(watchForThumbsToAppear);\n        } else {\n            init();\n            update(true);\n        }\n    });\n    on(\"slideChange update resize observerUpdate\", ()=>{\n        update();\n    });\n    on(\"setTransition\", (_s, duration)=>{\n        const thumbsSwiper = swiper.thumbs.swiper;\n        if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n        thumbsSwiper.setTransition(duration);\n    });\n    on(\"beforeDestroy\", ()=>{\n        const thumbsSwiper = swiper.thumbs.swiper;\n        if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n        if (swiperCreated) {\n            thumbsSwiper.destroy();\n        }\n    });\n    Object.assign(swiper.thumbs, {\n        init,\n        update\n    });\n}\n_c = Thumb;\n\nvar _c;\n$RefreshReg$(_c, \"Thumb\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy90aHVtYnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFnRTtBQUNVO0FBRTFFLFNBQVNNLE1BQU1DLElBQUk7SUFDakIsSUFBSSxFQUNGQyxNQUFNLEVBQ05DLFlBQVksRUFDWkMsRUFBRSxFQUNILEdBQUdIO0lBQ0pFLGFBQWE7UUFDWEUsUUFBUTtZQUNOSCxRQUFRO1lBQ1JJLHNCQUFzQjtZQUN0QkMsa0JBQWtCO1lBQ2xCQyx1QkFBdUI7WUFDdkJDLHNCQUFzQjtRQUN4QjtJQUNGO0lBQ0EsSUFBSUMsY0FBYztJQUNsQixJQUFJQyxnQkFBZ0I7SUFDcEJULE9BQU9HLE1BQU0sR0FBRztRQUNkSCxRQUFRO0lBQ1Y7SUFDQSxTQUFTVTtRQUNQLE1BQU1DLGVBQWVYLE9BQU9HLE1BQU0sQ0FBQ0gsTUFBTTtRQUN6QyxJQUFJLENBQUNXLGdCQUFnQkEsYUFBYUMsU0FBUyxFQUFFO1FBQzdDLE1BQU1DLGVBQWVGLGFBQWFFLFlBQVk7UUFDOUMsTUFBTUMsZUFBZUgsYUFBYUcsWUFBWTtRQUM5QyxJQUFJQSxnQkFBZ0JBLGFBQWFDLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDaEIsT0FBT2lCLE1BQU0sQ0FBQ2QsTUFBTSxDQUFDRyxxQkFBcUIsR0FBRztRQUNqRyxJQUFJLE9BQU9PLGlCQUFpQixlQUFlQSxpQkFBaUIsTUFBTTtRQUNsRSxJQUFJSztRQUNKLElBQUlQLGFBQWFNLE1BQU0sQ0FBQ0UsSUFBSSxFQUFFO1lBQzVCRCxlQUFlRSxTQUFTVCxhQUFhRyxZQUFZLENBQUNPLFlBQVksQ0FBQyw0QkFBNEI7UUFDN0YsT0FBTztZQUNMSCxlQUFlTDtRQUNqQjtRQUNBLElBQUliLE9BQU9pQixNQUFNLENBQUNFLElBQUksRUFBRTtZQUN0Qm5CLE9BQU9zQixXQUFXLENBQUNKO1FBQ3JCLE9BQU87WUFDTGxCLE9BQU91QixPQUFPLENBQUNMO1FBQ2pCO0lBQ0Y7SUFDQSxTQUFTTTtRQUNQLE1BQU0sRUFDSnJCLFFBQVFzQixZQUFZLEVBQ3JCLEdBQUd6QixPQUFPaUIsTUFBTTtRQUNqQixJQUFJVCxhQUFhLE9BQU87UUFDeEJBLGNBQWM7UUFDZCxNQUFNa0IsY0FBYzFCLE9BQU8yQixXQUFXO1FBQ3RDLElBQUlGLGFBQWF6QixNQUFNLFlBQVkwQixhQUFhO1lBQzlDLElBQUlELGFBQWF6QixNQUFNLENBQUNZLFNBQVMsRUFBRTtnQkFDakNKLGNBQWM7Z0JBQ2QsT0FBTztZQUNUO1lBQ0FSLE9BQU9HLE1BQU0sQ0FBQ0gsTUFBTSxHQUFHeUIsYUFBYXpCLE1BQU07WUFDMUM0QixPQUFPQyxNQUFNLENBQUM3QixPQUFPRyxNQUFNLENBQUNILE1BQU0sQ0FBQzhCLGNBQWMsRUFBRTtnQkFDakRDLHFCQUFxQjtnQkFDckJDLHFCQUFxQjtZQUN2QjtZQUNBSixPQUFPQyxNQUFNLENBQUM3QixPQUFPRyxNQUFNLENBQUNILE1BQU0sQ0FBQ2lCLE1BQU0sRUFBRTtnQkFDekNjLHFCQUFxQjtnQkFDckJDLHFCQUFxQjtZQUN2QjtZQUNBaEMsT0FBT0csTUFBTSxDQUFDSCxNQUFNLENBQUNpQyxNQUFNO1FBQzdCLE9BQU8sSUFBSXRDLG9EQUFRQSxDQUFDOEIsYUFBYXpCLE1BQU0sR0FBRztZQUN4QyxNQUFNa0MscUJBQXFCTixPQUFPQyxNQUFNLENBQUMsQ0FBQyxHQUFHSixhQUFhekIsTUFBTTtZQUNoRTRCLE9BQU9DLE1BQU0sQ0FBQ0ssb0JBQW9CO2dCQUNoQ0gscUJBQXFCO2dCQUNyQkMscUJBQXFCO1lBQ3ZCO1lBQ0FoQyxPQUFPRyxNQUFNLENBQUNILE1BQU0sR0FBRyxJQUFJMEIsWUFBWVE7WUFDdkN6QixnQkFBZ0I7UUFDbEI7UUFDQVQsT0FBT0csTUFBTSxDQUFDSCxNQUFNLENBQUNtQyxFQUFFLENBQUNwQixTQUFTLENBQUNxQixHQUFHLENBQUNwQyxPQUFPaUIsTUFBTSxDQUFDZCxNQUFNLENBQUNJLG9CQUFvQjtRQUMvRVAsT0FBT0csTUFBTSxDQUFDSCxNQUFNLENBQUNFLEVBQUUsQ0FBQyxPQUFPUTtRQUMvQixPQUFPO0lBQ1Q7SUFDQSxTQUFTdUIsT0FBT0ksT0FBTztRQUNyQixNQUFNMUIsZUFBZVgsT0FBT0csTUFBTSxDQUFDSCxNQUFNO1FBQ3pDLElBQUksQ0FBQ1csZ0JBQWdCQSxhQUFhQyxTQUFTLEVBQUU7UUFDN0MsTUFBTTBCLGdCQUFnQjNCLGFBQWFNLE1BQU0sQ0FBQ3FCLGFBQWEsS0FBSyxTQUFTM0IsYUFBYTRCLG9CQUFvQixLQUFLNUIsYUFBYU0sTUFBTSxDQUFDcUIsYUFBYTtRQUU1SSxrQkFBa0I7UUFDbEIsSUFBSUUsbUJBQW1CO1FBQ3ZCLE1BQU1DLG1CQUFtQnpDLE9BQU9pQixNQUFNLENBQUNkLE1BQU0sQ0FBQ0cscUJBQXFCO1FBQ25FLElBQUlOLE9BQU9pQixNQUFNLENBQUNxQixhQUFhLEdBQUcsS0FBSyxDQUFDdEMsT0FBT2lCLE1BQU0sQ0FBQ3lCLGNBQWMsRUFBRTtZQUNwRUYsbUJBQW1CeEMsT0FBT2lCLE1BQU0sQ0FBQ3FCLGFBQWE7UUFDaEQ7UUFDQSxJQUFJLENBQUN0QyxPQUFPaUIsTUFBTSxDQUFDZCxNQUFNLENBQUNDLG9CQUFvQixFQUFFO1lBQzlDb0MsbUJBQW1CO1FBQ3JCO1FBQ0FBLG1CQUFtQkcsS0FBS0MsS0FBSyxDQUFDSjtRQUM5QjdCLGFBQWFrQyxNQUFNLENBQUNDLE9BQU8sQ0FBQ0MsQ0FBQUEsVUFBV0EsUUFBUWhDLFNBQVMsQ0FBQ2lDLE1BQU0sQ0FBQ1A7UUFDaEUsSUFBSTlCLGFBQWFNLE1BQU0sQ0FBQ0UsSUFBSSxJQUFJUixhQUFhTSxNQUFNLENBQUNnQyxPQUFPLElBQUl0QyxhQUFhTSxNQUFNLENBQUNnQyxPQUFPLENBQUNDLE9BQU8sRUFBRTtZQUNsRyxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSVgsa0JBQWtCVyxLQUFLLEVBQUc7Z0JBQzVDdEQsb0RBQWVBLENBQUNjLGFBQWF5QyxRQUFRLEVBQUUsNkJBQWtELE9BQXJCcEQsT0FBT3FELFNBQVMsR0FBR0YsR0FBRSxPQUFLTCxPQUFPLENBQUNDLENBQUFBO29CQUNwR0EsUUFBUWhDLFNBQVMsQ0FBQ3FCLEdBQUcsQ0FBQ0s7Z0JBQ3hCO1lBQ0Y7UUFDRixPQUFPO1lBQ0wsSUFBSyxJQUFJVSxJQUFJLEdBQUdBLElBQUlYLGtCQUFrQlcsS0FBSyxFQUFHO2dCQUM1QyxJQUFJeEMsYUFBYWtDLE1BQU0sQ0FBQzdDLE9BQU9xRCxTQUFTLEdBQUdGLEVBQUUsRUFBRTtvQkFDN0N4QyxhQUFha0MsTUFBTSxDQUFDN0MsT0FBT3FELFNBQVMsR0FBR0YsRUFBRSxDQUFDcEMsU0FBUyxDQUFDcUIsR0FBRyxDQUFDSztnQkFDMUQ7WUFDRjtRQUNGO1FBQ0EsTUFBTXBDLG1CQUFtQkwsT0FBT2lCLE1BQU0sQ0FBQ2QsTUFBTSxDQUFDRSxnQkFBZ0I7UUFDOUQsTUFBTWlELFlBQVlqRCxvQkFBb0IsQ0FBQ00sYUFBYU0sTUFBTSxDQUFDRSxJQUFJO1FBQy9ELElBQUluQixPQUFPcUQsU0FBUyxLQUFLMUMsYUFBYTBDLFNBQVMsSUFBSUMsV0FBVztZQUM1RCxNQUFNQyxxQkFBcUI1QyxhQUFhNkMsV0FBVztZQUNuRCxJQUFJQztZQUNKLElBQUlDO1lBQ0osSUFBSS9DLGFBQWFNLE1BQU0sQ0FBQ0UsSUFBSSxFQUFFO2dCQUM1QixNQUFNd0MsaUJBQWlCaEQsYUFBYWtDLE1BQU0sQ0FBQ2UsSUFBSSxDQUFDYixDQUFBQSxVQUFXQSxRQUFRMUIsWUFBWSxDQUFDLCtCQUErQixHQUFvQixPQUFqQnJCLE9BQU9xRCxTQUFTO2dCQUNsSUksaUJBQWlCOUMsYUFBYWtDLE1BQU0sQ0FBQ2dCLE9BQU8sQ0FBQ0Y7Z0JBQzdDRCxZQUFZMUQsT0FBT3dELFdBQVcsR0FBR3hELE9BQU84RCxhQUFhLEdBQUcsU0FBUztZQUNuRSxPQUFPO2dCQUNMTCxpQkFBaUJ6RCxPQUFPcUQsU0FBUztnQkFDakNLLFlBQVlELGlCQUFpQnpELE9BQU84RCxhQUFhLEdBQUcsU0FBUztZQUMvRDtZQUNBLElBQUlSLFdBQVc7Z0JBQ2JHLGtCQUFrQkMsY0FBYyxTQUFTckQsbUJBQW1CLENBQUMsSUFBSUE7WUFDbkU7WUFDQSxJQUFJTSxhQUFhb0Qsb0JBQW9CLElBQUlwRCxhQUFhb0Qsb0JBQW9CLENBQUNGLE9BQU8sQ0FBQ0osa0JBQWtCLEdBQUc7Z0JBQ3RHLElBQUk5QyxhQUFhTSxNQUFNLENBQUN5QixjQUFjLEVBQUU7b0JBQ3RDLElBQUllLGlCQUFpQkYsb0JBQW9CO3dCQUN2Q0UsaUJBQWlCQSxpQkFBaUJkLEtBQUtDLEtBQUssQ0FBQ04sZ0JBQWdCLEtBQUs7b0JBQ3BFLE9BQU87d0JBQ0xtQixpQkFBaUJBLGlCQUFpQmQsS0FBS0MsS0FBSyxDQUFDTixnQkFBZ0IsS0FBSztvQkFDcEU7Z0JBQ0YsT0FBTyxJQUFJbUIsaUJBQWlCRixzQkFBc0I1QyxhQUFhTSxNQUFNLENBQUMrQyxjQUFjLEtBQUs7Z0JBQ3pGckQsYUFBYVksT0FBTyxDQUFDa0MsZ0JBQWdCcEIsVUFBVSxJQUFJNEI7WUFDckQ7UUFDRjtJQUNGO0lBQ0EvRCxHQUFHLGNBQWM7UUFDZixNQUFNLEVBQ0pDLE1BQU0sRUFDUCxHQUFHSCxPQUFPaUIsTUFBTTtRQUNqQixJQUFJLENBQUNkLFVBQVUsQ0FBQ0EsT0FBT0gsTUFBTSxFQUFFO1FBQy9CLElBQUksT0FBT0csT0FBT0gsTUFBTSxLQUFLLFlBQVlHLE9BQU9ILE1BQU0sWUFBWWtFLGFBQWE7WUFDN0UsTUFBTUMsV0FBVzFFLDZEQUFXQTtZQUM1QixNQUFNMkUsMEJBQTBCO2dCQUM5QixNQUFNQyxnQkFBZ0IsT0FBT2xFLE9BQU9ILE1BQU0sS0FBSyxXQUFXbUUsU0FBU0csYUFBYSxDQUFDbkUsT0FBT0gsTUFBTSxJQUFJRyxPQUFPSCxNQUFNO2dCQUMvRyxJQUFJcUUsaUJBQWlCQSxjQUFjckUsTUFBTSxFQUFFO29CQUN6Q0csT0FBT0gsTUFBTSxHQUFHcUUsY0FBY3JFLE1BQU07b0JBQ3BDd0I7b0JBQ0FTLE9BQU87Z0JBQ1QsT0FBTyxJQUFJb0MsZUFBZTtvQkFDeEIsTUFBTUUsWUFBWSxHQUE4QixPQUEzQnZFLE9BQU9pQixNQUFNLENBQUN1RCxZQUFZLEVBQUM7b0JBQ2hELE1BQU1DLGlCQUFpQjdFLENBQUFBO3dCQUNyQk8sT0FBT0gsTUFBTSxHQUFHSixFQUFFOEUsTUFBTSxDQUFDLEVBQUU7d0JBQzNCTCxjQUFjTSxtQkFBbUIsQ0FBQ0osV0FBV0U7d0JBQzdDakQ7d0JBQ0FTLE9BQU87d0JBQ1A5QixPQUFPSCxNQUFNLENBQUNpQyxNQUFNO3dCQUNwQmpDLE9BQU9pQyxNQUFNO29CQUNmO29CQUNBb0MsY0FBY08sZ0JBQWdCLENBQUNMLFdBQVdFO2dCQUM1QztnQkFDQSxPQUFPSjtZQUNUO1lBQ0EsTUFBTVEseUJBQXlCO2dCQUM3QixJQUFJN0UsT0FBT1ksU0FBUyxFQUFFO2dCQUN0QixNQUFNeUQsZ0JBQWdCRDtnQkFDdEIsSUFBSSxDQUFDQyxlQUFlO29CQUNsQlMsc0JBQXNCRDtnQkFDeEI7WUFDRjtZQUNBQyxzQkFBc0JEO1FBQ3hCLE9BQU87WUFDTHJEO1lBQ0FTLE9BQU87UUFDVDtJQUNGO0lBQ0EvQixHQUFHLDRDQUE0QztRQUM3QytCO0lBQ0Y7SUFDQS9CLEdBQUcsaUJBQWlCLENBQUM2RSxJQUFJQztRQUN2QixNQUFNckUsZUFBZVgsT0FBT0csTUFBTSxDQUFDSCxNQUFNO1FBQ3pDLElBQUksQ0FBQ1csZ0JBQWdCQSxhQUFhQyxTQUFTLEVBQUU7UUFDN0NELGFBQWFzRSxhQUFhLENBQUNEO0lBQzdCO0lBQ0E5RSxHQUFHLGlCQUFpQjtRQUNsQixNQUFNUyxlQUFlWCxPQUFPRyxNQUFNLENBQUNILE1BQU07UUFDekMsSUFBSSxDQUFDVyxnQkFBZ0JBLGFBQWFDLFNBQVMsRUFBRTtRQUM3QyxJQUFJSCxlQUFlO1lBQ2pCRSxhQUFhdUUsT0FBTztRQUN0QjtJQUNGO0lBQ0F0RCxPQUFPQyxNQUFNLENBQUM3QixPQUFPRyxNQUFNLEVBQUU7UUFDM0JxQjtRQUNBUztJQUNGO0FBQ0Y7S0EvTFNuQztBQWlNbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL3RodW1icy5tanM/YjEyZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnIGFzIGdldERvY3VtZW50IH0gZnJvbSAnLi4vc2hhcmVkL3Nzci13aW5kb3cuZXNtLm1qcyc7XG5pbXBvcnQgeyBvIGFzIGlzT2JqZWN0LCBlIGFzIGVsZW1lbnRDaGlsZHJlbiB9IGZyb20gJy4uL3NoYXJlZC91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBUaHVtYihfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIGV4dGVuZFBhcmFtcyxcbiAgICBvblxuICB9ID0gX3JlZjtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICB0aHVtYnM6IHtcbiAgICAgIHN3aXBlcjogbnVsbCxcbiAgICAgIG11bHRpcGxlQWN0aXZlVGh1bWJzOiB0cnVlLFxuICAgICAgYXV0b1Njcm9sbE9mZnNldDogMCxcbiAgICAgIHNsaWRlVGh1bWJBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS10aHVtYi1hY3RpdmUnLFxuICAgICAgdGh1bWJzQ29udGFpbmVyQ2xhc3M6ICdzd2lwZXItdGh1bWJzJ1xuICAgIH1cbiAgfSk7XG4gIGxldCBpbml0aWFsaXplZCA9IGZhbHNlO1xuICBsZXQgc3dpcGVyQ3JlYXRlZCA9IGZhbHNlO1xuICBzd2lwZXIudGh1bWJzID0ge1xuICAgIHN3aXBlcjogbnVsbFxuICB9O1xuICBmdW5jdGlvbiBvblRodW1iQ2xpY2soKSB7XG4gICAgY29uc3QgdGh1bWJzU3dpcGVyID0gc3dpcGVyLnRodW1icy5zd2lwZXI7XG4gICAgaWYgKCF0aHVtYnNTd2lwZXIgfHwgdGh1bWJzU3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIGNvbnN0IGNsaWNrZWRJbmRleCA9IHRodW1ic1N3aXBlci5jbGlja2VkSW5kZXg7XG4gICAgY29uc3QgY2xpY2tlZFNsaWRlID0gdGh1bWJzU3dpcGVyLmNsaWNrZWRTbGlkZTtcbiAgICBpZiAoY2xpY2tlZFNsaWRlICYmIGNsaWNrZWRTbGlkZS5jbGFzc0xpc3QuY29udGFpbnMoc3dpcGVyLnBhcmFtcy50aHVtYnMuc2xpZGVUaHVtYkFjdGl2ZUNsYXNzKSkgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgY2xpY2tlZEluZGV4ID09PSAndW5kZWZpbmVkJyB8fCBjbGlja2VkSW5kZXggPT09IG51bGwpIHJldHVybjtcbiAgICBsZXQgc2xpZGVUb0luZGV4O1xuICAgIGlmICh0aHVtYnNTd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHNsaWRlVG9JbmRleCA9IHBhcnNlSW50KHRodW1ic1N3aXBlci5jbGlja2VkU2xpZGUuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlVG9JbmRleCA9IGNsaWNrZWRJbmRleDtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG9Mb29wKHNsaWRlVG9JbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdGh1bWJzOiB0aHVtYnNQYXJhbXNcbiAgICB9ID0gc3dpcGVyLnBhcmFtcztcbiAgICBpZiAoaW5pdGlhbGl6ZWQpIHJldHVybiBmYWxzZTtcbiAgICBpbml0aWFsaXplZCA9IHRydWU7XG4gICAgY29uc3QgU3dpcGVyQ2xhc3MgPSBzd2lwZXIuY29uc3RydWN0b3I7XG4gICAgaWYgKHRodW1ic1BhcmFtcy5zd2lwZXIgaW5zdGFuY2VvZiBTd2lwZXJDbGFzcykge1xuICAgICAgaWYgKHRodW1ic1BhcmFtcy5zd2lwZXIuZGVzdHJveWVkKSB7XG4gICAgICAgIGluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci50aHVtYnMuc3dpcGVyID0gdGh1bWJzUGFyYW1zLnN3aXBlcjtcbiAgICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLnRodW1icy5zd2lwZXIub3JpZ2luYWxQYXJhbXMsIHtcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgc2xpZGVUb0NsaWNrZWRTbGlkZTogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmFzc2lnbihzd2lwZXIudGh1bWJzLnN3aXBlci5wYXJhbXMsIHtcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgc2xpZGVUb0NsaWNrZWRTbGlkZTogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXIudXBkYXRlKCk7XG4gICAgfSBlbHNlIGlmIChpc09iamVjdCh0aHVtYnNQYXJhbXMuc3dpcGVyKSkge1xuICAgICAgY29uc3QgdGh1bWJzU3dpcGVyUGFyYW1zID0gT2JqZWN0LmFzc2lnbih7fSwgdGh1bWJzUGFyYW1zLnN3aXBlcik7XG4gICAgICBPYmplY3QuYXNzaWduKHRodW1ic1N3aXBlclBhcmFtcywge1xuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICBzd2lwZXIudGh1bWJzLnN3aXBlciA9IG5ldyBTd2lwZXJDbGFzcyh0aHVtYnNTd2lwZXJQYXJhbXMpO1xuICAgICAgc3dpcGVyQ3JlYXRlZCA9IHRydWU7XG4gICAgfVxuICAgIHN3aXBlci50aHVtYnMuc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLnBhcmFtcy50aHVtYnMudGh1bWJzQ29udGFpbmVyQ2xhc3MpO1xuICAgIHN3aXBlci50aHVtYnMuc3dpcGVyLm9uKCd0YXAnLCBvblRodW1iQ2xpY2spO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZShpbml0aWFsKSB7XG4gICAgY29uc3QgdGh1bWJzU3dpcGVyID0gc3dpcGVyLnRodW1icy5zd2lwZXI7XG4gICAgaWYgKCF0aHVtYnNTd2lwZXIgfHwgdGh1bWJzU3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIGNvbnN0IHNsaWRlc1BlclZpZXcgPSB0aHVtYnNTd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHRodW1ic1N3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogdGh1bWJzU3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuXG4gICAgLy8gQWN0aXZhdGUgdGh1bWJzXG4gICAgbGV0IHRodW1ic1RvQWN0aXZhdGUgPSAxO1xuICAgIGNvbnN0IHRodW1iQWN0aXZlQ2xhc3MgPSBzd2lwZXIucGFyYW1zLnRodW1icy5zbGlkZVRodW1iQWN0aXZlQ2xhc3M7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEgJiYgIXN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHRodW1ic1RvQWN0aXZhdGUgPSBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgfVxuICAgIGlmICghc3dpcGVyLnBhcmFtcy50aHVtYnMubXVsdGlwbGVBY3RpdmVUaHVtYnMpIHtcbiAgICAgIHRodW1ic1RvQWN0aXZhdGUgPSAxO1xuICAgIH1cbiAgICB0aHVtYnNUb0FjdGl2YXRlID0gTWF0aC5mbG9vcih0aHVtYnNUb0FjdGl2YXRlKTtcbiAgICB0aHVtYnNTd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiBzbGlkZUVsLmNsYXNzTGlzdC5yZW1vdmUodGh1bWJBY3RpdmVDbGFzcykpO1xuICAgIGlmICh0aHVtYnNTd2lwZXIucGFyYW1zLmxvb3AgfHwgdGh1bWJzU3dpcGVyLnBhcmFtcy52aXJ0dWFsICYmIHRodW1ic1N3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRodW1ic1RvQWN0aXZhdGU7IGkgKz0gMSkge1xuICAgICAgICBlbGVtZW50Q2hpbGRyZW4odGh1bWJzU3dpcGVyLnNsaWRlc0VsLCBgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzd2lwZXIucmVhbEluZGV4ICsgaX1cIl1gKS5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgICAgIHNsaWRlRWwuY2xhc3NMaXN0LmFkZCh0aHVtYkFjdGl2ZUNsYXNzKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGh1bWJzVG9BY3RpdmF0ZTsgaSArPSAxKSB7XG4gICAgICAgIGlmICh0aHVtYnNTd2lwZXIuc2xpZGVzW3N3aXBlci5yZWFsSW5kZXggKyBpXSkge1xuICAgICAgICAgIHRodW1ic1N3aXBlci5zbGlkZXNbc3dpcGVyLnJlYWxJbmRleCArIGldLmNsYXNzTGlzdC5hZGQodGh1bWJBY3RpdmVDbGFzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYXV0b1Njcm9sbE9mZnNldCA9IHN3aXBlci5wYXJhbXMudGh1bWJzLmF1dG9TY3JvbGxPZmZzZXQ7XG4gICAgY29uc3QgdXNlT2Zmc2V0ID0gYXV0b1Njcm9sbE9mZnNldCAmJiAhdGh1bWJzU3dpcGVyLnBhcmFtcy5sb29wO1xuICAgIGlmIChzd2lwZXIucmVhbEluZGV4ICE9PSB0aHVtYnNTd2lwZXIucmVhbEluZGV4IHx8IHVzZU9mZnNldCkge1xuICAgICAgY29uc3QgY3VycmVudFRodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgbGV0IG5ld1RodW1ic0luZGV4O1xuICAgICAgbGV0IGRpcmVjdGlvbjtcbiAgICAgIGlmICh0aHVtYnNTd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgY29uc3QgbmV3VGh1bWJzU2xpZGUgPSB0aHVtYnNTd2lwZXIuc2xpZGVzLmZpbmQoc2xpZGVFbCA9PiBzbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSA9PT0gYCR7c3dpcGVyLnJlYWxJbmRleH1gKTtcbiAgICAgICAgbmV3VGh1bWJzSW5kZXggPSB0aHVtYnNTd2lwZXIuc2xpZGVzLmluZGV4T2YobmV3VGh1bWJzU2xpZGUpO1xuICAgICAgICBkaXJlY3Rpb24gPSBzd2lwZXIuYWN0aXZlSW5kZXggPiBzd2lwZXIucHJldmlvdXNJbmRleCA/ICduZXh0JyA6ICdwcmV2JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld1RodW1ic0luZGV4ID0gc3dpcGVyLnJlYWxJbmRleDtcbiAgICAgICAgZGlyZWN0aW9uID0gbmV3VGh1bWJzSW5kZXggPiBzd2lwZXIucHJldmlvdXNJbmRleCA/ICduZXh0JyA6ICdwcmV2JztcbiAgICAgIH1cbiAgICAgIGlmICh1c2VPZmZzZXQpIHtcbiAgICAgICAgbmV3VGh1bWJzSW5kZXggKz0gZGlyZWN0aW9uID09PSAnbmV4dCcgPyBhdXRvU2Nyb2xsT2Zmc2V0IDogLTEgKiBhdXRvU2Nyb2xsT2Zmc2V0O1xuICAgICAgfVxuICAgICAgaWYgKHRodW1ic1N3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcyAmJiB0aHVtYnNTd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMuaW5kZXhPZihuZXdUaHVtYnNJbmRleCkgPCAwKSB7XG4gICAgICAgIGlmICh0aHVtYnNTd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgICAgaWYgKG5ld1RodW1ic0luZGV4ID4gY3VycmVudFRodW1ic0luZGV4KSB7XG4gICAgICAgICAgICBuZXdUaHVtYnNJbmRleCA9IG5ld1RodW1ic0luZGV4IC0gTWF0aC5mbG9vcihzbGlkZXNQZXJWaWV3IC8gMikgKyAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdUaHVtYnNJbmRleCA9IG5ld1RodW1ic0luZGV4ICsgTWF0aC5mbG9vcihzbGlkZXNQZXJWaWV3IC8gMikgLSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChuZXdUaHVtYnNJbmRleCA+IGN1cnJlbnRUaHVtYnNJbmRleCAmJiB0aHVtYnNTd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAxKSA7XG4gICAgICAgIHRodW1ic1N3aXBlci5zbGlkZVRvKG5ld1RodW1ic0luZGV4LCBpbml0aWFsID8gMCA6IHVuZGVmaW5lZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIG9uKCdiZWZvcmVJbml0JywgKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHRodW1ic1xuICAgIH0gPSBzd2lwZXIucGFyYW1zO1xuICAgIGlmICghdGh1bWJzIHx8ICF0aHVtYnMuc3dpcGVyKSByZXR1cm47XG4gICAgaWYgKHR5cGVvZiB0aHVtYnMuc3dpcGVyID09PSAnc3RyaW5nJyB8fCB0aHVtYnMuc3dpcGVyIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICAgIGNvbnN0IGdldFRodW1ic0VsZW1lbnRBbmRJbml0ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0aHVtYnNFbGVtZW50ID0gdHlwZW9mIHRodW1icy5zd2lwZXIgPT09ICdzdHJpbmcnID8gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aHVtYnMuc3dpcGVyKSA6IHRodW1icy5zd2lwZXI7XG4gICAgICAgIGlmICh0aHVtYnNFbGVtZW50ICYmIHRodW1ic0VsZW1lbnQuc3dpcGVyKSB7XG4gICAgICAgICAgdGh1bWJzLnN3aXBlciA9IHRodW1ic0VsZW1lbnQuc3dpcGVyO1xuICAgICAgICAgIGluaXQoKTtcbiAgICAgICAgICB1cGRhdGUodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGh1bWJzRWxlbWVudCkge1xuICAgICAgICAgIGNvbnN0IGV2ZW50TmFtZSA9IGAke3N3aXBlci5wYXJhbXMuZXZlbnRzUHJlZml4fWluaXRgO1xuICAgICAgICAgIGNvbnN0IG9uVGh1bWJzU3dpcGVyID0gZSA9PiB7XG4gICAgICAgICAgICB0aHVtYnMuc3dpcGVyID0gZS5kZXRhaWxbMF07XG4gICAgICAgICAgICB0aHVtYnNFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBvblRodW1ic1N3aXBlcik7XG4gICAgICAgICAgICBpbml0KCk7XG4gICAgICAgICAgICB1cGRhdGUodHJ1ZSk7XG4gICAgICAgICAgICB0aHVtYnMuc3dpcGVyLnVwZGF0ZSgpO1xuICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZSgpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgdGh1bWJzRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgb25UaHVtYnNTd2lwZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aHVtYnNFbGVtZW50O1xuICAgICAgfTtcbiAgICAgIGNvbnN0IHdhdGNoRm9yVGh1bWJzVG9BcHBlYXIgPSAoKSA9PiB7XG4gICAgICAgIGlmIChzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHRodW1ic0VsZW1lbnQgPSBnZXRUaHVtYnNFbGVtZW50QW5kSW5pdCgpO1xuICAgICAgICBpZiAoIXRodW1ic0VsZW1lbnQpIHtcbiAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUod2F0Y2hGb3JUaHVtYnNUb0FwcGVhcik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUod2F0Y2hGb3JUaHVtYnNUb0FwcGVhcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluaXQoKTtcbiAgICAgIHVwZGF0ZSh0cnVlKTtcbiAgICB9XG4gIH0pO1xuICBvbignc2xpZGVDaGFuZ2UgdXBkYXRlIHJlc2l6ZSBvYnNlcnZlclVwZGF0ZScsICgpID0+IHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdzZXRUcmFuc2l0aW9uJywgKF9zLCBkdXJhdGlvbikgPT4ge1xuICAgIGNvbnN0IHRodW1ic1N3aXBlciA9IHN3aXBlci50aHVtYnMuc3dpcGVyO1xuICAgIGlmICghdGh1bWJzU3dpcGVyIHx8IHRodW1ic1N3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICB0aHVtYnNTd2lwZXIuc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gIH0pO1xuICBvbignYmVmb3JlRGVzdHJveScsICgpID0+IHtcbiAgICBjb25zdCB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICBpZiAoIXRodW1ic1N3aXBlciB8fCB0aHVtYnNTd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgaWYgKHN3aXBlckNyZWF0ZWQpIHtcbiAgICAgIHRodW1ic1N3aXBlci5kZXN0cm95KCk7XG4gICAgfVxuICB9KTtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIudGh1bWJzLCB7XG4gICAgaW5pdCxcbiAgICB1cGRhdGVcbiAgfSk7XG59XG5cbmV4cG9ydCB7IFRodW1iIGFzIGRlZmF1bHQgfTtcbiJdLCJuYW1lcyI6WyJnIiwiZ2V0RG9jdW1lbnQiLCJvIiwiaXNPYmplY3QiLCJlIiwiZWxlbWVudENoaWxkcmVuIiwiVGh1bWIiLCJfcmVmIiwic3dpcGVyIiwiZXh0ZW5kUGFyYW1zIiwib24iLCJ0aHVtYnMiLCJtdWx0aXBsZUFjdGl2ZVRodW1icyIsImF1dG9TY3JvbGxPZmZzZXQiLCJzbGlkZVRodW1iQWN0aXZlQ2xhc3MiLCJ0aHVtYnNDb250YWluZXJDbGFzcyIsImluaXRpYWxpemVkIiwic3dpcGVyQ3JlYXRlZCIsIm9uVGh1bWJDbGljayIsInRodW1ic1N3aXBlciIsImRlc3Ryb3llZCIsImNsaWNrZWRJbmRleCIsImNsaWNrZWRTbGlkZSIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwicGFyYW1zIiwic2xpZGVUb0luZGV4IiwibG9vcCIsInBhcnNlSW50IiwiZ2V0QXR0cmlidXRlIiwic2xpZGVUb0xvb3AiLCJzbGlkZVRvIiwiaW5pdCIsInRodW1ic1BhcmFtcyIsIlN3aXBlckNsYXNzIiwiY29uc3RydWN0b3IiLCJPYmplY3QiLCJhc3NpZ24iLCJvcmlnaW5hbFBhcmFtcyIsIndhdGNoU2xpZGVzUHJvZ3Jlc3MiLCJzbGlkZVRvQ2xpY2tlZFNsaWRlIiwidXBkYXRlIiwidGh1bWJzU3dpcGVyUGFyYW1zIiwiZWwiLCJhZGQiLCJpbml0aWFsIiwic2xpZGVzUGVyVmlldyIsInNsaWRlc1BlclZpZXdEeW5hbWljIiwidGh1bWJzVG9BY3RpdmF0ZSIsInRodW1iQWN0aXZlQ2xhc3MiLCJjZW50ZXJlZFNsaWRlcyIsIk1hdGgiLCJmbG9vciIsInNsaWRlcyIsImZvckVhY2giLCJzbGlkZUVsIiwicmVtb3ZlIiwidmlydHVhbCIsImVuYWJsZWQiLCJpIiwic2xpZGVzRWwiLCJyZWFsSW5kZXgiLCJ1c2VPZmZzZXQiLCJjdXJyZW50VGh1bWJzSW5kZXgiLCJhY3RpdmVJbmRleCIsIm5ld1RodW1ic0luZGV4IiwiZGlyZWN0aW9uIiwibmV3VGh1bWJzU2xpZGUiLCJmaW5kIiwiaW5kZXhPZiIsInByZXZpb3VzSW5kZXgiLCJ2aXNpYmxlU2xpZGVzSW5kZXhlcyIsInNsaWRlc1Blckdyb3VwIiwidW5kZWZpbmVkIiwiSFRNTEVsZW1lbnQiLCJkb2N1bWVudCIsImdldFRodW1ic0VsZW1lbnRBbmRJbml0IiwidGh1bWJzRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJldmVudE5hbWUiLCJldmVudHNQcmVmaXgiLCJvblRodW1ic1N3aXBlciIsImRldGFpbCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwid2F0Y2hGb3JUaHVtYnNUb0FwcGVhciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIl9zIiwiZHVyYXRpb24iLCJzZXRUcmFuc2l0aW9uIiwiZGVzdHJveSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/thumbs.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/virtual.mjs":
/*!*************************************************!*\
  !*** ./node_modules/swiper/modules/virtual.mjs ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Virtual; }\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n\n\nfunction Virtual(_ref) {\n    let { swiper, extendParams, on, emit } = _ref;\n    extendParams({\n        virtual: {\n            enabled: false,\n            slides: [],\n            cache: true,\n            renderSlide: null,\n            renderExternal: null,\n            renderExternalUpdate: true,\n            addSlidesBefore: 0,\n            addSlidesAfter: 0\n        }\n    });\n    let cssModeTimeout;\n    const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    swiper.virtual = {\n        cache: {},\n        from: undefined,\n        to: undefined,\n        slides: [],\n        offset: 0,\n        slidesGrid: []\n    };\n    const tempDOM = document.createElement(\"div\");\n    function renderSlide(slide, index) {\n        const params = swiper.params.virtual;\n        if (params.cache && swiper.virtual.cache[index]) {\n            return swiper.virtual.cache[index];\n        }\n        // eslint-disable-next-line\n        let slideEl;\n        if (params.renderSlide) {\n            slideEl = params.renderSlide.call(swiper, slide, index);\n            if (typeof slideEl === \"string\") {\n                (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(tempDOM, slideEl);\n                slideEl = tempDOM.children[0];\n            }\n        } else if (swiper.isElement) {\n            slideEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"swiper-slide\");\n        } else {\n            slideEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"div\", swiper.params.slideClass);\n        }\n        slideEl.setAttribute(\"data-swiper-slide-index\", index);\n        if (!params.renderSlide) {\n            (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(slideEl, slide);\n        }\n        if (params.cache) {\n            swiper.virtual.cache[index] = slideEl;\n        }\n        return slideEl;\n    }\n    function update(force, beforeInit, forceActiveIndex) {\n        const { slidesPerView, slidesPerGroup, centeredSlides, loop: isLoop, initialSlide } = swiper.params;\n        if (beforeInit && !isLoop && initialSlide > 0) {\n            return;\n        }\n        const { addSlidesBefore, addSlidesAfter } = swiper.params.virtual;\n        const { from: previousFrom, to: previousTo, slides, slidesGrid: previousSlidesGrid, offset: previousOffset } = swiper.virtual;\n        if (!swiper.params.cssMode) {\n            swiper.updateActiveIndex();\n        }\n        const activeIndex = typeof forceActiveIndex === \"undefined\" ? swiper.activeIndex || 0 : forceActiveIndex;\n        let offsetProp;\n        if (swiper.rtlTranslate) offsetProp = \"right\";\n        else offsetProp = swiper.isHorizontal() ? \"left\" : \"top\";\n        let slidesAfter;\n        let slidesBefore;\n        if (centeredSlides) {\n            slidesAfter = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesAfter;\n            slidesBefore = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesBefore;\n        } else {\n            slidesAfter = slidesPerView + (slidesPerGroup - 1) + addSlidesAfter;\n            slidesBefore = (isLoop ? slidesPerView : slidesPerGroup) + addSlidesBefore;\n        }\n        let from = activeIndex - slidesBefore;\n        let to = activeIndex + slidesAfter;\n        if (!isLoop) {\n            from = Math.max(from, 0);\n            to = Math.min(to, slides.length - 1);\n        }\n        let offset = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);\n        if (isLoop && activeIndex >= slidesBefore) {\n            from -= slidesBefore;\n            if (!centeredSlides) offset += swiper.slidesGrid[0];\n        } else if (isLoop && activeIndex < slidesBefore) {\n            from = -slidesBefore;\n            if (centeredSlides) offset += swiper.slidesGrid[0];\n        }\n        Object.assign(swiper.virtual, {\n            from,\n            to,\n            offset,\n            slidesGrid: swiper.slidesGrid,\n            slidesBefore,\n            slidesAfter\n        });\n        function onRendered() {\n            swiper.updateSlides();\n            swiper.updateProgress();\n            swiper.updateSlidesClasses();\n            emit(\"virtualUpdate\");\n        }\n        if (previousFrom === from && previousTo === to && !force) {\n            if (swiper.slidesGrid !== previousSlidesGrid && offset !== previousOffset) {\n                swiper.slides.forEach((slideEl)=>{\n                    slideEl.style[offsetProp] = \"\".concat(offset - Math.abs(swiper.cssOverflowAdjustment()), \"px\");\n                });\n            }\n            swiper.updateProgress();\n            emit(\"virtualUpdate\");\n            return;\n        }\n        if (swiper.params.virtual.renderExternal) {\n            swiper.params.virtual.renderExternal.call(swiper, {\n                offset,\n                from,\n                to,\n                slides: function getSlides() {\n                    const slidesToRender = [];\n                    for(let i = from; i <= to; i += 1){\n                        slidesToRender.push(slides[i]);\n                    }\n                    return slidesToRender;\n                }()\n            });\n            if (swiper.params.virtual.renderExternalUpdate) {\n                onRendered();\n            } else {\n                emit(\"virtualUpdate\");\n            }\n            return;\n        }\n        const prependIndexes = [];\n        const appendIndexes = [];\n        const getSlideIndex = (index)=>{\n            let slideIndex = index;\n            if (index < 0) {\n                slideIndex = slides.length + index;\n            } else if (slideIndex >= slides.length) {\n                // eslint-disable-next-line\n                slideIndex = slideIndex - slides.length;\n            }\n            return slideIndex;\n        };\n        if (force) {\n            swiper.slides.filter((el)=>el.matches(\".\".concat(swiper.params.slideClass, \", swiper-slide\"))).forEach((slideEl)=>{\n                slideEl.remove();\n            });\n        } else {\n            for(let i = previousFrom; i <= previousTo; i += 1){\n                if (i < from || i > to) {\n                    const slideIndex = getSlideIndex(i);\n                    swiper.slides.filter((el)=>el.matches(\".\".concat(swiper.params.slideClass, '[data-swiper-slide-index=\"').concat(slideIndex, '\"], swiper-slide[data-swiper-slide-index=\"').concat(slideIndex, '\"]'))).forEach((slideEl)=>{\n                        slideEl.remove();\n                    });\n                }\n            }\n        }\n        const loopFrom = isLoop ? -slides.length : 0;\n        const loopTo = isLoop ? slides.length * 2 : slides.length;\n        for(let i = loopFrom; i < loopTo; i += 1){\n            if (i >= from && i <= to) {\n                const slideIndex = getSlideIndex(i);\n                if (typeof previousTo === \"undefined\" || force) {\n                    appendIndexes.push(slideIndex);\n                } else {\n                    if (i > previousTo) appendIndexes.push(slideIndex);\n                    if (i < previousFrom) prependIndexes.push(slideIndex);\n                }\n            }\n        }\n        appendIndexes.forEach((index)=>{\n            swiper.slidesEl.append(renderSlide(slides[index], index));\n        });\n        if (isLoop) {\n            for(let i = prependIndexes.length - 1; i >= 0; i -= 1){\n                const index = prependIndexes[i];\n                swiper.slidesEl.prepend(renderSlide(slides[index], index));\n            }\n        } else {\n            prependIndexes.sort((a, b)=>b - a);\n            prependIndexes.forEach((index)=>{\n                swiper.slidesEl.prepend(renderSlide(slides[index], index));\n            });\n        }\n        (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(swiper.slidesEl, \".swiper-slide, swiper-slide\").forEach((slideEl)=>{\n            slideEl.style[offsetProp] = \"\".concat(offset - Math.abs(swiper.cssOverflowAdjustment()), \"px\");\n        });\n        onRendered();\n    }\n    function appendSlide(slides) {\n        if (typeof slides === \"object\" && \"length\" in slides) {\n            for(let i = 0; i < slides.length; i += 1){\n                if (slides[i]) swiper.virtual.slides.push(slides[i]);\n            }\n        } else {\n            swiper.virtual.slides.push(slides);\n        }\n        update(true);\n    }\n    function prependSlide(slides) {\n        const activeIndex = swiper.activeIndex;\n        let newActiveIndex = activeIndex + 1;\n        let numberOfNewSlides = 1;\n        if (Array.isArray(slides)) {\n            for(let i = 0; i < slides.length; i += 1){\n                if (slides[i]) swiper.virtual.slides.unshift(slides[i]);\n            }\n            newActiveIndex = activeIndex + slides.length;\n            numberOfNewSlides = slides.length;\n        } else {\n            swiper.virtual.slides.unshift(slides);\n        }\n        if (swiper.params.virtual.cache) {\n            const cache = swiper.virtual.cache;\n            const newCache = {};\n            Object.keys(cache).forEach((cachedIndex)=>{\n                const cachedEl = cache[cachedIndex];\n                const cachedElIndex = cachedEl.getAttribute(\"data-swiper-slide-index\");\n                if (cachedElIndex) {\n                    cachedEl.setAttribute(\"data-swiper-slide-index\", parseInt(cachedElIndex, 10) + numberOfNewSlides);\n                }\n                newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] = cachedEl;\n            });\n            swiper.virtual.cache = newCache;\n        }\n        update(true);\n        swiper.slideTo(newActiveIndex, 0);\n    }\n    function removeSlide(slidesIndexes) {\n        if (typeof slidesIndexes === \"undefined\" || slidesIndexes === null) return;\n        let activeIndex = swiper.activeIndex;\n        if (Array.isArray(slidesIndexes)) {\n            for(let i = slidesIndexes.length - 1; i >= 0; i -= 1){\n                if (swiper.params.virtual.cache) {\n                    delete swiper.virtual.cache[slidesIndexes[i]];\n                    // shift cache indexes\n                    Object.keys(swiper.virtual.cache).forEach((key)=>{\n                        if (key > slidesIndexes) {\n                            swiper.virtual.cache[key - 1] = swiper.virtual.cache[key];\n                            swiper.virtual.cache[key - 1].setAttribute(\"data-swiper-slide-index\", key - 1);\n                            delete swiper.virtual.cache[key];\n                        }\n                    });\n                }\n                swiper.virtual.slides.splice(slidesIndexes[i], 1);\n                if (slidesIndexes[i] < activeIndex) activeIndex -= 1;\n                activeIndex = Math.max(activeIndex, 0);\n            }\n        } else {\n            if (swiper.params.virtual.cache) {\n                delete swiper.virtual.cache[slidesIndexes];\n                // shift cache indexes\n                Object.keys(swiper.virtual.cache).forEach((key)=>{\n                    if (key > slidesIndexes) {\n                        swiper.virtual.cache[key - 1] = swiper.virtual.cache[key];\n                        swiper.virtual.cache[key - 1].setAttribute(\"data-swiper-slide-index\", key - 1);\n                        delete swiper.virtual.cache[key];\n                    }\n                });\n            }\n            swiper.virtual.slides.splice(slidesIndexes, 1);\n            if (slidesIndexes < activeIndex) activeIndex -= 1;\n            activeIndex = Math.max(activeIndex, 0);\n        }\n        update(true);\n        swiper.slideTo(activeIndex, 0);\n    }\n    function removeAllSlides() {\n        swiper.virtual.slides = [];\n        if (swiper.params.virtual.cache) {\n            swiper.virtual.cache = {};\n        }\n        update(true);\n        swiper.slideTo(0, 0);\n    }\n    on(\"beforeInit\", ()=>{\n        if (!swiper.params.virtual.enabled) return;\n        let domSlidesAssigned;\n        if (typeof swiper.passedParams.virtual.slides === \"undefined\") {\n            const slides = [\n                ...swiper.slidesEl.children\n            ].filter((el)=>el.matches(\".\".concat(swiper.params.slideClass, \", swiper-slide\")));\n            if (slides && slides.length) {\n                swiper.virtual.slides = [\n                    ...slides\n                ];\n                domSlidesAssigned = true;\n                slides.forEach((slideEl, slideIndex)=>{\n                    slideEl.setAttribute(\"data-swiper-slide-index\", slideIndex);\n                    swiper.virtual.cache[slideIndex] = slideEl;\n                    slideEl.remove();\n                });\n            }\n        }\n        if (!domSlidesAssigned) {\n            swiper.virtual.slides = swiper.params.virtual.slides;\n        }\n        swiper.classNames.push(\"\".concat(swiper.params.containerModifierClass, \"virtual\"));\n        swiper.params.watchSlidesProgress = true;\n        swiper.originalParams.watchSlidesProgress = true;\n        update(false, true);\n    });\n    on(\"setTranslate\", ()=>{\n        if (!swiper.params.virtual.enabled) return;\n        if (swiper.params.cssMode && !swiper._immediateVirtual) {\n            clearTimeout(cssModeTimeout);\n            cssModeTimeout = setTimeout(()=>{\n                update();\n            }, 100);\n        } else {\n            update();\n        }\n    });\n    on(\"init update resize\", ()=>{\n        if (!swiper.params.virtual.enabled) return;\n        if (swiper.params.cssMode) {\n            (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(swiper.wrapperEl, \"--swiper-virtual-size\", \"\".concat(swiper.virtualSize, \"px\"));\n        }\n    });\n    Object.assign(swiper.virtual, {\n        appendSlide,\n        prependSlide,\n        removeSlide,\n        removeAllSlides,\n        update\n    });\n}\n_c = Virtual;\n\nvar _c;\n$RefreshReg$(_c, \"Virtual\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/virtual.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/modules/zoom.mjs":
/*!**********************************************!*\
  !*** ./node_modules/swiper/modules/zoom.mjs ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Zoom; }\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n\n\nfunction Zoom(_ref) {\n    let { swiper, extendParams, on, emit } = _ref;\n    const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    extendParams({\n        zoom: {\n            enabled: false,\n            limitToOriginalSize: false,\n            maxRatio: 3,\n            minRatio: 1,\n            panOnMouseMove: false,\n            toggle: true,\n            containerClass: \"swiper-zoom-container\",\n            zoomedSlideClass: \"swiper-slide-zoomed\"\n        }\n    });\n    swiper.zoom = {\n        enabled: false\n    };\n    let currentScale = 1;\n    let isScaling = false;\n    let isPanningWithMouse = false;\n    let mousePanStart = {\n        x: 0,\n        y: 0\n    };\n    const mousePanSensitivity = -3; // Negative to invert pan direction\n    let fakeGestureTouched;\n    let fakeGestureMoved;\n    const evCache = [];\n    const gesture = {\n        originX: 0,\n        originY: 0,\n        slideEl: undefined,\n        slideWidth: undefined,\n        slideHeight: undefined,\n        imageEl: undefined,\n        imageWrapEl: undefined,\n        maxRatio: 3\n    };\n    const image = {\n        isTouched: undefined,\n        isMoved: undefined,\n        currentX: undefined,\n        currentY: undefined,\n        minX: undefined,\n        minY: undefined,\n        maxX: undefined,\n        maxY: undefined,\n        width: undefined,\n        height: undefined,\n        startX: undefined,\n        startY: undefined,\n        touchesStart: {},\n        touchesCurrent: {}\n    };\n    const velocity = {\n        x: undefined,\n        y: undefined,\n        prevPositionX: undefined,\n        prevPositionY: undefined,\n        prevTime: undefined\n    };\n    let scale = 1;\n    Object.defineProperty(swiper.zoom, \"scale\", {\n        get () {\n            return scale;\n        },\n        set (value) {\n            if (scale !== value) {\n                const imageEl = gesture.imageEl;\n                const slideEl = gesture.slideEl;\n                emit(\"zoomChange\", value, imageEl, slideEl);\n            }\n            scale = value;\n        }\n    });\n    function getDistanceBetweenTouches() {\n        if (evCache.length < 2) return 1;\n        const x1 = evCache[0].pageX;\n        const y1 = evCache[0].pageY;\n        const x2 = evCache[1].pageX;\n        const y2 = evCache[1].pageY;\n        const distance = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n        return distance;\n    }\n    function getMaxRatio() {\n        const params = swiper.params.zoom;\n        const maxRatio = gesture.imageWrapEl.getAttribute(\"data-swiper-zoom\") || params.maxRatio;\n        if (params.limitToOriginalSize && gesture.imageEl && gesture.imageEl.naturalWidth) {\n            const imageMaxRatio = gesture.imageEl.naturalWidth / gesture.imageEl.offsetWidth;\n            return Math.min(imageMaxRatio, maxRatio);\n        }\n        return maxRatio;\n    }\n    function getScaleOrigin() {\n        if (evCache.length < 2) return {\n            x: null,\n            y: null\n        };\n        const box = gesture.imageEl.getBoundingClientRect();\n        return [\n            (evCache[0].pageX + (evCache[1].pageX - evCache[0].pageX) / 2 - box.x - window.scrollX) / currentScale,\n            (evCache[0].pageY + (evCache[1].pageY - evCache[0].pageY) / 2 - box.y - window.scrollY) / currentScale\n        ];\n    }\n    function getSlideSelector() {\n        return swiper.isElement ? \"swiper-slide\" : \".\".concat(swiper.params.slideClass);\n    }\n    function eventWithinSlide(e) {\n        const slideSelector = getSlideSelector();\n        if (e.target.matches(slideSelector)) return true;\n        if (swiper.slides.filter((slideEl)=>slideEl.contains(e.target)).length > 0) return true;\n        return false;\n    }\n    function eventWithinZoomContainer(e) {\n        const selector = \".\".concat(swiper.params.zoom.containerClass);\n        if (e.target.matches(selector)) return true;\n        if ([\n            ...swiper.hostEl.querySelectorAll(selector)\n        ].filter((containerEl)=>containerEl.contains(e.target)).length > 0) return true;\n        return false;\n    }\n    // Events\n    function onGestureStart(e) {\n        if (e.pointerType === \"mouse\") {\n            evCache.splice(0, evCache.length);\n        }\n        if (!eventWithinSlide(e)) return;\n        const params = swiper.params.zoom;\n        fakeGestureTouched = false;\n        fakeGestureMoved = false;\n        evCache.push(e);\n        if (evCache.length < 2) {\n            return;\n        }\n        fakeGestureTouched = true;\n        gesture.scaleStart = getDistanceBetweenTouches();\n        if (!gesture.slideEl) {\n            gesture.slideEl = e.target.closest(\".\".concat(swiper.params.slideClass, \", swiper-slide\"));\n            if (!gesture.slideEl) gesture.slideEl = swiper.slides[swiper.activeIndex];\n            let imageEl = gesture.slideEl.querySelector(\".\".concat(params.containerClass));\n            if (imageEl) {\n                imageEl = imageEl.querySelectorAll(\"picture, img, svg, canvas, .swiper-zoom-target\")[0];\n            }\n            gesture.imageEl = imageEl;\n            if (imageEl) {\n                gesture.imageWrapEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(gesture.imageEl, \".\".concat(params.containerClass))[0];\n            } else {\n                gesture.imageWrapEl = undefined;\n            }\n            if (!gesture.imageWrapEl) {\n                gesture.imageEl = undefined;\n                return;\n            }\n            gesture.maxRatio = getMaxRatio();\n        }\n        if (gesture.imageEl) {\n            const [originX, originY] = getScaleOrigin();\n            gesture.originX = originX;\n            gesture.originY = originY;\n            gesture.imageEl.style.transitionDuration = \"0ms\";\n        }\n        isScaling = true;\n    }\n    function onGestureChange(e) {\n        if (!eventWithinSlide(e)) return;\n        const params = swiper.params.zoom;\n        const zoom = swiper.zoom;\n        const pointerIndex = evCache.findIndex((cachedEv)=>cachedEv.pointerId === e.pointerId);\n        if (pointerIndex >= 0) evCache[pointerIndex] = e;\n        if (evCache.length < 2) {\n            return;\n        }\n        fakeGestureMoved = true;\n        gesture.scaleMove = getDistanceBetweenTouches();\n        if (!gesture.imageEl) {\n            return;\n        }\n        zoom.scale = gesture.scaleMove / gesture.scaleStart * currentScale;\n        if (zoom.scale > gesture.maxRatio) {\n            zoom.scale = gesture.maxRatio - 1 + (zoom.scale - gesture.maxRatio + 1) ** 0.5;\n        }\n        if (zoom.scale < params.minRatio) {\n            zoom.scale = params.minRatio + 1 - (params.minRatio - zoom.scale + 1) ** 0.5;\n        }\n        gesture.imageEl.style.transform = \"translate3d(0,0,0) scale(\".concat(zoom.scale, \")\");\n    }\n    function onGestureEnd(e) {\n        if (!eventWithinSlide(e)) return;\n        if (e.pointerType === \"mouse\" && e.type === \"pointerout\") return;\n        const params = swiper.params.zoom;\n        const zoom = swiper.zoom;\n        const pointerIndex = evCache.findIndex((cachedEv)=>cachedEv.pointerId === e.pointerId);\n        if (pointerIndex >= 0) evCache.splice(pointerIndex, 1);\n        if (!fakeGestureTouched || !fakeGestureMoved) {\n            return;\n        }\n        fakeGestureTouched = false;\n        fakeGestureMoved = false;\n        if (!gesture.imageEl) return;\n        zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);\n        gesture.imageEl.style.transitionDuration = \"\".concat(swiper.params.speed, \"ms\");\n        gesture.imageEl.style.transform = \"translate3d(0,0,0) scale(\".concat(zoom.scale, \")\");\n        currentScale = zoom.scale;\n        isScaling = false;\n        if (zoom.scale > 1 && gesture.slideEl) {\n            gesture.slideEl.classList.add(\"\".concat(params.zoomedSlideClass));\n        } else if (zoom.scale <= 1 && gesture.slideEl) {\n            gesture.slideEl.classList.remove(\"\".concat(params.zoomedSlideClass));\n        }\n        if (zoom.scale === 1) {\n            gesture.originX = 0;\n            gesture.originY = 0;\n            gesture.slideEl = undefined;\n        }\n    }\n    let allowTouchMoveTimeout;\n    function allowTouchMove() {\n        swiper.touchEventsData.preventTouchMoveFromPointerMove = false;\n    }\n    function preventTouchMove() {\n        clearTimeout(allowTouchMoveTimeout);\n        swiper.touchEventsData.preventTouchMoveFromPointerMove = true;\n        allowTouchMoveTimeout = setTimeout(()=>{\n            if (swiper.destroyed) return;\n            allowTouchMove();\n        });\n    }\n    function onTouchStart(e) {\n        const device = swiper.device;\n        if (!gesture.imageEl) return;\n        if (image.isTouched) return;\n        if (device.android && e.cancelable) e.preventDefault();\n        image.isTouched = true;\n        const event = evCache.length > 0 ? evCache[0] : e;\n        image.touchesStart.x = event.pageX;\n        image.touchesStart.y = event.pageY;\n    }\n    function onTouchMove(e) {\n        const isMouseEvent = e.pointerType === \"mouse\";\n        const isMousePan = isMouseEvent && swiper.params.zoom.panOnMouseMove;\n        if (!eventWithinSlide(e) || !eventWithinZoomContainer(e)) {\n            return;\n        }\n        const zoom = swiper.zoom;\n        if (!gesture.imageEl) {\n            return;\n        }\n        if (!image.isTouched || !gesture.slideEl) {\n            if (isMousePan) onMouseMove(e);\n            return;\n        }\n        if (isMousePan) {\n            onMouseMove(e);\n            return;\n        }\n        if (!image.isMoved) {\n            image.width = gesture.imageEl.offsetWidth || gesture.imageEl.clientWidth;\n            image.height = gesture.imageEl.offsetHeight || gesture.imageEl.clientHeight;\n            image.startX = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.k)(gesture.imageWrapEl, \"x\") || 0;\n            image.startY = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.k)(gesture.imageWrapEl, \"y\") || 0;\n            gesture.slideWidth = gesture.slideEl.offsetWidth;\n            gesture.slideHeight = gesture.slideEl.offsetHeight;\n            gesture.imageWrapEl.style.transitionDuration = \"0ms\";\n        }\n        // Define if we need image drag\n        const scaledWidth = image.width * zoom.scale;\n        const scaledHeight = image.height * zoom.scale;\n        image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\n        image.maxX = -image.minX;\n        image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\n        image.maxY = -image.minY;\n        image.touchesCurrent.x = evCache.length > 0 ? evCache[0].pageX : e.pageX;\n        image.touchesCurrent.y = evCache.length > 0 ? evCache[0].pageY : e.pageY;\n        const touchesDiff = Math.max(Math.abs(image.touchesCurrent.x - image.touchesStart.x), Math.abs(image.touchesCurrent.y - image.touchesStart.y));\n        if (touchesDiff > 5) {\n            swiper.allowClick = false;\n        }\n        if (!image.isMoved && !isScaling) {\n            if (swiper.isHorizontal() && (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x || Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)) {\n                image.isTouched = false;\n                allowTouchMove();\n                return;\n            }\n            if (!swiper.isHorizontal() && (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y || Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)) {\n                image.isTouched = false;\n                allowTouchMove();\n                return;\n            }\n        }\n        if (e.cancelable) {\n            e.preventDefault();\n        }\n        e.stopPropagation();\n        preventTouchMove();\n        image.isMoved = true;\n        const scaleRatio = (zoom.scale - currentScale) / (gesture.maxRatio - swiper.params.zoom.minRatio);\n        const { originX, originY } = gesture;\n        image.currentX = image.touchesCurrent.x - image.touchesStart.x + image.startX + scaleRatio * (image.width - originX * 2);\n        image.currentY = image.touchesCurrent.y - image.touchesStart.y + image.startY + scaleRatio * (image.height - originY * 2);\n        if (image.currentX < image.minX) {\n            image.currentX = image.minX + 1 - (image.minX - image.currentX + 1) ** 0.8;\n        }\n        if (image.currentX > image.maxX) {\n            image.currentX = image.maxX - 1 + (image.currentX - image.maxX + 1) ** 0.8;\n        }\n        if (image.currentY < image.minY) {\n            image.currentY = image.minY + 1 - (image.minY - image.currentY + 1) ** 0.8;\n        }\n        if (image.currentY > image.maxY) {\n            image.currentY = image.maxY - 1 + (image.currentY - image.maxY + 1) ** 0.8;\n        }\n        // Velocity\n        if (!velocity.prevPositionX) velocity.prevPositionX = image.touchesCurrent.x;\n        if (!velocity.prevPositionY) velocity.prevPositionY = image.touchesCurrent.y;\n        if (!velocity.prevTime) velocity.prevTime = Date.now();\n        velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;\n        velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;\n        if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2) velocity.x = 0;\n        if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2) velocity.y = 0;\n        velocity.prevPositionX = image.touchesCurrent.x;\n        velocity.prevPositionY = image.touchesCurrent.y;\n        velocity.prevTime = Date.now();\n        gesture.imageWrapEl.style.transform = \"translate3d(\".concat(image.currentX, \"px, \").concat(image.currentY, \"px,0)\");\n    }\n    function onTouchEnd() {\n        const zoom = swiper.zoom;\n        evCache.length = 0;\n        if (!gesture.imageEl) return;\n        if (!image.isTouched || !image.isMoved) {\n            image.isTouched = false;\n            image.isMoved = false;\n            return;\n        }\n        image.isTouched = false;\n        image.isMoved = false;\n        let momentumDurationX = 300;\n        let momentumDurationY = 300;\n        const momentumDistanceX = velocity.x * momentumDurationX;\n        const newPositionX = image.currentX + momentumDistanceX;\n        const momentumDistanceY = velocity.y * momentumDurationY;\n        const newPositionY = image.currentY + momentumDistanceY;\n        // Fix duration\n        if (velocity.x !== 0) momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x);\n        if (velocity.y !== 0) momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y);\n        const momentumDuration = Math.max(momentumDurationX, momentumDurationY);\n        image.currentX = newPositionX;\n        image.currentY = newPositionY;\n        // Define if we need image drag\n        const scaledWidth = image.width * zoom.scale;\n        const scaledHeight = image.height * zoom.scale;\n        image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\n        image.maxX = -image.minX;\n        image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\n        image.maxY = -image.minY;\n        image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);\n        image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);\n        gesture.imageWrapEl.style.transitionDuration = \"\".concat(momentumDuration, \"ms\");\n        gesture.imageWrapEl.style.transform = \"translate3d(\".concat(image.currentX, \"px, \").concat(image.currentY, \"px,0)\");\n    }\n    function onTransitionEnd() {\n        const zoom = swiper.zoom;\n        if (gesture.slideEl && swiper.activeIndex !== swiper.slides.indexOf(gesture.slideEl)) {\n            if (gesture.imageEl) {\n                gesture.imageEl.style.transform = \"translate3d(0,0,0) scale(1)\";\n            }\n            if (gesture.imageWrapEl) {\n                gesture.imageWrapEl.style.transform = \"translate3d(0,0,0)\";\n            }\n            gesture.slideEl.classList.remove(\"\".concat(swiper.params.zoom.zoomedSlideClass));\n            zoom.scale = 1;\n            currentScale = 1;\n            gesture.slideEl = undefined;\n            gesture.imageEl = undefined;\n            gesture.imageWrapEl = undefined;\n            gesture.originX = 0;\n            gesture.originY = 0;\n        }\n    }\n    function onMouseMove(e) {\n        // Only pan if zoomed in and mouse panning is enabled\n        if (currentScale <= 1 || !gesture.imageWrapEl) return;\n        if (!eventWithinSlide(e) || !eventWithinZoomContainer(e)) return;\n        const currentTransform = window.getComputedStyle(gesture.imageWrapEl).transform;\n        const matrix = new window.DOMMatrix(currentTransform);\n        if (!isPanningWithMouse) {\n            isPanningWithMouse = true;\n            mousePanStart.x = e.clientX;\n            mousePanStart.y = e.clientY;\n            image.startX = matrix.e;\n            image.startY = matrix.f;\n            image.width = gesture.imageEl.offsetWidth || gesture.imageEl.clientWidth;\n            image.height = gesture.imageEl.offsetHeight || gesture.imageEl.clientHeight;\n            gesture.slideWidth = gesture.slideEl.offsetWidth;\n            gesture.slideHeight = gesture.slideEl.offsetHeight;\n            return;\n        }\n        const deltaX = (e.clientX - mousePanStart.x) * mousePanSensitivity;\n        const deltaY = (e.clientY - mousePanStart.y) * mousePanSensitivity;\n        const scaledWidth = image.width * currentScale;\n        const scaledHeight = image.height * currentScale;\n        const slideWidth = gesture.slideWidth;\n        const slideHeight = gesture.slideHeight;\n        const minX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);\n        const maxX = -minX;\n        const minY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);\n        const maxY = -minY;\n        const newX = Math.max(Math.min(image.startX + deltaX, maxX), minX);\n        const newY = Math.max(Math.min(image.startY + deltaY, maxY), minY);\n        gesture.imageWrapEl.style.transitionDuration = \"0ms\";\n        gesture.imageWrapEl.style.transform = \"translate3d(\".concat(newX, \"px, \").concat(newY, \"px, 0)\");\n        mousePanStart.x = e.clientX;\n        mousePanStart.y = e.clientY;\n        image.startX = newX;\n        image.startY = newY;\n        image.currentX = newX;\n        image.currentY = newY;\n    }\n    function zoomIn(e) {\n        const zoom = swiper.zoom;\n        const params = swiper.params.zoom;\n        if (!gesture.slideEl) {\n            if (e && e.target) {\n                gesture.slideEl = e.target.closest(\".\".concat(swiper.params.slideClass, \", swiper-slide\"));\n            }\n            if (!gesture.slideEl) {\n                if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\n                    gesture.slideEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(swiper.slidesEl, \".\".concat(swiper.params.slideActiveClass))[0];\n                } else {\n                    gesture.slideEl = swiper.slides[swiper.activeIndex];\n                }\n            }\n            let imageEl = gesture.slideEl.querySelector(\".\".concat(params.containerClass));\n            if (imageEl) {\n                imageEl = imageEl.querySelectorAll(\"picture, img, svg, canvas, .swiper-zoom-target\")[0];\n            }\n            gesture.imageEl = imageEl;\n            if (imageEl) {\n                gesture.imageWrapEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(gesture.imageEl, \".\".concat(params.containerClass))[0];\n            } else {\n                gesture.imageWrapEl = undefined;\n            }\n        }\n        if (!gesture.imageEl || !gesture.imageWrapEl) return;\n        if (swiper.params.cssMode) {\n            swiper.wrapperEl.style.overflow = \"hidden\";\n            swiper.wrapperEl.style.touchAction = \"none\";\n        }\n        gesture.slideEl.classList.add(\"\".concat(params.zoomedSlideClass));\n        let touchX;\n        let touchY;\n        let offsetX;\n        let offsetY;\n        let diffX;\n        let diffY;\n        let translateX;\n        let translateY;\n        let imageWidth;\n        let imageHeight;\n        let scaledWidth;\n        let scaledHeight;\n        let translateMinX;\n        let translateMinY;\n        let translateMaxX;\n        let translateMaxY;\n        let slideWidth;\n        let slideHeight;\n        if (typeof image.touchesStart.x === \"undefined\" && e) {\n            touchX = e.pageX;\n            touchY = e.pageY;\n        } else {\n            touchX = image.touchesStart.x;\n            touchY = image.touchesStart.y;\n        }\n        const prevScale = currentScale;\n        const forceZoomRatio = typeof e === \"number\" ? e : null;\n        if (currentScale === 1 && forceZoomRatio) {\n            touchX = undefined;\n            touchY = undefined;\n            image.touchesStart.x = undefined;\n            image.touchesStart.y = undefined;\n        }\n        const maxRatio = getMaxRatio();\n        zoom.scale = forceZoomRatio || maxRatio;\n        currentScale = forceZoomRatio || maxRatio;\n        if (e && !(currentScale === 1 && forceZoomRatio)) {\n            slideWidth = gesture.slideEl.offsetWidth;\n            slideHeight = gesture.slideEl.offsetHeight;\n            offsetX = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(gesture.slideEl).left + window.scrollX;\n            offsetY = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(gesture.slideEl).top + window.scrollY;\n            diffX = offsetX + slideWidth / 2 - touchX;\n            diffY = offsetY + slideHeight / 2 - touchY;\n            imageWidth = gesture.imageEl.offsetWidth || gesture.imageEl.clientWidth;\n            imageHeight = gesture.imageEl.offsetHeight || gesture.imageEl.clientHeight;\n            scaledWidth = imageWidth * zoom.scale;\n            scaledHeight = imageHeight * zoom.scale;\n            translateMinX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);\n            translateMinY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);\n            translateMaxX = -translateMinX;\n            translateMaxY = -translateMinY;\n            if (prevScale > 0 && forceZoomRatio && typeof image.currentX === \"number\" && typeof image.currentY === \"number\") {\n                translateX = image.currentX * zoom.scale / prevScale;\n                translateY = image.currentY * zoom.scale / prevScale;\n            } else {\n                translateX = diffX * zoom.scale;\n                translateY = diffY * zoom.scale;\n            }\n            if (translateX < translateMinX) {\n                translateX = translateMinX;\n            }\n            if (translateX > translateMaxX) {\n                translateX = translateMaxX;\n            }\n            if (translateY < translateMinY) {\n                translateY = translateMinY;\n            }\n            if (translateY > translateMaxY) {\n                translateY = translateMaxY;\n            }\n        } else {\n            translateX = 0;\n            translateY = 0;\n        }\n        if (forceZoomRatio && zoom.scale === 1) {\n            gesture.originX = 0;\n            gesture.originY = 0;\n        }\n        image.currentX = translateX;\n        image.currentY = translateY;\n        gesture.imageWrapEl.style.transitionDuration = \"300ms\";\n        gesture.imageWrapEl.style.transform = \"translate3d(\".concat(translateX, \"px, \").concat(translateY, \"px,0)\");\n        gesture.imageEl.style.transitionDuration = \"300ms\";\n        gesture.imageEl.style.transform = \"translate3d(0,0,0) scale(\".concat(zoom.scale, \")\");\n    }\n    function zoomOut() {\n        const zoom = swiper.zoom;\n        const params = swiper.params.zoom;\n        if (!gesture.slideEl) {\n            if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\n                gesture.slideEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(swiper.slidesEl, \".\".concat(swiper.params.slideActiveClass))[0];\n            } else {\n                gesture.slideEl = swiper.slides[swiper.activeIndex];\n            }\n            let imageEl = gesture.slideEl.querySelector(\".\".concat(params.containerClass));\n            if (imageEl) {\n                imageEl = imageEl.querySelectorAll(\"picture, img, svg, canvas, .swiper-zoom-target\")[0];\n            }\n            gesture.imageEl = imageEl;\n            if (imageEl) {\n                gesture.imageWrapEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(gesture.imageEl, \".\".concat(params.containerClass))[0];\n            } else {\n                gesture.imageWrapEl = undefined;\n            }\n        }\n        if (!gesture.imageEl || !gesture.imageWrapEl) return;\n        if (swiper.params.cssMode) {\n            swiper.wrapperEl.style.overflow = \"\";\n            swiper.wrapperEl.style.touchAction = \"\";\n        }\n        zoom.scale = 1;\n        currentScale = 1;\n        image.currentX = undefined;\n        image.currentY = undefined;\n        image.touchesStart.x = undefined;\n        image.touchesStart.y = undefined;\n        gesture.imageWrapEl.style.transitionDuration = \"300ms\";\n        gesture.imageWrapEl.style.transform = \"translate3d(0,0,0)\";\n        gesture.imageEl.style.transitionDuration = \"300ms\";\n        gesture.imageEl.style.transform = \"translate3d(0,0,0) scale(1)\";\n        gesture.slideEl.classList.remove(\"\".concat(params.zoomedSlideClass));\n        gesture.slideEl = undefined;\n        gesture.originX = 0;\n        gesture.originY = 0;\n        if (swiper.params.zoom.panOnMouseMove) {\n            mousePanStart = {\n                x: 0,\n                y: 0\n            };\n            if (isPanningWithMouse) {\n                isPanningWithMouse = false;\n                image.startX = 0;\n                image.startY = 0;\n            }\n        }\n    }\n    // Toggle Zoom\n    function zoomToggle(e) {\n        const zoom = swiper.zoom;\n        if (zoom.scale && zoom.scale !== 1) {\n            // Zoom Out\n            zoomOut();\n        } else {\n            // Zoom In\n            zoomIn(e);\n        }\n    }\n    function getListeners() {\n        const passiveListener = swiper.params.passiveListeners ? {\n            passive: true,\n            capture: false\n        } : false;\n        const activeListenerWithCapture = swiper.params.passiveListeners ? {\n            passive: false,\n            capture: true\n        } : true;\n        return {\n            passiveListener,\n            activeListenerWithCapture\n        };\n    }\n    // Attach/Detach Events\n    function enable() {\n        const zoom = swiper.zoom;\n        if (zoom.enabled) return;\n        zoom.enabled = true;\n        const { passiveListener, activeListenerWithCapture } = getListeners();\n        // Scale image\n        swiper.wrapperEl.addEventListener(\"pointerdown\", onGestureStart, passiveListener);\n        swiper.wrapperEl.addEventListener(\"pointermove\", onGestureChange, activeListenerWithCapture);\n        [\n            \"pointerup\",\n            \"pointercancel\",\n            \"pointerout\"\n        ].forEach((eventName)=>{\n            swiper.wrapperEl.addEventListener(eventName, onGestureEnd, passiveListener);\n        });\n        // Move image\n        swiper.wrapperEl.addEventListener(\"pointermove\", onTouchMove, activeListenerWithCapture);\n    }\n    function disable() {\n        const zoom = swiper.zoom;\n        if (!zoom.enabled) return;\n        zoom.enabled = false;\n        const { passiveListener, activeListenerWithCapture } = getListeners();\n        // Scale image\n        swiper.wrapperEl.removeEventListener(\"pointerdown\", onGestureStart, passiveListener);\n        swiper.wrapperEl.removeEventListener(\"pointermove\", onGestureChange, activeListenerWithCapture);\n        [\n            \"pointerup\",\n            \"pointercancel\",\n            \"pointerout\"\n        ].forEach((eventName)=>{\n            swiper.wrapperEl.removeEventListener(eventName, onGestureEnd, passiveListener);\n        });\n        // Move image\n        swiper.wrapperEl.removeEventListener(\"pointermove\", onTouchMove, activeListenerWithCapture);\n    }\n    on(\"init\", ()=>{\n        if (swiper.params.zoom.enabled) {\n            enable();\n        }\n    });\n    on(\"destroy\", ()=>{\n        disable();\n    });\n    on(\"touchStart\", (_s, e)=>{\n        if (!swiper.zoom.enabled) return;\n        onTouchStart(e);\n    });\n    on(\"touchEnd\", (_s, e)=>{\n        if (!swiper.zoom.enabled) return;\n        onTouchEnd();\n    });\n    on(\"doubleTap\", (_s, e)=>{\n        if (!swiper.animating && swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {\n            zoomToggle(e);\n        }\n    });\n    on(\"transitionEnd\", ()=>{\n        if (swiper.zoom.enabled && swiper.params.zoom.enabled) {\n            onTransitionEnd();\n        }\n    });\n    on(\"slideChange\", ()=>{\n        if (swiper.zoom.enabled && swiper.params.zoom.enabled && swiper.params.cssMode) {\n            onTransitionEnd();\n        }\n    });\n    Object.assign(swiper.zoom, {\n        enable,\n        disable,\n        in: zoomIn,\n        out: zoomOut,\n        toggle: zoomToggle\n    });\n}\n_c = Zoom;\n\nvar _c;\n$RefreshReg$(_c, \"Zoom\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/modules/zoom.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/shared/classes-to-selector.mjs":
/*!************************************************************!*\
  !*** ./node_modules/swiper/shared/classes-to-selector.mjs ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: function() { return /* binding */ classesToSelector; }\n/* harmony export */ });\nfunction classesToSelector(classes) {\n    if (classes === void 0) {\n        classes = \"\";\n    }\n    return \".\".concat(classes.trim().replace(/([\\.:!+\\/])/g, \"\\\\$1\") // eslint-disable-line\n    .replace(/ /g, \".\"));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2NsYXNzZXMtdG8tc2VsZWN0b3IubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxTQUFTQSxrQkFBa0JDLE9BQU87SUFDaEMsSUFBSUEsWUFBWSxLQUFLLEdBQUc7UUFDdEJBLFVBQVU7SUFDWjtJQUNBLE9BQU8sSUFDYSxPQURUQSxRQUFRQyxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxnQkFBZ0IsUUFBUSxzQkFBc0I7S0FDL0VBLE9BQU8sQ0FBQyxNQUFNO0FBQ2pCO0FBRWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2NsYXNzZXMtdG8tc2VsZWN0b3IubWpzP2U1OTkiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gY2xhc3Nlc1RvU2VsZWN0b3IoY2xhc3Nlcykge1xuICBpZiAoY2xhc3NlcyA9PT0gdm9pZCAwKSB7XG4gICAgY2xhc3NlcyA9ICcnO1xuICB9XG4gIHJldHVybiBgLiR7Y2xhc3Nlcy50cmltKCkucmVwbGFjZSgvKFtcXC46IStcXC9dKS9nLCAnXFxcXCQxJykgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAucmVwbGFjZSgvIC9nLCAnLicpfWA7XG59XG5cbmV4cG9ydCB7IGNsYXNzZXNUb1NlbGVjdG9yIGFzIGMgfTtcbiJdLCJuYW1lcyI6WyJjbGFzc2VzVG9TZWxlY3RvciIsImNsYXNzZXMiLCJ0cmltIiwicmVwbGFjZSIsImMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/shared/classes-to-selector.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/shared/create-element-if-not-defined.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/swiper/shared/create-element-if-not-defined.mjs ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: function() { return /* binding */ createElementIfNotDefined; }\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n\nfunction createElementIfNotDefined(swiper, originalParams, params, checkProps) {\n    if (swiper.params.createElements) {\n        Object.keys(checkProps).forEach((key)=>{\n            if (!params[key] && params.auto === true) {\n                let element = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(swiper.el, \".\".concat(checkProps[key]))[0];\n                if (!element) {\n                    element = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\"div\", checkProps[key]);\n                    element.className = checkProps[key];\n                    swiper.el.append(element);\n                }\n                params[key] = element;\n                originalParams[key] = element;\n            }\n        });\n    }\n    return params;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2NyZWF0ZS1lbGVtZW50LWlmLW5vdC1kZWZpbmVkLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF1RTtBQUV2RSxTQUFTSSwwQkFBMEJDLE1BQU0sRUFBRUMsY0FBYyxFQUFFQyxNQUFNLEVBQUVDLFVBQVU7SUFDM0UsSUFBSUgsT0FBT0UsTUFBTSxDQUFDRSxjQUFjLEVBQUU7UUFDaENDLE9BQU9DLElBQUksQ0FBQ0gsWUFBWUksT0FBTyxDQUFDQyxDQUFBQTtZQUM5QixJQUFJLENBQUNOLE1BQU0sQ0FBQ00sSUFBSSxJQUFJTixPQUFPTyxJQUFJLEtBQUssTUFBTTtnQkFDeEMsSUFBSUMsVUFBVWQsNkNBQWVBLENBQUNJLE9BQU9XLEVBQUUsRUFBRSxJQUFvQixPQUFoQlIsVUFBVSxDQUFDSyxJQUFJLEVBQUcsQ0FBQyxFQUFFO2dCQUNsRSxJQUFJLENBQUNFLFNBQVM7b0JBQ1pBLFVBQVVaLDZDQUFhQSxDQUFDLE9BQU9LLFVBQVUsQ0FBQ0ssSUFBSTtvQkFDOUNFLFFBQVFFLFNBQVMsR0FBR1QsVUFBVSxDQUFDSyxJQUFJO29CQUNuQ1IsT0FBT1csRUFBRSxDQUFDRSxNQUFNLENBQUNIO2dCQUNuQjtnQkFDQVIsTUFBTSxDQUFDTSxJQUFJLEdBQUdFO2dCQUNkVCxjQUFjLENBQUNPLElBQUksR0FBR0U7WUFDeEI7UUFDRjtJQUNGO0lBQ0EsT0FBT1I7QUFDVDtBQUUwQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9jcmVhdGUtZWxlbWVudC1pZi1ub3QtZGVmaW5lZC5tanM/OTA2NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlIGFzIGVsZW1lbnRDaGlsZHJlbiwgYyBhcyBjcmVhdGVFbGVtZW50IH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKHN3aXBlciwgb3JpZ2luYWxQYXJhbXMsIHBhcmFtcywgY2hlY2tQcm9wcykge1xuICBpZiAoc3dpcGVyLnBhcmFtcy5jcmVhdGVFbGVtZW50cykge1xuICAgIE9iamVjdC5rZXlzKGNoZWNrUHJvcHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGlmICghcGFyYW1zW2tleV0gJiYgcGFyYW1zLmF1dG8gPT09IHRydWUpIHtcbiAgICAgICAgbGV0IGVsZW1lbnQgPSBlbGVtZW50Q2hpbGRyZW4oc3dpcGVyLmVsLCBgLiR7Y2hlY2tQcm9wc1trZXldfWApWzBdO1xuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnZGl2JywgY2hlY2tQcm9wc1trZXldKTtcbiAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGNoZWNrUHJvcHNba2V5XTtcbiAgICAgICAgICBzd2lwZXIuZWwuYXBwZW5kKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtc1trZXldID0gZWxlbWVudDtcbiAgICAgICAgb3JpZ2luYWxQYXJhbXNba2V5XSA9IGVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHBhcmFtcztcbn1cblxuZXhwb3J0IHsgY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCBhcyBjIH07XG4iXSwibmFtZXMiOlsiZSIsImVsZW1lbnRDaGlsZHJlbiIsImMiLCJjcmVhdGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCIsInN3aXBlciIsIm9yaWdpbmFsUGFyYW1zIiwicGFyYW1zIiwiY2hlY2tQcm9wcyIsImNyZWF0ZUVsZW1lbnRzIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJhdXRvIiwiZWxlbWVudCIsImVsIiwiY2xhc3NOYW1lIiwiYXBwZW5kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/shared/create-element-if-not-defined.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/shared/create-shadow.mjs":
/*!******************************************************!*\
  !*** ./node_modules/swiper/shared/create-shadow.mjs ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: function() { return /* binding */ createShadow; }\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n\nfunction createShadow(suffix, slideEl, side) {\n    const shadowClass = \"swiper-slide-shadow\".concat(side ? \"-\".concat(side) : \"\").concat(suffix ? \" swiper-slide-shadow-\".concat(suffix) : \"\");\n    const shadowContainer = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(slideEl);\n    let shadowEl = shadowContainer.querySelector(\".\".concat(shadowClass.split(\" \").join(\".\")));\n    if (!shadowEl) {\n        shadowEl = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\"div\", shadowClass.split(\" \"));\n        shadowContainer.append(shadowEl);\n    }\n    return shadowEl;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2NyZWF0ZS1zaGFkb3cubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTJFO0FBRTNFLFNBQVNJLGFBQWFDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxJQUFJO0lBQ3pDLE1BQU1DLGNBQWMsc0JBQStDSCxPQUF6QkUsT0FBTyxJQUFTLE9BQUxBLFFBQVMsSUFBb0QsT0FBL0NGLFNBQVMsd0JBQStCLE9BQVBBLFVBQVc7SUFDL0csTUFBTUksa0JBQWtCUiw2Q0FBbUJBLENBQUNLO0lBQzVDLElBQUlJLFdBQVdELGdCQUFnQkUsYUFBYSxDQUFDLElBQXFDLE9BQWpDSCxZQUFZSSxLQUFLLENBQUMsS0FBS0MsSUFBSSxDQUFDO0lBQzdFLElBQUksQ0FBQ0gsVUFBVTtRQUNiQSxXQUFXUCw2Q0FBYUEsQ0FBQyxPQUFPSyxZQUFZSSxLQUFLLENBQUM7UUFDbERILGdCQUFnQkssTUFBTSxDQUFDSjtJQUN6QjtJQUNBLE9BQU9BO0FBQ1Q7QUFFNkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvY3JlYXRlLXNoYWRvdy5tanM/NjExMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnIGFzIGdldFNsaWRlVHJhbnNmb3JtRWwsIGMgYXMgY3JlYXRlRWxlbWVudCB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuZnVuY3Rpb24gY3JlYXRlU2hhZG93KHN1ZmZpeCwgc2xpZGVFbCwgc2lkZSkge1xuICBjb25zdCBzaGFkb3dDbGFzcyA9IGBzd2lwZXItc2xpZGUtc2hhZG93JHtzaWRlID8gYC0ke3NpZGV9YCA6ICcnfSR7c3VmZml4ID8gYCBzd2lwZXItc2xpZGUtc2hhZG93LSR7c3VmZml4fWAgOiAnJ31gO1xuICBjb25zdCBzaGFkb3dDb250YWluZXIgPSBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpO1xuICBsZXQgc2hhZG93RWwgPSBzaGFkb3dDb250YWluZXIucXVlcnlTZWxlY3RvcihgLiR7c2hhZG93Q2xhc3Muc3BsaXQoJyAnKS5qb2luKCcuJyl9YCk7XG4gIGlmICghc2hhZG93RWwpIHtcbiAgICBzaGFkb3dFbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHNoYWRvd0NsYXNzLnNwbGl0KCcgJykpO1xuICAgIHNoYWRvd0NvbnRhaW5lci5hcHBlbmQoc2hhZG93RWwpO1xuICB9XG4gIHJldHVybiBzaGFkb3dFbDtcbn1cblxuZXhwb3J0IHsgY3JlYXRlU2hhZG93IGFzIGMgfTtcbiJdLCJuYW1lcyI6WyJnIiwiZ2V0U2xpZGVUcmFuc2Zvcm1FbCIsImMiLCJjcmVhdGVFbGVtZW50IiwiY3JlYXRlU2hhZG93Iiwic3VmZml4Iiwic2xpZGVFbCIsInNpZGUiLCJzaGFkb3dDbGFzcyIsInNoYWRvd0NvbnRhaW5lciIsInNoYWRvd0VsIiwicXVlcnlTZWxlY3RvciIsInNwbGl0Iiwiam9pbiIsImFwcGVuZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/shared/create-shadow.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/shared/effect-init.mjs":
/*!****************************************************!*\
  !*** ./node_modules/swiper/shared/effect-init.mjs ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   e: function() { return /* binding */ effectInit; }\n/* harmony export */ });\nfunction effectInit(params) {\n    const { effect, swiper, on, setTranslate, setTransition, overwriteParams, perspective, recreateShadows, getEffectParams } = params;\n    on(\"beforeInit\", ()=>{\n        if (swiper.params.effect !== effect) return;\n        swiper.classNames.push(\"\".concat(swiper.params.containerModifierClass).concat(effect));\n        if (perspective && perspective()) {\n            swiper.classNames.push(\"\".concat(swiper.params.containerModifierClass, \"3d\"));\n        }\n        const overwriteParamsResult = overwriteParams ? overwriteParams() : {};\n        Object.assign(swiper.params, overwriteParamsResult);\n        Object.assign(swiper.originalParams, overwriteParamsResult);\n    });\n    on(\"setTranslate _virtualUpdated\", ()=>{\n        if (swiper.params.effect !== effect) return;\n        setTranslate();\n    });\n    on(\"setTransition\", (_s, duration)=>{\n        if (swiper.params.effect !== effect) return;\n        setTransition(duration);\n    });\n    on(\"transitionEnd\", ()=>{\n        if (swiper.params.effect !== effect) return;\n        if (recreateShadows) {\n            if (!getEffectParams || !getEffectParams().slideShadows) return;\n            // remove shadows\n            swiper.slides.forEach((slideEl)=>{\n                slideEl.querySelectorAll(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").forEach((shadowEl)=>shadowEl.remove());\n            });\n            // create new one\n            recreateShadows();\n        }\n    });\n    let requireUpdateOnVirtual;\n    on(\"virtualUpdate\", ()=>{\n        if (swiper.params.effect !== effect) return;\n        if (!swiper.slides.length) {\n            requireUpdateOnVirtual = true;\n        }\n        requestAnimationFrame(()=>{\n            if (requireUpdateOnVirtual && swiper.slides && swiper.slides.length) {\n                setTranslate();\n                requireUpdateOnVirtual = false;\n            }\n        });\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2VmZmVjdC1pbml0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0EsV0FBV0MsTUFBTTtJQUN4QixNQUFNLEVBQ0pDLE1BQU0sRUFDTkMsTUFBTSxFQUNOQyxFQUFFLEVBQ0ZDLFlBQVksRUFDWkMsYUFBYSxFQUNiQyxlQUFlLEVBQ2ZDLFdBQVcsRUFDWEMsZUFBZSxFQUNmQyxlQUFlLEVBQ2hCLEdBQUdUO0lBQ0pHLEdBQUcsY0FBYztRQUNmLElBQUlELE9BQU9GLE1BQU0sQ0FBQ0MsTUFBTSxLQUFLQSxRQUFRO1FBQ3JDQyxPQUFPUSxVQUFVLENBQUNDLElBQUksQ0FBQyxHQUEwQ1YsT0FBdkNDLE9BQU9GLE1BQU0sQ0FBQ1ksc0JBQXNCLEVBQVUsT0FBUFg7UUFDakUsSUFBSU0sZUFBZUEsZUFBZTtZQUNoQ0wsT0FBT1EsVUFBVSxDQUFDQyxJQUFJLENBQUMsR0FBd0MsT0FBckNULE9BQU9GLE1BQU0sQ0FBQ1ksc0JBQXNCLEVBQUM7UUFDakU7UUFDQSxNQUFNQyx3QkFBd0JQLGtCQUFrQkEsb0JBQW9CLENBQUM7UUFDckVRLE9BQU9DLE1BQU0sQ0FBQ2IsT0FBT0YsTUFBTSxFQUFFYTtRQUM3QkMsT0FBT0MsTUFBTSxDQUFDYixPQUFPYyxjQUFjLEVBQUVIO0lBQ3ZDO0lBQ0FWLEdBQUcsZ0NBQWdDO1FBQ2pDLElBQUlELE9BQU9GLE1BQU0sQ0FBQ0MsTUFBTSxLQUFLQSxRQUFRO1FBQ3JDRztJQUNGO0lBQ0FELEdBQUcsaUJBQWlCLENBQUNjLElBQUlDO1FBQ3ZCLElBQUloQixPQUFPRixNQUFNLENBQUNDLE1BQU0sS0FBS0EsUUFBUTtRQUNyQ0ksY0FBY2E7SUFDaEI7SUFDQWYsR0FBRyxpQkFBaUI7UUFDbEIsSUFBSUQsT0FBT0YsTUFBTSxDQUFDQyxNQUFNLEtBQUtBLFFBQVE7UUFDckMsSUFBSU8saUJBQWlCO1lBQ25CLElBQUksQ0FBQ0MsbUJBQW1CLENBQUNBLGtCQUFrQlUsWUFBWSxFQUFFO1lBQ3pELGlCQUFpQjtZQUNqQmpCLE9BQU9rQixNQUFNLENBQUNDLE9BQU8sQ0FBQ0MsQ0FBQUE7Z0JBQ3BCQSxRQUFRQyxnQkFBZ0IsQ0FBQyxnSEFBZ0hGLE9BQU8sQ0FBQ0csQ0FBQUEsV0FBWUEsU0FBU0MsTUFBTTtZQUM5SztZQUNBLGlCQUFpQjtZQUNqQmpCO1FBQ0Y7SUFDRjtJQUNBLElBQUlrQjtJQUNKdkIsR0FBRyxpQkFBaUI7UUFDbEIsSUFBSUQsT0FBT0YsTUFBTSxDQUFDQyxNQUFNLEtBQUtBLFFBQVE7UUFDckMsSUFBSSxDQUFDQyxPQUFPa0IsTUFBTSxDQUFDTyxNQUFNLEVBQUU7WUFDekJELHlCQUF5QjtRQUMzQjtRQUNBRSxzQkFBc0I7WUFDcEIsSUFBSUYsMEJBQTBCeEIsT0FBT2tCLE1BQU0sSUFBSWxCLE9BQU9rQixNQUFNLENBQUNPLE1BQU0sRUFBRTtnQkFDbkV2QjtnQkFDQXNCLHlCQUF5QjtZQUMzQjtRQUNGO0lBQ0Y7QUFDRjtBQUUyQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9lZmZlY3QtaW5pdC5tanM/ZjkzNiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBlZmZlY3RJbml0KHBhcmFtcykge1xuICBjb25zdCB7XG4gICAgZWZmZWN0LFxuICAgIHN3aXBlcixcbiAgICBvbixcbiAgICBzZXRUcmFuc2xhdGUsXG4gICAgc2V0VHJhbnNpdGlvbixcbiAgICBvdmVyd3JpdGVQYXJhbXMsXG4gICAgcGVyc3BlY3RpdmUsXG4gICAgcmVjcmVhdGVTaGFkb3dzLFxuICAgIGdldEVmZmVjdFBhcmFtc1xuICB9ID0gcGFyYW1zO1xuICBvbignYmVmb3JlSW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09IGVmZmVjdCkgcmV0dXJuO1xuICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfSR7ZWZmZWN0fWApO1xuICAgIGlmIChwZXJzcGVjdGl2ZSAmJiBwZXJzcGVjdGl2ZSgpKSB7XG4gICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30zZGApO1xuICAgIH1cbiAgICBjb25zdCBvdmVyd3JpdGVQYXJhbXNSZXN1bHQgPSBvdmVyd3JpdGVQYXJhbXMgPyBvdmVyd3JpdGVQYXJhbXMoKSA6IHt9O1xuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLnBhcmFtcywgb3ZlcndyaXRlUGFyYW1zUmVzdWx0KTtcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlci5vcmlnaW5hbFBhcmFtcywgb3ZlcndyaXRlUGFyYW1zUmVzdWx0KTtcbiAgfSk7XG4gIG9uKCdzZXRUcmFuc2xhdGUgX3ZpcnR1YWxVcGRhdGVkJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gZWZmZWN0KSByZXR1cm47XG4gICAgc2V0VHJhbnNsYXRlKCk7XG4gIH0pO1xuICBvbignc2V0VHJhbnNpdGlvbicsIChfcywgZHVyYXRpb24pID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09IGVmZmVjdCkgcmV0dXJuO1xuICAgIHNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICB9KTtcbiAgb24oJ3RyYW5zaXRpb25FbmQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSBlZmZlY3QpIHJldHVybjtcbiAgICBpZiAocmVjcmVhdGVTaGFkb3dzKSB7XG4gICAgICBpZiAoIWdldEVmZmVjdFBhcmFtcyB8fCAhZ2V0RWZmZWN0UGFyYW1zKCkuc2xpZGVTaGFkb3dzKSByZXR1cm47XG4gICAgICAvLyByZW1vdmUgc2hhZG93c1xuICAgICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgICBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpLmZvckVhY2goc2hhZG93RWwgPT4gc2hhZG93RWwucmVtb3ZlKCkpO1xuICAgICAgfSk7XG4gICAgICAvLyBjcmVhdGUgbmV3IG9uZVxuICAgICAgcmVjcmVhdGVTaGFkb3dzKCk7XG4gICAgfVxuICB9KTtcbiAgbGV0IHJlcXVpcmVVcGRhdGVPblZpcnR1YWw7XG4gIG9uKCd2aXJ0dWFsVXBkYXRlJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gZWZmZWN0KSByZXR1cm47XG4gICAgaWYgKCFzd2lwZXIuc2xpZGVzLmxlbmd0aCkge1xuICAgICAgcmVxdWlyZVVwZGF0ZU9uVmlydHVhbCA9IHRydWU7XG4gICAgfVxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBpZiAocmVxdWlyZVVwZGF0ZU9uVmlydHVhbCAmJiBzd2lwZXIuc2xpZGVzICYmIHN3aXBlci5zbGlkZXMubGVuZ3RoKSB7XG4gICAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgICAgICByZXF1aXJlVXBkYXRlT25WaXJ0dWFsID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQgeyBlZmZlY3RJbml0IGFzIGUgfTtcbiJdLCJuYW1lcyI6WyJlZmZlY3RJbml0IiwicGFyYW1zIiwiZWZmZWN0Iiwic3dpcGVyIiwib24iLCJzZXRUcmFuc2xhdGUiLCJzZXRUcmFuc2l0aW9uIiwib3ZlcndyaXRlUGFyYW1zIiwicGVyc3BlY3RpdmUiLCJyZWNyZWF0ZVNoYWRvd3MiLCJnZXRFZmZlY3RQYXJhbXMiLCJjbGFzc05hbWVzIiwicHVzaCIsImNvbnRhaW5lck1vZGlmaWVyQ2xhc3MiLCJvdmVyd3JpdGVQYXJhbXNSZXN1bHQiLCJPYmplY3QiLCJhc3NpZ24iLCJvcmlnaW5hbFBhcmFtcyIsIl9zIiwiZHVyYXRpb24iLCJzbGlkZVNoYWRvd3MiLCJzbGlkZXMiLCJmb3JFYWNoIiwic2xpZGVFbCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJzaGFkb3dFbCIsInJlbW92ZSIsInJlcXVpcmVVcGRhdGVPblZpcnR1YWwiLCJsZW5ndGgiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/shared/effect-init.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/shared/effect-target.mjs":
/*!******************************************************!*\
  !*** ./node_modules/swiper/shared/effect-target.mjs ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   e: function() { return /* binding */ effectTarget; }\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n\nfunction effectTarget(effectParams, slideEl) {\n    const transformEl = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(slideEl);\n    if (transformEl !== slideEl) {\n        transformEl.style.backfaceVisibility = \"hidden\";\n        transformEl.style[\"-webkit-backface-visibility\"] = \"hidden\";\n    }\n    return transformEl;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2VmZmVjdC10YXJnZXQubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXVEO0FBRXZELFNBQVNFLGFBQWFDLFlBQVksRUFBRUMsT0FBTztJQUN6QyxNQUFNQyxjQUFjSiw2Q0FBbUJBLENBQUNHO0lBQ3hDLElBQUlDLGdCQUFnQkQsU0FBUztRQUMzQkMsWUFBWUMsS0FBSyxDQUFDQyxrQkFBa0IsR0FBRztRQUN2Q0YsWUFBWUMsS0FBSyxDQUFDLDhCQUE4QixHQUFHO0lBQ3JEO0lBQ0EsT0FBT0Q7QUFDVDtBQUU2QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9lZmZlY3QtdGFyZ2V0Lm1qcz9iZmY5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGcgYXMgZ2V0U2xpZGVUcmFuc2Zvcm1FbCB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuZnVuY3Rpb24gZWZmZWN0VGFyZ2V0KGVmZmVjdFBhcmFtcywgc2xpZGVFbCkge1xuICBjb25zdCB0cmFuc2Zvcm1FbCA9IGdldFNsaWRlVHJhbnNmb3JtRWwoc2xpZGVFbCk7XG4gIGlmICh0cmFuc2Zvcm1FbCAhPT0gc2xpZGVFbCkge1xuICAgIHRyYW5zZm9ybUVsLnN0eWxlLmJhY2tmYWNlVmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgIHRyYW5zZm9ybUVsLnN0eWxlWyctd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHknXSA9ICdoaWRkZW4nO1xuICB9XG4gIHJldHVybiB0cmFuc2Zvcm1FbDtcbn1cblxuZXhwb3J0IHsgZWZmZWN0VGFyZ2V0IGFzIGUgfTtcbiJdLCJuYW1lcyI6WyJnIiwiZ2V0U2xpZGVUcmFuc2Zvcm1FbCIsImVmZmVjdFRhcmdldCIsImVmZmVjdFBhcmFtcyIsInNsaWRlRWwiLCJ0cmFuc2Zvcm1FbCIsInN0eWxlIiwiYmFja2ZhY2VWaXNpYmlsaXR5IiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/shared/effect-target.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/shared/effect-virtual-transition-end.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/swiper/shared/effect-virtual-transition-end.mjs ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   e: function() { return /* binding */ effectVirtualTransitionEnd; }\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n\nfunction effectVirtualTransitionEnd(_ref) {\n    let { swiper, duration, transformElements, allSlides } = _ref;\n    const { activeIndex } = swiper;\n    const getSlide = (el)=>{\n        if (!el.parentElement) {\n            // assume shadow root\n            const slide = swiper.slides.find((slideEl)=>slideEl.shadowRoot && slideEl.shadowRoot === el.parentNode);\n            return slide;\n        }\n        return el.parentElement;\n    };\n    if (swiper.params.virtualTranslate && duration !== 0) {\n        let eventTriggered = false;\n        let transitionEndTarget;\n        if (allSlides) {\n            transitionEndTarget = transformElements;\n        } else {\n            transitionEndTarget = transformElements.filter((transformEl)=>{\n                const el = transformEl.classList.contains(\"swiper-slide-transform\") ? getSlide(transformEl) : transformEl;\n                return swiper.getSlideIndex(el) === activeIndex;\n            });\n        }\n        transitionEndTarget.forEach((el)=>{\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.l)(el, ()=>{\n                if (eventTriggered) return;\n                if (!swiper || swiper.destroyed) return;\n                eventTriggered = true;\n                swiper.animating = false;\n                const evt = new window.CustomEvent(\"transitionend\", {\n                    bubbles: true,\n                    cancelable: true\n                });\n                swiper.wrapperEl.dispatchEvent(evt);\n            });\n        });\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2VmZmVjdC12aXJ0dWFsLXRyYW5zaXRpb24tZW5kLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF3RDtBQUV4RCxTQUFTRSwyQkFBMkJDLElBQUk7SUFDdEMsSUFBSSxFQUNGQyxNQUFNLEVBQ05DLFFBQVEsRUFDUkMsaUJBQWlCLEVBQ2pCQyxTQUFTLEVBQ1YsR0FBR0o7SUFDSixNQUFNLEVBQ0pLLFdBQVcsRUFDWixHQUFHSjtJQUNKLE1BQU1LLFdBQVdDLENBQUFBO1FBQ2YsSUFBSSxDQUFDQSxHQUFHQyxhQUFhLEVBQUU7WUFDckIscUJBQXFCO1lBQ3JCLE1BQU1DLFFBQVFSLE9BQU9TLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDQyxDQUFBQSxVQUFXQSxRQUFRQyxVQUFVLElBQUlELFFBQVFDLFVBQVUsS0FBS04sR0FBR08sVUFBVTtZQUN0RyxPQUFPTDtRQUNUO1FBQ0EsT0FBT0YsR0FBR0MsYUFBYTtJQUN6QjtJQUNBLElBQUlQLE9BQU9jLE1BQU0sQ0FBQ0MsZ0JBQWdCLElBQUlkLGFBQWEsR0FBRztRQUNwRCxJQUFJZSxpQkFBaUI7UUFDckIsSUFBSUM7UUFDSixJQUFJZCxXQUFXO1lBQ2JjLHNCQUFzQmY7UUFDeEIsT0FBTztZQUNMZSxzQkFBc0JmLGtCQUFrQmdCLE1BQU0sQ0FBQ0MsQ0FBQUE7Z0JBQzdDLE1BQU1iLEtBQUthLFlBQVlDLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDLDRCQUE0QmhCLFNBQVNjLGVBQWVBO2dCQUM5RixPQUFPbkIsT0FBT3NCLGFBQWEsQ0FBQ2hCLFFBQVFGO1lBQ3RDO1FBQ0Y7UUFDQWEsb0JBQW9CTSxPQUFPLENBQUNqQixDQUFBQTtZQUMxQlQsNkNBQW9CQSxDQUFDUyxJQUFJO2dCQUN2QixJQUFJVSxnQkFBZ0I7Z0JBQ3BCLElBQUksQ0FBQ2hCLFVBQVVBLE9BQU93QixTQUFTLEVBQUU7Z0JBQ2pDUixpQkFBaUI7Z0JBQ2pCaEIsT0FBT3lCLFNBQVMsR0FBRztnQkFDbkIsTUFBTUMsTUFBTSxJQUFJQyxPQUFPQyxXQUFXLENBQUMsaUJBQWlCO29CQUNsREMsU0FBUztvQkFDVEMsWUFBWTtnQkFDZDtnQkFDQTlCLE9BQU8rQixTQUFTLENBQUNDLGFBQWEsQ0FBQ047WUFDakM7UUFDRjtJQUNGO0FBQ0Y7QUFFMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvZWZmZWN0LXZpcnR1YWwtdHJhbnNpdGlvbi1lbmQubWpzPzM1ZDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbCBhcyBlbGVtZW50VHJhbnNpdGlvbkVuZCB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuZnVuY3Rpb24gZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBkdXJhdGlvbixcbiAgICB0cmFuc2Zvcm1FbGVtZW50cyxcbiAgICBhbGxTbGlkZXNcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IHtcbiAgICBhY3RpdmVJbmRleFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBnZXRTbGlkZSA9IGVsID0+IHtcbiAgICBpZiAoIWVsLnBhcmVudEVsZW1lbnQpIHtcbiAgICAgIC8vIGFzc3VtZSBzaGFkb3cgcm9vdFxuICAgICAgY29uc3Qgc2xpZGUgPSBzd2lwZXIuc2xpZGVzLmZpbmQoc2xpZGVFbCA9PiBzbGlkZUVsLnNoYWRvd1Jvb3QgJiYgc2xpZGVFbC5zaGFkb3dSb290ID09PSBlbC5wYXJlbnROb2RlKTtcbiAgICAgIHJldHVybiBzbGlkZTtcbiAgICB9XG4gICAgcmV0dXJuIGVsLnBhcmVudEVsZW1lbnQ7XG4gIH07XG4gIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUgJiYgZHVyYXRpb24gIT09IDApIHtcbiAgICBsZXQgZXZlbnRUcmlnZ2VyZWQgPSBmYWxzZTtcbiAgICBsZXQgdHJhbnNpdGlvbkVuZFRhcmdldDtcbiAgICBpZiAoYWxsU2xpZGVzKSB7XG4gICAgICB0cmFuc2l0aW9uRW5kVGFyZ2V0ID0gdHJhbnNmb3JtRWxlbWVudHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zaXRpb25FbmRUYXJnZXQgPSB0cmFuc2Zvcm1FbGVtZW50cy5maWx0ZXIodHJhbnNmb3JtRWwgPT4ge1xuICAgICAgICBjb25zdCBlbCA9IHRyYW5zZm9ybUVsLmNsYXNzTGlzdC5jb250YWlucygnc3dpcGVyLXNsaWRlLXRyYW5zZm9ybScpID8gZ2V0U2xpZGUodHJhbnNmb3JtRWwpIDogdHJhbnNmb3JtRWw7XG4gICAgICAgIHJldHVybiBzd2lwZXIuZ2V0U2xpZGVJbmRleChlbCkgPT09IGFjdGl2ZUluZGV4O1xuICAgICAgfSk7XG4gICAgfVxuICAgIHRyYW5zaXRpb25FbmRUYXJnZXQuZm9yRWFjaChlbCA9PiB7XG4gICAgICBlbGVtZW50VHJhbnNpdGlvbkVuZChlbCwgKCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnRUcmlnZ2VyZWQpIHJldHVybjtcbiAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBldmVudFRyaWdnZXJlZCA9IHRydWU7XG4gICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgZXZ0ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudCgndHJhbnNpdGlvbmVuZCcsIHtcbiAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQgYXMgZSB9O1xuIl0sIm5hbWVzIjpbImwiLCJlbGVtZW50VHJhbnNpdGlvbkVuZCIsImVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kIiwiX3JlZiIsInN3aXBlciIsImR1cmF0aW9uIiwidHJhbnNmb3JtRWxlbWVudHMiLCJhbGxTbGlkZXMiLCJhY3RpdmVJbmRleCIsImdldFNsaWRlIiwiZWwiLCJwYXJlbnRFbGVtZW50Iiwic2xpZGUiLCJzbGlkZXMiLCJmaW5kIiwic2xpZGVFbCIsInNoYWRvd1Jvb3QiLCJwYXJlbnROb2RlIiwicGFyYW1zIiwidmlydHVhbFRyYW5zbGF0ZSIsImV2ZW50VHJpZ2dlcmVkIiwidHJhbnNpdGlvbkVuZFRhcmdldCIsImZpbHRlciIsInRyYW5zZm9ybUVsIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJnZXRTbGlkZUluZGV4IiwiZm9yRWFjaCIsImRlc3Ryb3llZCIsImFuaW1hdGluZyIsImV2dCIsIndpbmRvdyIsIkN1c3RvbUV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ3cmFwcGVyRWwiLCJkaXNwYXRjaEV2ZW50IiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/shared/effect-virtual-transition-end.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/shared/ssr-window.esm.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/swiper/shared/ssr-window.esm.mjs ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: function() { return /* binding */ getWindow; },\n/* harmony export */   g: function() { return /* binding */ getDocument; }\n/* harmony export */ });\n/**\n * SSR Window 5.0.0\n * Better handling for window object in SSR environment\n * https://github.com/nolimits4web/ssr-window\n *\n * Copyright 2025, Vladimir Kharlampidi\n *\n * Licensed under MIT\n *\n * Released on: February 12, 2025\n */ /* eslint-disable no-param-reassign */ function isObject(obj) {\n    return obj !== null && typeof obj === \"object\" && \"constructor\" in obj && obj.constructor === Object;\n}\nfunction extend(target, src) {\n    if (target === void 0) {\n        target = {};\n    }\n    if (src === void 0) {\n        src = {};\n    }\n    const noExtend = [\n        \"__proto__\",\n        \"constructor\",\n        \"prototype\"\n    ];\n    Object.keys(src).filter((key)=>noExtend.indexOf(key) < 0).forEach((key)=>{\n        if (typeof target[key] === \"undefined\") target[key] = src[key];\n        else if (isObject(src[key]) && isObject(target[key]) && Object.keys(src[key]).length > 0) {\n            extend(target[key], src[key]);\n        }\n    });\n}\nconst ssrDocument = {\n    body: {},\n    addEventListener () {},\n    removeEventListener () {},\n    activeElement: {\n        blur () {},\n        nodeName: \"\"\n    },\n    querySelector () {\n        return null;\n    },\n    querySelectorAll () {\n        return [];\n    },\n    getElementById () {\n        return null;\n    },\n    createEvent () {\n        return {\n            initEvent () {}\n        };\n    },\n    createElement () {\n        return {\n            children: [],\n            childNodes: [],\n            style: {},\n            setAttribute () {},\n            getElementsByTagName () {\n                return [];\n            }\n        };\n    },\n    createElementNS () {\n        return {};\n    },\n    importNode () {\n        return null;\n    },\n    location: {\n        hash: \"\",\n        host: \"\",\n        hostname: \"\",\n        href: \"\",\n        origin: \"\",\n        pathname: \"\",\n        protocol: \"\",\n        search: \"\"\n    }\n};\nfunction getDocument() {\n    const doc = typeof document !== \"undefined\" ? document : {};\n    extend(doc, ssrDocument);\n    return doc;\n}\nconst ssrWindow = {\n    document: ssrDocument,\n    navigator: {\n        userAgent: \"\"\n    },\n    location: {\n        hash: \"\",\n        host: \"\",\n        hostname: \"\",\n        href: \"\",\n        origin: \"\",\n        pathname: \"\",\n        protocol: \"\",\n        search: \"\"\n    },\n    history: {\n        replaceState () {},\n        pushState () {},\n        go () {},\n        back () {}\n    },\n    CustomEvent: function CustomEvent() {\n        return this;\n    },\n    addEventListener () {},\n    removeEventListener () {},\n    getComputedStyle () {\n        return {\n            getPropertyValue () {\n                return \"\";\n            }\n        };\n    },\n    Image () {},\n    Date () {},\n    screen: {},\n    setTimeout () {},\n    clearTimeout () {},\n    matchMedia () {\n        return {};\n    },\n    requestAnimationFrame (callback) {\n        if (typeof setTimeout === \"undefined\") {\n            callback();\n            return null;\n        }\n        return setTimeout(callback, 0);\n    },\n    cancelAnimationFrame (id) {\n        if (typeof setTimeout === \"undefined\") {\n            return;\n        }\n        clearTimeout(id);\n    }\n};\nfunction getWindow() {\n    const win =  true ? window : 0;\n    extend(win, ssrWindow);\n    return win;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL3Nzci13aW5kb3cuZXNtLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7Ozs7Ozs7O0NBVUMsR0FDRCxvQ0FBb0MsR0FDcEMsU0FBU0EsU0FBU0MsR0FBRztJQUNuQixPQUFPQSxRQUFRLFFBQVEsT0FBT0EsUUFBUSxZQUFZLGlCQUFpQkEsT0FBT0EsSUFBSUMsV0FBVyxLQUFLQztBQUNoRztBQUNBLFNBQVNDLE9BQU9DLE1BQU0sRUFBRUMsR0FBRztJQUN6QixJQUFJRCxXQUFXLEtBQUssR0FBRztRQUNyQkEsU0FBUyxDQUFDO0lBQ1o7SUFDQSxJQUFJQyxRQUFRLEtBQUssR0FBRztRQUNsQkEsTUFBTSxDQUFDO0lBQ1Q7SUFDQSxNQUFNQyxXQUFXO1FBQUM7UUFBYTtRQUFlO0tBQVk7SUFDMURKLE9BQU9LLElBQUksQ0FBQ0YsS0FBS0csTUFBTSxDQUFDQyxDQUFBQSxNQUFPSCxTQUFTSSxPQUFPLENBQUNELE9BQU8sR0FBR0UsT0FBTyxDQUFDRixDQUFBQTtRQUNoRSxJQUFJLE9BQU9MLE1BQU0sQ0FBQ0ssSUFBSSxLQUFLLGFBQWFMLE1BQU0sQ0FBQ0ssSUFBSSxHQUFHSixHQUFHLENBQUNJLElBQUk7YUFBTSxJQUFJVixTQUFTTSxHQUFHLENBQUNJLElBQUksS0FBS1YsU0FBU0ssTUFBTSxDQUFDSyxJQUFJLEtBQUtQLE9BQU9LLElBQUksQ0FBQ0YsR0FBRyxDQUFDSSxJQUFJLEVBQUVHLE1BQU0sR0FBRyxHQUFHO1lBQ3ZKVCxPQUFPQyxNQUFNLENBQUNLLElBQUksRUFBRUosR0FBRyxDQUFDSSxJQUFJO1FBQzlCO0lBQ0Y7QUFDRjtBQUNBLE1BQU1JLGNBQWM7SUFDbEJDLE1BQU0sQ0FBQztJQUNQQyxxQkFBb0I7SUFDcEJDLHdCQUF1QjtJQUN2QkMsZUFBZTtRQUNiQyxTQUFRO1FBQ1JDLFVBQVU7SUFDWjtJQUNBQztRQUNFLE9BQU87SUFDVDtJQUNBQztRQUNFLE9BQU8sRUFBRTtJQUNYO0lBQ0FDO1FBQ0UsT0FBTztJQUNUO0lBQ0FDO1FBQ0UsT0FBTztZQUNMQyxjQUFhO1FBQ2Y7SUFDRjtJQUNBQztRQUNFLE9BQU87WUFDTEMsVUFBVSxFQUFFO1lBQ1pDLFlBQVksRUFBRTtZQUNkQyxPQUFPLENBQUM7WUFDUkMsaUJBQWdCO1lBQ2hCQztnQkFDRSxPQUFPLEVBQUU7WUFDWDtRQUNGO0lBQ0Y7SUFDQUM7UUFDRSxPQUFPLENBQUM7SUFDVjtJQUNBQztRQUNFLE9BQU87SUFDVDtJQUNBQyxVQUFVO1FBQ1JDLE1BQU07UUFDTkMsTUFBTTtRQUNOQyxVQUFVO1FBQ1ZDLE1BQU07UUFDTkMsUUFBUTtRQUNSQyxVQUFVO1FBQ1ZDLFVBQVU7UUFDVkMsUUFBUTtJQUNWO0FBQ0Y7QUFDQSxTQUFTQztJQUNQLE1BQU1DLE1BQU0sT0FBT0MsYUFBYSxjQUFjQSxXQUFXLENBQUM7SUFDMUR6QyxPQUFPd0MsS0FBSzlCO0lBQ1osT0FBTzhCO0FBQ1Q7QUFDQSxNQUFNRSxZQUFZO0lBQ2hCRCxVQUFVL0I7SUFDVmlDLFdBQVc7UUFDVEMsV0FBVztJQUNiO0lBQ0FkLFVBQVU7UUFDUkMsTUFBTTtRQUNOQyxNQUFNO1FBQ05DLFVBQVU7UUFDVkMsTUFBTTtRQUNOQyxRQUFRO1FBQ1JDLFVBQVU7UUFDVkMsVUFBVTtRQUNWQyxRQUFRO0lBQ1Y7SUFDQU8sU0FBUztRQUNQQyxpQkFBZ0I7UUFDaEJDLGNBQWE7UUFDYkMsT0FBTTtRQUNOQyxTQUFRO0lBQ1Y7SUFDQUMsYUFBYSxTQUFTQTtRQUNwQixPQUFPLElBQUk7SUFDYjtJQUNBdEMscUJBQW9CO0lBQ3BCQyx3QkFBdUI7SUFDdkJzQztRQUNFLE9BQU87WUFDTEM7Z0JBQ0UsT0FBTztZQUNUO1FBQ0Y7SUFDRjtJQUNBQyxVQUFTO0lBQ1RDLFNBQVE7SUFDUkMsUUFBUSxDQUFDO0lBQ1RDLGVBQWM7SUFDZEMsaUJBQWdCO0lBQ2hCQztRQUNFLE9BQU8sQ0FBQztJQUNWO0lBQ0FDLHVCQUFzQkMsUUFBUTtRQUM1QixJQUFJLE9BQU9KLGVBQWUsYUFBYTtZQUNyQ0k7WUFDQSxPQUFPO1FBQ1Q7UUFDQSxPQUFPSixXQUFXSSxVQUFVO0lBQzlCO0lBQ0FDLHNCQUFxQkMsRUFBRTtRQUNyQixJQUFJLE9BQU9OLGVBQWUsYUFBYTtZQUNyQztRQUNGO1FBQ0FDLGFBQWFLO0lBQ2Y7QUFDRjtBQUNBLFNBQVNDO0lBQ1AsTUFBTUMsTUFBTSxLQUFrQixHQUFjQyxTQUFTLENBQUU7SUFDdkRqRSxPQUFPZ0UsS0FBS3RCO0lBQ1osT0FBT3NCO0FBQ1Q7QUFFNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvc3NyLXdpbmRvdy5lc20ubWpzP2U3ODciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTU1IgV2luZG93IDUuMC4wXG4gKiBCZXR0ZXIgaGFuZGxpbmcgZm9yIHdpbmRvdyBvYmplY3QgaW4gU1NSIGVudmlyb25tZW50XG4gKiBodHRwczovL2dpdGh1Yi5jb20vbm9saW1pdHM0d2ViL3Nzci13aW5kb3dcbiAqXG4gKiBDb3B5cmlnaHQgMjAyNSwgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciBNSVRcbiAqXG4gKiBSZWxlYXNlZCBvbjogRmVicnVhcnkgMTIsIDIwMjVcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmICdjb25zdHJ1Y3RvcicgaW4gb2JqICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xufVxuZnVuY3Rpb24gZXh0ZW5kKHRhcmdldCwgc3JjKSB7XG4gIGlmICh0YXJnZXQgPT09IHZvaWQgMCkge1xuICAgIHRhcmdldCA9IHt9O1xuICB9XG4gIGlmIChzcmMgPT09IHZvaWQgMCkge1xuICAgIHNyYyA9IHt9O1xuICB9XG4gIGNvbnN0IG5vRXh0ZW5kID0gWydfX3Byb3RvX18nLCAnY29uc3RydWN0b3InLCAncHJvdG90eXBlJ107XG4gIE9iamVjdC5rZXlzKHNyYykuZmlsdGVyKGtleSA9PiBub0V4dGVuZC5pbmRleE9mKGtleSkgPCAwKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXRba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHRhcmdldFtrZXldID0gc3JjW2tleV07ZWxzZSBpZiAoaXNPYmplY3Qoc3JjW2tleV0pICYmIGlzT2JqZWN0KHRhcmdldFtrZXldKSAmJiBPYmplY3Qua2V5cyhzcmNba2V5XSkubGVuZ3RoID4gMCkge1xuICAgICAgZXh0ZW5kKHRhcmdldFtrZXldLCBzcmNba2V5XSk7XG4gICAgfVxuICB9KTtcbn1cbmNvbnN0IHNzckRvY3VtZW50ID0ge1xuICBib2R5OiB7fSxcbiAgYWRkRXZlbnRMaXN0ZW5lcigpIHt9LFxuICByZW1vdmVFdmVudExpc3RlbmVyKCkge30sXG4gIGFjdGl2ZUVsZW1lbnQ6IHtcbiAgICBibHVyKCkge30sXG4gICAgbm9kZU5hbWU6ICcnXG4gIH0sXG4gIHF1ZXJ5U2VsZWN0b3IoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIHF1ZXJ5U2VsZWN0b3JBbGwoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9LFxuICBnZXRFbGVtZW50QnlJZCgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgY3JlYXRlRXZlbnQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluaXRFdmVudCgpIHt9XG4gICAgfTtcbiAgfSxcbiAgY3JlYXRlRWxlbWVudCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgY2hpbGROb2RlczogW10sXG4gICAgICBzdHlsZToge30sXG4gICAgICBzZXRBdHRyaWJ1dGUoKSB7fSxcbiAgICAgIGdldEVsZW1lbnRzQnlUYWdOYW1lKCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgY3JlYXRlRWxlbWVudE5TKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSxcbiAgaW1wb3J0Tm9kZSgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgbG9jYXRpb246IHtcbiAgICBoYXNoOiAnJyxcbiAgICBob3N0OiAnJyxcbiAgICBob3N0bmFtZTogJycsXG4gICAgaHJlZjogJycsXG4gICAgb3JpZ2luOiAnJyxcbiAgICBwYXRobmFtZTogJycsXG4gICAgcHJvdG9jb2w6ICcnLFxuICAgIHNlYXJjaDogJydcbiAgfVxufTtcbmZ1bmN0aW9uIGdldERvY3VtZW50KCkge1xuICBjb25zdCBkb2MgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB7fTtcbiAgZXh0ZW5kKGRvYywgc3NyRG9jdW1lbnQpO1xuICByZXR1cm4gZG9jO1xufVxuY29uc3Qgc3NyV2luZG93ID0ge1xuICBkb2N1bWVudDogc3NyRG9jdW1lbnQsXG4gIG5hdmlnYXRvcjoge1xuICAgIHVzZXJBZ2VudDogJydcbiAgfSxcbiAgbG9jYXRpb246IHtcbiAgICBoYXNoOiAnJyxcbiAgICBob3N0OiAnJyxcbiAgICBob3N0bmFtZTogJycsXG4gICAgaHJlZjogJycsXG4gICAgb3JpZ2luOiAnJyxcbiAgICBwYXRobmFtZTogJycsXG4gICAgcHJvdG9jb2w6ICcnLFxuICAgIHNlYXJjaDogJydcbiAgfSxcbiAgaGlzdG9yeToge1xuICAgIHJlcGxhY2VTdGF0ZSgpIHt9LFxuICAgIHB1c2hTdGF0ZSgpIHt9LFxuICAgIGdvKCkge30sXG4gICAgYmFjaygpIHt9XG4gIH0sXG4gIEN1c3RvbUV2ZW50OiBmdW5jdGlvbiBDdXN0b21FdmVudCgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgYWRkRXZlbnRMaXN0ZW5lcigpIHt9LFxuICByZW1vdmVFdmVudExpc3RlbmVyKCkge30sXG4gIGdldENvbXB1dGVkU3R5bGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldFByb3BlcnR5VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBJbWFnZSgpIHt9LFxuICBEYXRlKCkge30sXG4gIHNjcmVlbjoge30sXG4gIHNldFRpbWVvdXQoKSB7fSxcbiAgY2xlYXJUaW1lb3V0KCkge30sXG4gIG1hdGNoTWVkaWEoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9LFxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCAwKTtcbiAgfSxcbiAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpIHtcbiAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNsZWFyVGltZW91dChpZCk7XG4gIH1cbn07XG5mdW5jdGlvbiBnZXRXaW5kb3coKSB7XG4gIGNvbnN0IHdpbiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDoge307XG4gIGV4dGVuZCh3aW4sIHNzcldpbmRvdyk7XG4gIHJldHVybiB3aW47XG59XG5cbmV4cG9ydCB7IGdldFdpbmRvdyBhcyBhLCBnZXREb2N1bWVudCBhcyBnIH07XG4iXSwibmFtZXMiOlsiaXNPYmplY3QiLCJvYmoiLCJjb25zdHJ1Y3RvciIsIk9iamVjdCIsImV4dGVuZCIsInRhcmdldCIsInNyYyIsIm5vRXh0ZW5kIiwia2V5cyIsImZpbHRlciIsImtleSIsImluZGV4T2YiLCJmb3JFYWNoIiwibGVuZ3RoIiwic3NyRG9jdW1lbnQiLCJib2R5IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhY3RpdmVFbGVtZW50IiwiYmx1ciIsIm5vZGVOYW1lIiwicXVlcnlTZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJnZXRFbGVtZW50QnlJZCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiY3JlYXRlRWxlbWVudCIsImNoaWxkcmVuIiwiY2hpbGROb2RlcyIsInN0eWxlIiwic2V0QXR0cmlidXRlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjcmVhdGVFbGVtZW50TlMiLCJpbXBvcnROb2RlIiwibG9jYXRpb24iLCJoYXNoIiwiaG9zdCIsImhvc3RuYW1lIiwiaHJlZiIsIm9yaWdpbiIsInBhdGhuYW1lIiwicHJvdG9jb2wiLCJzZWFyY2giLCJnZXREb2N1bWVudCIsImRvYyIsImRvY3VtZW50Iiwic3NyV2luZG93IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsInB1c2hTdGF0ZSIsImdvIiwiYmFjayIsIkN1c3RvbUV2ZW50IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJJbWFnZSIsIkRhdGUiLCJzY3JlZW4iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwibWF0Y2hNZWRpYSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbGxiYWNrIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJpZCIsImdldFdpbmRvdyIsIndpbiIsIndpbmRvdyIsImEiLCJnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/shared/ssr-window.esm.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/shared/swiper-core.mjs":
/*!****************************************************!*\
  !*** ./node_modules/swiper/shared/swiper-core.mjs ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   S: function() { return /* binding */ Swiper; },\n/* harmony export */   d: function() { return /* binding */ defaults; }\n/* harmony export */ });\n/* harmony import */ var _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ssr-window.esm.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n\n\nlet support;\nfunction calcSupport() {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    const document1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    return {\n        smoothScroll: document1.documentElement && document1.documentElement.style && \"scrollBehavior\" in document1.documentElement.style,\n        touch: !!(\"ontouchstart\" in window1 || window1.DocumentTouch && document1 instanceof window1.DocumentTouch)\n    };\n}\nfunction getSupport() {\n    if (!support) {\n        support = calcSupport();\n    }\n    return support;\n}\nlet deviceCached;\nfunction calcDevice(_temp) {\n    let { userAgent } = _temp === void 0 ? {} : _temp;\n    const support = getSupport();\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    const platform = window1.navigator.platform;\n    const ua = userAgent || window1.navigator.userAgent;\n    const device = {\n        ios: false,\n        android: false\n    };\n    const screenWidth = window1.screen.width;\n    const screenHeight = window1.screen.height;\n    const android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/); // eslint-disable-line\n    let ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\n    const ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\n    const iphone = !ipad && ua.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/);\n    const windows = platform === \"Win32\";\n    let macos = platform === \"MacIntel\";\n    // iPadOs 13 fix\n    const iPadScreens = [\n        \"1024x1366\",\n        \"1366x1024\",\n        \"834x1194\",\n        \"1194x834\",\n        \"834x1112\",\n        \"1112x834\",\n        \"768x1024\",\n        \"1024x768\",\n        \"820x1180\",\n        \"1180x820\",\n        \"810x1080\",\n        \"1080x810\"\n    ];\n    if (!ipad && macos && support.touch && iPadScreens.indexOf(\"\".concat(screenWidth, \"x\").concat(screenHeight)) >= 0) {\n        ipad = ua.match(/(Version)\\/([\\d.]+)/);\n        if (!ipad) ipad = [\n            0,\n            1,\n            \"13_0_0\"\n        ];\n        macos = false;\n    }\n    // Android\n    if (android && !windows) {\n        device.os = \"android\";\n        device.android = true;\n    }\n    if (ipad || iphone || ipod) {\n        device.os = \"ios\";\n        device.ios = true;\n    }\n    // Export object\n    return device;\n}\nfunction getDevice(overrides) {\n    if (overrides === void 0) {\n        overrides = {};\n    }\n    if (!deviceCached) {\n        deviceCached = calcDevice(overrides);\n    }\n    return deviceCached;\n}\nlet browser;\nfunction calcBrowser() {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    const device = getDevice();\n    let needPerspectiveFix = false;\n    function isSafari() {\n        const ua = window1.navigator.userAgent.toLowerCase();\n        return ua.indexOf(\"safari\") >= 0 && ua.indexOf(\"chrome\") < 0 && ua.indexOf(\"android\") < 0;\n    }\n    if (isSafari()) {\n        const ua = String(window1.navigator.userAgent);\n        if (ua.includes(\"Version/\")) {\n            const [major, minor] = ua.split(\"Version/\")[1].split(\" \")[0].split(\".\").map((num)=>Number(num));\n            needPerspectiveFix = major < 16 || major === 16 && minor < 2;\n        }\n    }\n    const isWebView = /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window1.navigator.userAgent);\n    const isSafariBrowser = isSafari();\n    const need3dFix = isSafariBrowser || isWebView && device.ios;\n    return {\n        isSafari: needPerspectiveFix || isSafariBrowser,\n        needPerspectiveFix,\n        need3dFix,\n        isWebView\n    };\n}\nfunction getBrowser() {\n    if (!browser) {\n        browser = calcBrowser();\n    }\n    return browser;\n}\nfunction Resize(_ref) {\n    let { swiper, on, emit } = _ref;\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    let observer = null;\n    let animationFrame = null;\n    const resizeHandler = ()=>{\n        if (!swiper || swiper.destroyed || !swiper.initialized) return;\n        emit(\"beforeResize\");\n        emit(\"resize\");\n    };\n    const createObserver = ()=>{\n        if (!swiper || swiper.destroyed || !swiper.initialized) return;\n        observer = new ResizeObserver((entries)=>{\n            animationFrame = window1.requestAnimationFrame(()=>{\n                const { width, height } = swiper;\n                let newWidth = width;\n                let newHeight = height;\n                entries.forEach((_ref2)=>{\n                    let { contentBoxSize, contentRect, target } = _ref2;\n                    if (target && target !== swiper.el) return;\n                    newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;\n                    newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;\n                });\n                if (newWidth !== width || newHeight !== height) {\n                    resizeHandler();\n                }\n            });\n        });\n        observer.observe(swiper.el);\n    };\n    const removeObserver = ()=>{\n        if (animationFrame) {\n            window1.cancelAnimationFrame(animationFrame);\n        }\n        if (observer && observer.unobserve && swiper.el) {\n            observer.unobserve(swiper.el);\n            observer = null;\n        }\n    };\n    const orientationChangeHandler = ()=>{\n        if (!swiper || swiper.destroyed || !swiper.initialized) return;\n        emit(\"orientationchange\");\n    };\n    on(\"init\", ()=>{\n        if (swiper.params.resizeObserver && typeof window1.ResizeObserver !== \"undefined\") {\n            createObserver();\n            return;\n        }\n        window1.addEventListener(\"resize\", resizeHandler);\n        window1.addEventListener(\"orientationchange\", orientationChangeHandler);\n    });\n    on(\"destroy\", ()=>{\n        removeObserver();\n        window1.removeEventListener(\"resize\", resizeHandler);\n        window1.removeEventListener(\"orientationchange\", orientationChangeHandler);\n    });\n}\n_c = Resize;\nfunction Observer(_ref) {\n    let { swiper, extendParams, on, emit } = _ref;\n    const observers = [];\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    const attach = function(target, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        const ObserverFunc = window1.MutationObserver || window1.WebkitMutationObserver;\n        const observer = new ObserverFunc((mutations)=>{\n            // The observerUpdate event should only be triggered\n            // once despite the number of mutations.  Additional\n            // triggers are redundant and are very costly\n            if (swiper.__preventObserver__) return;\n            if (mutations.length === 1) {\n                emit(\"observerUpdate\", mutations[0]);\n                return;\n            }\n            const observerUpdate = function observerUpdate() {\n                emit(\"observerUpdate\", mutations[0]);\n            };\n            if (window1.requestAnimationFrame) {\n                window1.requestAnimationFrame(observerUpdate);\n            } else {\n                window1.setTimeout(observerUpdate, 0);\n            }\n        });\n        observer.observe(target, {\n            attributes: typeof options.attributes === \"undefined\" ? true : options.attributes,\n            childList: swiper.isElement || (typeof options.childList === \"undefined\" ? true : options).childList,\n            characterData: typeof options.characterData === \"undefined\" ? true : options.characterData\n        });\n        observers.push(observer);\n    };\n    const init = ()=>{\n        if (!swiper.params.observer) return;\n        if (swiper.params.observeParents) {\n            const containerParents = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(swiper.hostEl);\n            for(let i = 0; i < containerParents.length; i += 1){\n                attach(containerParents[i]);\n            }\n        }\n        // Observe container\n        attach(swiper.hostEl, {\n            childList: swiper.params.observeSlideChildren\n        });\n        // Observe wrapper\n        attach(swiper.wrapperEl, {\n            attributes: false\n        });\n    };\n    const destroy = ()=>{\n        observers.forEach((observer)=>{\n            observer.disconnect();\n        });\n        observers.splice(0, observers.length);\n    };\n    extendParams({\n        observer: false,\n        observeParents: false,\n        observeSlideChildren: false\n    });\n    on(\"init\", init);\n    on(\"destroy\", destroy);\n}\n_c1 = Observer;\n/* eslint-disable no-underscore-dangle */ var eventsEmitter = {\n    on (events, handler, priority) {\n        const self = this;\n        if (!self.eventsListeners || self.destroyed) return self;\n        if (typeof handler !== \"function\") return self;\n        const method = priority ? \"unshift\" : \"push\";\n        events.split(\" \").forEach((event)=>{\n            if (!self.eventsListeners[event]) self.eventsListeners[event] = [];\n            self.eventsListeners[event][method](handler);\n        });\n        return self;\n    },\n    once (events, handler, priority) {\n        const self = this;\n        if (!self.eventsListeners || self.destroyed) return self;\n        if (typeof handler !== \"function\") return self;\n        function onceHandler() {\n            self.off(events, onceHandler);\n            if (onceHandler.__emitterProxy) {\n                delete onceHandler.__emitterProxy;\n            }\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            handler.apply(self, args);\n        }\n        onceHandler.__emitterProxy = handler;\n        return self.on(events, onceHandler, priority);\n    },\n    onAny (handler, priority) {\n        const self = this;\n        if (!self.eventsListeners || self.destroyed) return self;\n        if (typeof handler !== \"function\") return self;\n        const method = priority ? \"unshift\" : \"push\";\n        if (self.eventsAnyListeners.indexOf(handler) < 0) {\n            self.eventsAnyListeners[method](handler);\n        }\n        return self;\n    },\n    offAny (handler) {\n        const self = this;\n        if (!self.eventsListeners || self.destroyed) return self;\n        if (!self.eventsAnyListeners) return self;\n        const index = self.eventsAnyListeners.indexOf(handler);\n        if (index >= 0) {\n            self.eventsAnyListeners.splice(index, 1);\n        }\n        return self;\n    },\n    off (events, handler) {\n        const self = this;\n        if (!self.eventsListeners || self.destroyed) return self;\n        if (!self.eventsListeners) return self;\n        events.split(\" \").forEach((event)=>{\n            if (typeof handler === \"undefined\") {\n                self.eventsListeners[event] = [];\n            } else if (self.eventsListeners[event]) {\n                self.eventsListeners[event].forEach((eventHandler, index)=>{\n                    if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {\n                        self.eventsListeners[event].splice(index, 1);\n                    }\n                });\n            }\n        });\n        return self;\n    },\n    emit () {\n        const self = this;\n        if (!self.eventsListeners || self.destroyed) return self;\n        if (!self.eventsListeners) return self;\n        let events;\n        let data;\n        let context;\n        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n            args[_key2] = arguments[_key2];\n        }\n        if (typeof args[0] === \"string\" || Array.isArray(args[0])) {\n            events = args[0];\n            data = args.slice(1, args.length);\n            context = self;\n        } else {\n            events = args[0].events;\n            data = args[0].data;\n            context = args[0].context || self;\n        }\n        data.unshift(context);\n        const eventsArray = Array.isArray(events) ? events : events.split(\" \");\n        eventsArray.forEach((event)=>{\n            if (self.eventsAnyListeners && self.eventsAnyListeners.length) {\n                self.eventsAnyListeners.forEach((eventHandler)=>{\n                    eventHandler.apply(context, [\n                        event,\n                        ...data\n                    ]);\n                });\n            }\n            if (self.eventsListeners && self.eventsListeners[event]) {\n                self.eventsListeners[event].forEach((eventHandler)=>{\n                    eventHandler.apply(context, data);\n                });\n            }\n        });\n        return self;\n    }\n};\nfunction updateSize() {\n    const swiper = this;\n    let width;\n    let height;\n    const el = swiper.el;\n    if (typeof swiper.params.width !== \"undefined\" && swiper.params.width !== null) {\n        width = swiper.params.width;\n    } else {\n        width = el.clientWidth;\n    }\n    if (typeof swiper.params.height !== \"undefined\" && swiper.params.height !== null) {\n        height = swiper.params.height;\n    } else {\n        height = el.clientHeight;\n    }\n    if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {\n        return;\n    }\n    // Subtract paddings\n    width = width - parseInt((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)(el, \"padding-left\") || 0, 10) - parseInt((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)(el, \"padding-right\") || 0, 10);\n    height = height - parseInt((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)(el, \"padding-top\") || 0, 10) - parseInt((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)(el, \"padding-bottom\") || 0, 10);\n    if (Number.isNaN(width)) width = 0;\n    if (Number.isNaN(height)) height = 0;\n    Object.assign(swiper, {\n        width,\n        height,\n        size: swiper.isHorizontal() ? width : height\n    });\n}\nfunction updateSlides() {\n    const swiper = this;\n    function getDirectionPropertyValue(node, label) {\n        return parseFloat(node.getPropertyValue(swiper.getDirectionLabel(label)) || 0);\n    }\n    const params = swiper.params;\n    const { wrapperEl, slidesEl, size: swiperSize, rtlTranslate: rtl, wrongRTL } = swiper;\n    const isVirtual = swiper.virtual && params.virtual.enabled;\n    const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;\n    const slides = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, \".\".concat(swiper.params.slideClass, \", swiper-slide\"));\n    const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;\n    let snapGrid = [];\n    const slidesGrid = [];\n    const slidesSizesGrid = [];\n    let offsetBefore = params.slidesOffsetBefore;\n    if (typeof offsetBefore === \"function\") {\n        offsetBefore = params.slidesOffsetBefore.call(swiper);\n    }\n    let offsetAfter = params.slidesOffsetAfter;\n    if (typeof offsetAfter === \"function\") {\n        offsetAfter = params.slidesOffsetAfter.call(swiper);\n    }\n    const previousSnapGridLength = swiper.snapGrid.length;\n    const previousSlidesGridLength = swiper.slidesGrid.length;\n    let spaceBetween = params.spaceBetween;\n    let slidePosition = -offsetBefore;\n    let prevSlideSize = 0;\n    let index = 0;\n    if (typeof swiperSize === \"undefined\") {\n        return;\n    }\n    if (typeof spaceBetween === \"string\" && spaceBetween.indexOf(\"%\") >= 0) {\n        spaceBetween = parseFloat(spaceBetween.replace(\"%\", \"\")) / 100 * swiperSize;\n    } else if (typeof spaceBetween === \"string\") {\n        spaceBetween = parseFloat(spaceBetween);\n    }\n    swiper.virtualSize = -spaceBetween;\n    // reset margins\n    slides.forEach((slideEl)=>{\n        if (rtl) {\n            slideEl.style.marginLeft = \"\";\n        } else {\n            slideEl.style.marginRight = \"\";\n        }\n        slideEl.style.marginBottom = \"\";\n        slideEl.style.marginTop = \"\";\n    });\n    // reset cssMode offsets\n    if (params.centeredSlides && params.cssMode) {\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(wrapperEl, \"--swiper-centered-offset-before\", \"\");\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(wrapperEl, \"--swiper-centered-offset-after\", \"\");\n    }\n    const gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;\n    if (gridEnabled) {\n        swiper.grid.initSlides(slides);\n    } else if (swiper.grid) {\n        swiper.grid.unsetSlides();\n    }\n    // Calc slides\n    let slideSize;\n    const shouldResetSlideSize = params.slidesPerView === \"auto\" && params.breakpoints && Object.keys(params.breakpoints).filter((key)=>{\n        return typeof params.breakpoints[key].slidesPerView !== \"undefined\";\n    }).length > 0;\n    for(let i = 0; i < slidesLength; i += 1){\n        slideSize = 0;\n        let slide;\n        if (slides[i]) slide = slides[i];\n        if (gridEnabled) {\n            swiper.grid.updateSlide(i, slide, slides);\n        }\n        if (slides[i] && (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)(slide, \"display\") === \"none\") continue; // eslint-disable-line\n        if (params.slidesPerView === \"auto\") {\n            if (shouldResetSlideSize) {\n                slides[i].style[swiper.getDirectionLabel(\"width\")] = \"\";\n            }\n            const slideStyles = getComputedStyle(slide);\n            const currentTransform = slide.style.transform;\n            const currentWebKitTransform = slide.style.webkitTransform;\n            if (currentTransform) {\n                slide.style.transform = \"none\";\n            }\n            if (currentWebKitTransform) {\n                slide.style.webkitTransform = \"none\";\n            }\n            if (params.roundLengths) {\n                slideSize = swiper.isHorizontal() ? (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.h)(slide, \"width\", true) : (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.h)(slide, \"height\", true);\n            } else {\n                // eslint-disable-next-line\n                const width = getDirectionPropertyValue(slideStyles, \"width\");\n                const paddingLeft = getDirectionPropertyValue(slideStyles, \"padding-left\");\n                const paddingRight = getDirectionPropertyValue(slideStyles, \"padding-right\");\n                const marginLeft = getDirectionPropertyValue(slideStyles, \"margin-left\");\n                const marginRight = getDirectionPropertyValue(slideStyles, \"margin-right\");\n                const boxSizing = slideStyles.getPropertyValue(\"box-sizing\");\n                if (boxSizing && boxSizing === \"border-box\") {\n                    slideSize = width + marginLeft + marginRight;\n                } else {\n                    const { clientWidth, offsetWidth } = slide;\n                    slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);\n                }\n            }\n            if (currentTransform) {\n                slide.style.transform = currentTransform;\n            }\n            if (currentWebKitTransform) {\n                slide.style.webkitTransform = currentWebKitTransform;\n            }\n            if (params.roundLengths) slideSize = Math.floor(slideSize);\n        } else {\n            slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;\n            if (params.roundLengths) slideSize = Math.floor(slideSize);\n            if (slides[i]) {\n                slides[i].style[swiper.getDirectionLabel(\"width\")] = \"\".concat(slideSize, \"px\");\n            }\n        }\n        if (slides[i]) {\n            slides[i].swiperSlideSize = slideSize;\n        }\n        slidesSizesGrid.push(slideSize);\n        if (params.centeredSlides) {\n            slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;\n            if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n            if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n            if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;\n            if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n            if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n            slidesGrid.push(slidePosition);\n        } else {\n            if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n            if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n            slidesGrid.push(slidePosition);\n            slidePosition = slidePosition + slideSize + spaceBetween;\n        }\n        swiper.virtualSize += slideSize + spaceBetween;\n        prevSlideSize = slideSize;\n        index += 1;\n    }\n    swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;\n    if (rtl && wrongRTL && (params.effect === \"slide\" || params.effect === \"coverflow\")) {\n        wrapperEl.style.width = \"\".concat(swiper.virtualSize + spaceBetween, \"px\");\n    }\n    if (params.setWrapperSize) {\n        wrapperEl.style[swiper.getDirectionLabel(\"width\")] = \"\".concat(swiper.virtualSize + spaceBetween, \"px\");\n    }\n    if (gridEnabled) {\n        swiper.grid.updateWrapperSize(slideSize, snapGrid);\n    }\n    // Remove last grid elements depending on width\n    if (!params.centeredSlides) {\n        const newSlidesGrid = [];\n        for(let i = 0; i < snapGrid.length; i += 1){\n            let slidesGridItem = snapGrid[i];\n            if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n            if (snapGrid[i] <= swiper.virtualSize - swiperSize) {\n                newSlidesGrid.push(slidesGridItem);\n            }\n        }\n        snapGrid = newSlidesGrid;\n        if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {\n            snapGrid.push(swiper.virtualSize - swiperSize);\n        }\n    }\n    if (isVirtual && params.loop) {\n        const size = slidesSizesGrid[0] + spaceBetween;\n        if (params.slidesPerGroup > 1) {\n            const groups = Math.ceil((swiper.virtual.slidesBefore + swiper.virtual.slidesAfter) / params.slidesPerGroup);\n            const groupSize = size * params.slidesPerGroup;\n            for(let i = 0; i < groups; i += 1){\n                snapGrid.push(snapGrid[snapGrid.length - 1] + groupSize);\n            }\n        }\n        for(let i = 0; i < swiper.virtual.slidesBefore + swiper.virtual.slidesAfter; i += 1){\n            if (params.slidesPerGroup === 1) {\n                snapGrid.push(snapGrid[snapGrid.length - 1] + size);\n            }\n            slidesGrid.push(slidesGrid[slidesGrid.length - 1] + size);\n            swiper.virtualSize += size;\n        }\n    }\n    if (snapGrid.length === 0) snapGrid = [\n        0\n    ];\n    if (spaceBetween !== 0) {\n        const key = swiper.isHorizontal() && rtl ? \"marginLeft\" : swiper.getDirectionLabel(\"marginRight\");\n        slides.filter((_, slideIndex)=>{\n            if (!params.cssMode || params.loop) return true;\n            if (slideIndex === slides.length - 1) {\n                return false;\n            }\n            return true;\n        }).forEach((slideEl)=>{\n            slideEl.style[key] = \"\".concat(spaceBetween, \"px\");\n        });\n    }\n    if (params.centeredSlides && params.centeredSlidesBounds) {\n        let allSlidesSize = 0;\n        slidesSizesGrid.forEach((slideSizeValue)=>{\n            allSlidesSize += slideSizeValue + (spaceBetween || 0);\n        });\n        allSlidesSize -= spaceBetween;\n        const maxSnap = allSlidesSize > swiperSize ? allSlidesSize - swiperSize : 0;\n        snapGrid = snapGrid.map((snap)=>{\n            if (snap <= 0) return -offsetBefore;\n            if (snap > maxSnap) return maxSnap + offsetAfter;\n            return snap;\n        });\n    }\n    if (params.centerInsufficientSlides) {\n        let allSlidesSize = 0;\n        slidesSizesGrid.forEach((slideSizeValue)=>{\n            allSlidesSize += slideSizeValue + (spaceBetween || 0);\n        });\n        allSlidesSize -= spaceBetween;\n        const offsetSize = (params.slidesOffsetBefore || 0) + (params.slidesOffsetAfter || 0);\n        if (allSlidesSize + offsetSize < swiperSize) {\n            const allSlidesOffset = (swiperSize - allSlidesSize - offsetSize) / 2;\n            snapGrid.forEach((snap, snapIndex)=>{\n                snapGrid[snapIndex] = snap - allSlidesOffset;\n            });\n            slidesGrid.forEach((snap, snapIndex)=>{\n                slidesGrid[snapIndex] = snap + allSlidesOffset;\n            });\n        }\n    }\n    Object.assign(swiper, {\n        slides,\n        snapGrid,\n        slidesGrid,\n        slidesSizesGrid\n    });\n    if (params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(wrapperEl, \"--swiper-centered-offset-before\", \"\".concat(-snapGrid[0], \"px\"));\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(wrapperEl, \"--swiper-centered-offset-after\", \"\".concat(swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2, \"px\"));\n        const addToSnapGrid = -swiper.snapGrid[0];\n        const addToSlidesGrid = -swiper.slidesGrid[0];\n        swiper.snapGrid = swiper.snapGrid.map((v)=>v + addToSnapGrid);\n        swiper.slidesGrid = swiper.slidesGrid.map((v)=>v + addToSlidesGrid);\n    }\n    if (slidesLength !== previousSlidesLength) {\n        swiper.emit(\"slidesLengthChange\");\n    }\n    if (snapGrid.length !== previousSnapGridLength) {\n        if (swiper.params.watchOverflow) swiper.checkOverflow();\n        swiper.emit(\"snapGridLengthChange\");\n    }\n    if (slidesGrid.length !== previousSlidesGridLength) {\n        swiper.emit(\"slidesGridLengthChange\");\n    }\n    if (params.watchSlidesProgress) {\n        swiper.updateSlidesOffset();\n    }\n    swiper.emit(\"slidesUpdated\");\n    if (!isVirtual && !params.cssMode && (params.effect === \"slide\" || params.effect === \"fade\")) {\n        const backFaceHiddenClass = \"\".concat(params.containerModifierClass, \"backface-hidden\");\n        const hasClassBackfaceClassAdded = swiper.el.classList.contains(backFaceHiddenClass);\n        if (slidesLength <= params.maxBackfaceHiddenSlides) {\n            if (!hasClassBackfaceClassAdded) swiper.el.classList.add(backFaceHiddenClass);\n        } else if (hasClassBackfaceClassAdded) {\n            swiper.el.classList.remove(backFaceHiddenClass);\n        }\n    }\n}\nfunction updateAutoHeight(speed) {\n    const swiper = this;\n    const activeSlides = [];\n    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n    let newHeight = 0;\n    let i;\n    if (typeof speed === \"number\") {\n        swiper.setTransition(speed);\n    } else if (speed === true) {\n        swiper.setTransition(swiper.params.speed);\n    }\n    const getSlideByIndex = (index)=>{\n        if (isVirtual) {\n            return swiper.slides[swiper.getSlideIndexByData(index)];\n        }\n        return swiper.slides[index];\n    };\n    // Find slides currently in view\n    if (swiper.params.slidesPerView !== \"auto\" && swiper.params.slidesPerView > 1) {\n        if (swiper.params.centeredSlides) {\n            (swiper.visibleSlides || []).forEach((slide)=>{\n                activeSlides.push(slide);\n            });\n        } else {\n            for(i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1){\n                const index = swiper.activeIndex + i;\n                if (index > swiper.slides.length && !isVirtual) break;\n                activeSlides.push(getSlideByIndex(index));\n            }\n        }\n    } else {\n        activeSlides.push(getSlideByIndex(swiper.activeIndex));\n    }\n    // Find new height from highest slide in view\n    for(i = 0; i < activeSlides.length; i += 1){\n        if (typeof activeSlides[i] !== \"undefined\") {\n            const height = activeSlides[i].offsetHeight;\n            newHeight = height > newHeight ? height : newHeight;\n        }\n    }\n    // Update Height\n    if (newHeight || newHeight === 0) swiper.wrapperEl.style.height = \"\".concat(newHeight, \"px\");\n}\nfunction updateSlidesOffset() {\n    const swiper = this;\n    const slides = swiper.slides;\n    // eslint-disable-next-line\n    const minusOffset = swiper.isElement ? swiper.isHorizontal() ? swiper.wrapperEl.offsetLeft : swiper.wrapperEl.offsetTop : 0;\n    for(let i = 0; i < slides.length; i += 1){\n        slides[i].swiperSlideOffset = (swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop) - minusOffset - swiper.cssOverflowAdjustment();\n    }\n}\nconst toggleSlideClasses$1 = (slideEl, condition, className)=>{\n    if (condition && !slideEl.classList.contains(className)) {\n        slideEl.classList.add(className);\n    } else if (!condition && slideEl.classList.contains(className)) {\n        slideEl.classList.remove(className);\n    }\n};\nfunction updateSlidesProgress(translate) {\n    if (translate === void 0) {\n        translate = this && this.translate || 0;\n    }\n    const swiper = this;\n    const params = swiper.params;\n    const { slides, rtlTranslate: rtl, snapGrid } = swiper;\n    if (slides.length === 0) return;\n    if (typeof slides[0].swiperSlideOffset === \"undefined\") swiper.updateSlidesOffset();\n    let offsetCenter = -translate;\n    if (rtl) offsetCenter = translate;\n    swiper.visibleSlidesIndexes = [];\n    swiper.visibleSlides = [];\n    let spaceBetween = params.spaceBetween;\n    if (typeof spaceBetween === \"string\" && spaceBetween.indexOf(\"%\") >= 0) {\n        spaceBetween = parseFloat(spaceBetween.replace(\"%\", \"\")) / 100 * swiper.size;\n    } else if (typeof spaceBetween === \"string\") {\n        spaceBetween = parseFloat(spaceBetween);\n    }\n    for(let i = 0; i < slides.length; i += 1){\n        const slide = slides[i];\n        let slideOffset = slide.swiperSlideOffset;\n        if (params.cssMode && params.centeredSlides) {\n            slideOffset -= slides[0].swiperSlideOffset;\n        }\n        const slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + spaceBetween);\n        const originalSlideProgress = (offsetCenter - snapGrid[0] + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + spaceBetween);\n        const slideBefore = -(offsetCenter - slideOffset);\n        const slideAfter = slideBefore + swiper.slidesSizesGrid[i];\n        const isFullyVisible = slideBefore >= 0 && slideBefore <= swiper.size - swiper.slidesSizesGrid[i];\n        const isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;\n        if (isVisible) {\n            swiper.visibleSlides.push(slide);\n            swiper.visibleSlidesIndexes.push(i);\n        }\n        toggleSlideClasses$1(slide, isVisible, params.slideVisibleClass);\n        toggleSlideClasses$1(slide, isFullyVisible, params.slideFullyVisibleClass);\n        slide.progress = rtl ? -slideProgress : slideProgress;\n        slide.originalProgress = rtl ? -originalSlideProgress : originalSlideProgress;\n    }\n}\nfunction updateProgress(translate) {\n    const swiper = this;\n    if (typeof translate === \"undefined\") {\n        const multiplier = swiper.rtlTranslate ? -1 : 1;\n        // eslint-disable-next-line\n        translate = swiper && swiper.translate && swiper.translate * multiplier || 0;\n    }\n    const params = swiper.params;\n    const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n    let { progress, isBeginning, isEnd, progressLoop } = swiper;\n    const wasBeginning = isBeginning;\n    const wasEnd = isEnd;\n    if (translatesDiff === 0) {\n        progress = 0;\n        isBeginning = true;\n        isEnd = true;\n    } else {\n        progress = (translate - swiper.minTranslate()) / translatesDiff;\n        const isBeginningRounded = Math.abs(translate - swiper.minTranslate()) < 1;\n        const isEndRounded = Math.abs(translate - swiper.maxTranslate()) < 1;\n        isBeginning = isBeginningRounded || progress <= 0;\n        isEnd = isEndRounded || progress >= 1;\n        if (isBeginningRounded) progress = 0;\n        if (isEndRounded) progress = 1;\n    }\n    if (params.loop) {\n        const firstSlideIndex = swiper.getSlideIndexByData(0);\n        const lastSlideIndex = swiper.getSlideIndexByData(swiper.slides.length - 1);\n        const firstSlideTranslate = swiper.slidesGrid[firstSlideIndex];\n        const lastSlideTranslate = swiper.slidesGrid[lastSlideIndex];\n        const translateMax = swiper.slidesGrid[swiper.slidesGrid.length - 1];\n        const translateAbs = Math.abs(translate);\n        if (translateAbs >= firstSlideTranslate) {\n            progressLoop = (translateAbs - firstSlideTranslate) / translateMax;\n        } else {\n            progressLoop = (translateAbs + translateMax - lastSlideTranslate) / translateMax;\n        }\n        if (progressLoop > 1) progressLoop -= 1;\n    }\n    Object.assign(swiper, {\n        progress,\n        progressLoop,\n        isBeginning,\n        isEnd\n    });\n    if (params.watchSlidesProgress || params.centeredSlides && params.autoHeight) swiper.updateSlidesProgress(translate);\n    if (isBeginning && !wasBeginning) {\n        swiper.emit(\"reachBeginning toEdge\");\n    }\n    if (isEnd && !wasEnd) {\n        swiper.emit(\"reachEnd toEdge\");\n    }\n    if (wasBeginning && !isBeginning || wasEnd && !isEnd) {\n        swiper.emit(\"fromEdge\");\n    }\n    swiper.emit(\"progress\", progress);\n}\nconst toggleSlideClasses = (slideEl, condition, className)=>{\n    if (condition && !slideEl.classList.contains(className)) {\n        slideEl.classList.add(className);\n    } else if (!condition && slideEl.classList.contains(className)) {\n        slideEl.classList.remove(className);\n    }\n};\nfunction updateSlidesClasses() {\n    const swiper = this;\n    const { slides, params, slidesEl, activeIndex } = swiper;\n    const isVirtual = swiper.virtual && params.virtual.enabled;\n    const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;\n    const getFilteredSlide = (selector)=>{\n        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, \".\".concat(params.slideClass).concat(selector, \", swiper-slide\").concat(selector))[0];\n    };\n    let activeSlide;\n    let prevSlide;\n    let nextSlide;\n    if (isVirtual) {\n        if (params.loop) {\n            let slideIndex = activeIndex - swiper.virtual.slidesBefore;\n            if (slideIndex < 0) slideIndex = swiper.virtual.slides.length + slideIndex;\n            if (slideIndex >= swiper.virtual.slides.length) slideIndex -= swiper.virtual.slides.length;\n            activeSlide = getFilteredSlide('[data-swiper-slide-index=\"'.concat(slideIndex, '\"]'));\n        } else {\n            activeSlide = getFilteredSlide('[data-swiper-slide-index=\"'.concat(activeIndex, '\"]'));\n        }\n    } else {\n        if (gridEnabled) {\n            activeSlide = slides.find((slideEl)=>slideEl.column === activeIndex);\n            nextSlide = slides.find((slideEl)=>slideEl.column === activeIndex + 1);\n            prevSlide = slides.find((slideEl)=>slideEl.column === activeIndex - 1);\n        } else {\n            activeSlide = slides[activeIndex];\n        }\n    }\n    if (activeSlide) {\n        if (!gridEnabled) {\n            // Next Slide\n            nextSlide = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.r)(activeSlide, \".\".concat(params.slideClass, \", swiper-slide\"))[0];\n            if (params.loop && !nextSlide) {\n                nextSlide = slides[0];\n            }\n            // Prev Slide\n            prevSlide = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(activeSlide, \".\".concat(params.slideClass, \", swiper-slide\"))[0];\n            if (params.loop && !prevSlide === 0) {\n                prevSlide = slides[slides.length - 1];\n            }\n        }\n    }\n    slides.forEach((slideEl)=>{\n        toggleSlideClasses(slideEl, slideEl === activeSlide, params.slideActiveClass);\n        toggleSlideClasses(slideEl, slideEl === nextSlide, params.slideNextClass);\n        toggleSlideClasses(slideEl, slideEl === prevSlide, params.slidePrevClass);\n    });\n    swiper.emitSlidesClasses();\n}\nconst processLazyPreloader = (swiper, imageEl)=>{\n    if (!swiper || swiper.destroyed || !swiper.params) return;\n    const slideSelector = ()=>swiper.isElement ? \"swiper-slide\" : \".\".concat(swiper.params.slideClass);\n    const slideEl = imageEl.closest(slideSelector());\n    if (slideEl) {\n        let lazyEl = slideEl.querySelector(\".\".concat(swiper.params.lazyPreloaderClass));\n        if (!lazyEl && swiper.isElement) {\n            if (slideEl.shadowRoot) {\n                lazyEl = slideEl.shadowRoot.querySelector(\".\".concat(swiper.params.lazyPreloaderClass));\n            } else {\n                // init later\n                requestAnimationFrame(()=>{\n                    if (slideEl.shadowRoot) {\n                        lazyEl = slideEl.shadowRoot.querySelector(\".\".concat(swiper.params.lazyPreloaderClass));\n                        if (lazyEl) lazyEl.remove();\n                    }\n                });\n            }\n        }\n        if (lazyEl) lazyEl.remove();\n    }\n};\nconst unlazy = (swiper, index)=>{\n    if (!swiper.slides[index]) return;\n    const imageEl = swiper.slides[index].querySelector('[loading=\"lazy\"]');\n    if (imageEl) imageEl.removeAttribute(\"loading\");\n};\nconst preload = (swiper)=>{\n    if (!swiper || swiper.destroyed || !swiper.params) return;\n    let amount = swiper.params.lazyPreloadPrevNext;\n    const len = swiper.slides.length;\n    if (!len || !amount || amount < 0) return;\n    amount = Math.min(amount, len);\n    const slidesPerView = swiper.params.slidesPerView === \"auto\" ? swiper.slidesPerViewDynamic() : Math.ceil(swiper.params.slidesPerView);\n    const activeIndex = swiper.activeIndex;\n    if (swiper.params.grid && swiper.params.grid.rows > 1) {\n        const activeColumn = activeIndex;\n        const preloadColumns = [\n            activeColumn - amount\n        ];\n        preloadColumns.push(...Array.from({\n            length: amount\n        }).map((_, i)=>{\n            return activeColumn + slidesPerView + i;\n        }));\n        swiper.slides.forEach((slideEl, i)=>{\n            if (preloadColumns.includes(slideEl.column)) unlazy(swiper, i);\n        });\n        return;\n    }\n    const slideIndexLastInView = activeIndex + slidesPerView - 1;\n    if (swiper.params.rewind || swiper.params.loop) {\n        for(let i = activeIndex - amount; i <= slideIndexLastInView + amount; i += 1){\n            const realIndex = (i % len + len) % len;\n            if (realIndex < activeIndex || realIndex > slideIndexLastInView) unlazy(swiper, realIndex);\n        }\n    } else {\n        for(let i = Math.max(activeIndex - amount, 0); i <= Math.min(slideIndexLastInView + amount, len - 1); i += 1){\n            if (i !== activeIndex && (i > slideIndexLastInView || i < activeIndex)) {\n                unlazy(swiper, i);\n            }\n        }\n    }\n};\nfunction getActiveIndexByTranslate(swiper) {\n    const { slidesGrid, params } = swiper;\n    const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n    let activeIndex;\n    for(let i = 0; i < slidesGrid.length; i += 1){\n        if (typeof slidesGrid[i + 1] !== \"undefined\") {\n            if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {\n                activeIndex = i;\n            } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {\n                activeIndex = i + 1;\n            }\n        } else if (translate >= slidesGrid[i]) {\n            activeIndex = i;\n        }\n    }\n    // Normalize slideIndex\n    if (params.normalizeSlideIndex) {\n        if (activeIndex < 0 || typeof activeIndex === \"undefined\") activeIndex = 0;\n    }\n    return activeIndex;\n}\nfunction updateActiveIndex(newActiveIndex) {\n    const swiper = this;\n    const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n    const { snapGrid, params, activeIndex: previousIndex, realIndex: previousRealIndex, snapIndex: previousSnapIndex } = swiper;\n    let activeIndex = newActiveIndex;\n    let snapIndex;\n    const getVirtualRealIndex = (aIndex)=>{\n        let realIndex = aIndex - swiper.virtual.slidesBefore;\n        if (realIndex < 0) {\n            realIndex = swiper.virtual.slides.length + realIndex;\n        }\n        if (realIndex >= swiper.virtual.slides.length) {\n            realIndex -= swiper.virtual.slides.length;\n        }\n        return realIndex;\n    };\n    if (typeof activeIndex === \"undefined\") {\n        activeIndex = getActiveIndexByTranslate(swiper);\n    }\n    if (snapGrid.indexOf(translate) >= 0) {\n        snapIndex = snapGrid.indexOf(translate);\n    } else {\n        const skip = Math.min(params.slidesPerGroupSkip, activeIndex);\n        snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);\n    }\n    if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n    if (activeIndex === previousIndex && !swiper.params.loop) {\n        if (snapIndex !== previousSnapIndex) {\n            swiper.snapIndex = snapIndex;\n            swiper.emit(\"snapIndexChange\");\n        }\n        return;\n    }\n    if (activeIndex === previousIndex && swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled) {\n        swiper.realIndex = getVirtualRealIndex(activeIndex);\n        return;\n    }\n    const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;\n    // Get real index\n    let realIndex;\n    if (swiper.virtual && params.virtual.enabled && params.loop) {\n        realIndex = getVirtualRealIndex(activeIndex);\n    } else if (gridEnabled) {\n        const firstSlideInColumn = swiper.slides.find((slideEl)=>slideEl.column === activeIndex);\n        let activeSlideIndex = parseInt(firstSlideInColumn.getAttribute(\"data-swiper-slide-index\"), 10);\n        if (Number.isNaN(activeSlideIndex)) {\n            activeSlideIndex = Math.max(swiper.slides.indexOf(firstSlideInColumn), 0);\n        }\n        realIndex = Math.floor(activeSlideIndex / params.grid.rows);\n    } else if (swiper.slides[activeIndex]) {\n        const slideIndex = swiper.slides[activeIndex].getAttribute(\"data-swiper-slide-index\");\n        if (slideIndex) {\n            realIndex = parseInt(slideIndex, 10);\n        } else {\n            realIndex = activeIndex;\n        }\n    } else {\n        realIndex = activeIndex;\n    }\n    Object.assign(swiper, {\n        previousSnapIndex,\n        snapIndex,\n        previousRealIndex,\n        realIndex,\n        previousIndex,\n        activeIndex\n    });\n    if (swiper.initialized) {\n        preload(swiper);\n    }\n    swiper.emit(\"activeIndexChange\");\n    swiper.emit(\"snapIndexChange\");\n    if (swiper.initialized || swiper.params.runCallbacksOnInit) {\n        if (previousRealIndex !== realIndex) {\n            swiper.emit(\"realIndexChange\");\n        }\n        swiper.emit(\"slideChange\");\n    }\n}\nfunction updateClickedSlide(el, path) {\n    const swiper = this;\n    const params = swiper.params;\n    let slide = el.closest(\".\".concat(params.slideClass, \", swiper-slide\"));\n    if (!slide && swiper.isElement && path && path.length > 1 && path.includes(el)) {\n        [\n            ...path.slice(path.indexOf(el) + 1, path.length)\n        ].forEach((pathEl)=>{\n            if (!slide && pathEl.matches && pathEl.matches(\".\".concat(params.slideClass, \", swiper-slide\"))) {\n                slide = pathEl;\n            }\n        });\n    }\n    let slideFound = false;\n    let slideIndex;\n    if (slide) {\n        for(let i = 0; i < swiper.slides.length; i += 1){\n            if (swiper.slides[i] === slide) {\n                slideFound = true;\n                slideIndex = i;\n                break;\n            }\n        }\n    }\n    if (slide && slideFound) {\n        swiper.clickedSlide = slide;\n        if (swiper.virtual && swiper.params.virtual.enabled) {\n            swiper.clickedIndex = parseInt(slide.getAttribute(\"data-swiper-slide-index\"), 10);\n        } else {\n            swiper.clickedIndex = slideIndex;\n        }\n    } else {\n        swiper.clickedSlide = undefined;\n        swiper.clickedIndex = undefined;\n        return;\n    }\n    if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {\n        swiper.slideToClickedSlide();\n    }\n}\nvar update = {\n    updateSize,\n    updateSlides,\n    updateAutoHeight,\n    updateSlidesOffset,\n    updateSlidesProgress,\n    updateProgress,\n    updateSlidesClasses,\n    updateActiveIndex,\n    updateClickedSlide\n};\nfunction getSwiperTranslate(axis) {\n    if (axis === void 0) {\n        axis = this.isHorizontal() ? \"x\" : \"y\";\n    }\n    const swiper = this;\n    const { params, rtlTranslate: rtl, translate, wrapperEl } = swiper;\n    if (params.virtualTranslate) {\n        return rtl ? -translate : translate;\n    }\n    if (params.cssMode) {\n        return translate;\n    }\n    let currentTranslate = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.k)(wrapperEl, axis);\n    currentTranslate += swiper.cssOverflowAdjustment();\n    if (rtl) currentTranslate = -currentTranslate;\n    return currentTranslate || 0;\n}\nfunction setTranslate(translate, byController) {\n    const swiper = this;\n    const { rtlTranslate: rtl, params, wrapperEl, progress } = swiper;\n    let x = 0;\n    let y = 0;\n    const z = 0;\n    if (swiper.isHorizontal()) {\n        x = rtl ? -translate : translate;\n    } else {\n        y = translate;\n    }\n    if (params.roundLengths) {\n        x = Math.floor(x);\n        y = Math.floor(y);\n    }\n    swiper.previousTranslate = swiper.translate;\n    swiper.translate = swiper.isHorizontal() ? x : y;\n    if (params.cssMode) {\n        wrapperEl[swiper.isHorizontal() ? \"scrollLeft\" : \"scrollTop\"] = swiper.isHorizontal() ? -x : -y;\n    } else if (!params.virtualTranslate) {\n        if (swiper.isHorizontal()) {\n            x -= swiper.cssOverflowAdjustment();\n        } else {\n            y -= swiper.cssOverflowAdjustment();\n        }\n        wrapperEl.style.transform = \"translate3d(\".concat(x, \"px, \").concat(y, \"px, \").concat(z, \"px)\");\n    }\n    // Check if we need to update progress\n    let newProgress;\n    const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n    if (translatesDiff === 0) {\n        newProgress = 0;\n    } else {\n        newProgress = (translate - swiper.minTranslate()) / translatesDiff;\n    }\n    if (newProgress !== progress) {\n        swiper.updateProgress(translate);\n    }\n    swiper.emit(\"setTranslate\", swiper.translate, byController);\n}\nfunction minTranslate() {\n    return -this.snapGrid[0];\n}\nfunction maxTranslate() {\n    return -this.snapGrid[this.snapGrid.length - 1];\n}\nfunction translateTo(translate, speed, runCallbacks, translateBounds, internal) {\n    if (translate === void 0) {\n        translate = 0;\n    }\n    if (speed === void 0) {\n        speed = this.params.speed;\n    }\n    if (runCallbacks === void 0) {\n        runCallbacks = true;\n    }\n    if (translateBounds === void 0) {\n        translateBounds = true;\n    }\n    const swiper = this;\n    const { params, wrapperEl } = swiper;\n    if (swiper.animating && params.preventInteractionOnTransition) {\n        return false;\n    }\n    const minTranslate = swiper.minTranslate();\n    const maxTranslate = swiper.maxTranslate();\n    let newTranslate;\n    if (translateBounds && translate > minTranslate) newTranslate = minTranslate;\n    else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate;\n    else newTranslate = translate;\n    // Update progress\n    swiper.updateProgress(newTranslate);\n    if (params.cssMode) {\n        const isH = swiper.isHorizontal();\n        if (speed === 0) {\n            wrapperEl[isH ? \"scrollLeft\" : \"scrollTop\"] = -newTranslate;\n        } else {\n            if (!swiper.support.smoothScroll) {\n                (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.u)({\n                    swiper,\n                    targetPosition: -newTranslate,\n                    side: isH ? \"left\" : \"top\"\n                });\n                return true;\n            }\n            wrapperEl.scrollTo({\n                [isH ? \"left\" : \"top\"]: -newTranslate,\n                behavior: \"smooth\"\n            });\n        }\n        return true;\n    }\n    if (speed === 0) {\n        swiper.setTransition(0);\n        swiper.setTranslate(newTranslate);\n        if (runCallbacks) {\n            swiper.emit(\"beforeTransitionStart\", speed, internal);\n            swiper.emit(\"transitionEnd\");\n        }\n    } else {\n        swiper.setTransition(speed);\n        swiper.setTranslate(newTranslate);\n        if (runCallbacks) {\n            swiper.emit(\"beforeTransitionStart\", speed, internal);\n            swiper.emit(\"transitionStart\");\n        }\n        if (!swiper.animating) {\n            swiper.animating = true;\n            if (!swiper.onTranslateToWrapperTransitionEnd) {\n                swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {\n                    if (!swiper || swiper.destroyed) return;\n                    if (e.target !== this) return;\n                    swiper.wrapperEl.removeEventListener(\"transitionend\", swiper.onTranslateToWrapperTransitionEnd);\n                    swiper.onTranslateToWrapperTransitionEnd = null;\n                    delete swiper.onTranslateToWrapperTransitionEnd;\n                    swiper.animating = false;\n                    if (runCallbacks) {\n                        swiper.emit(\"transitionEnd\");\n                    }\n                };\n            }\n            swiper.wrapperEl.addEventListener(\"transitionend\", swiper.onTranslateToWrapperTransitionEnd);\n        }\n    }\n    return true;\n}\nvar translate = {\n    getTranslate: getSwiperTranslate,\n    setTranslate,\n    minTranslate,\n    maxTranslate,\n    translateTo\n};\nfunction setTransition(duration, byController) {\n    const swiper = this;\n    if (!swiper.params.cssMode) {\n        swiper.wrapperEl.style.transitionDuration = \"\".concat(duration, \"ms\");\n        swiper.wrapperEl.style.transitionDelay = duration === 0 ? \"0ms\" : \"\";\n    }\n    swiper.emit(\"setTransition\", duration, byController);\n}\nfunction transitionEmit(_ref) {\n    let { swiper, runCallbacks, direction, step } = _ref;\n    const { activeIndex, previousIndex } = swiper;\n    let dir = direction;\n    if (!dir) {\n        if (activeIndex > previousIndex) dir = \"next\";\n        else if (activeIndex < previousIndex) dir = \"prev\";\n        else dir = \"reset\";\n    }\n    swiper.emit(\"transition\".concat(step));\n    if (runCallbacks && dir === \"reset\") {\n        swiper.emit(\"slideResetTransition\".concat(step));\n    } else if (runCallbacks && activeIndex !== previousIndex) {\n        swiper.emit(\"slideChangeTransition\".concat(step));\n        if (dir === \"next\") {\n            swiper.emit(\"slideNextTransition\".concat(step));\n        } else {\n            swiper.emit(\"slidePrevTransition\".concat(step));\n        }\n    }\n}\nfunction transitionStart(runCallbacks, direction) {\n    if (runCallbacks === void 0) {\n        runCallbacks = true;\n    }\n    const swiper = this;\n    const { params } = swiper;\n    if (params.cssMode) return;\n    if (params.autoHeight) {\n        swiper.updateAutoHeight();\n    }\n    transitionEmit({\n        swiper,\n        runCallbacks,\n        direction,\n        step: \"Start\"\n    });\n}\nfunction transitionEnd(runCallbacks, direction) {\n    if (runCallbacks === void 0) {\n        runCallbacks = true;\n    }\n    const swiper = this;\n    const { params } = swiper;\n    swiper.animating = false;\n    if (params.cssMode) return;\n    swiper.setTransition(0);\n    transitionEmit({\n        swiper,\n        runCallbacks,\n        direction,\n        step: \"End\"\n    });\n}\nvar transition = {\n    setTransition,\n    transitionStart,\n    transitionEnd\n};\nfunction slideTo(index, speed, runCallbacks, internal, initial) {\n    if (index === void 0) {\n        index = 0;\n    }\n    if (runCallbacks === void 0) {\n        runCallbacks = true;\n    }\n    if (typeof index === \"string\") {\n        index = parseInt(index, 10);\n    }\n    const swiper = this;\n    let slideIndex = index;\n    if (slideIndex < 0) slideIndex = 0;\n    const { params, snapGrid, slidesGrid, previousIndex, activeIndex, rtlTranslate: rtl, wrapperEl, enabled } = swiper;\n    if (!enabled && !internal && !initial || swiper.destroyed || swiper.animating && params.preventInteractionOnTransition) {\n        return false;\n    }\n    if (typeof speed === \"undefined\") {\n        speed = swiper.params.speed;\n    }\n    const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);\n    let snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);\n    if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n    const translate = -snapGrid[snapIndex];\n    // Normalize slideIndex\n    if (params.normalizeSlideIndex) {\n        for(let i = 0; i < slidesGrid.length; i += 1){\n            const normalizedTranslate = -Math.floor(translate * 100);\n            const normalizedGrid = Math.floor(slidesGrid[i] * 100);\n            const normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);\n            if (typeof slidesGrid[i + 1] !== \"undefined\") {\n                if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGrid) / 2) {\n                    slideIndex = i;\n                } else if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext) {\n                    slideIndex = i + 1;\n                }\n            } else if (normalizedTranslate >= normalizedGrid) {\n                slideIndex = i;\n            }\n        }\n    }\n    // Directions locks\n    if (swiper.initialized && slideIndex !== activeIndex) {\n        if (!swiper.allowSlideNext && (rtl ? translate > swiper.translate && translate > swiper.minTranslate() : translate < swiper.translate && translate < swiper.minTranslate())) {\n            return false;\n        }\n        if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {\n            if ((activeIndex || 0) !== slideIndex) {\n                return false;\n            }\n        }\n    }\n    if (slideIndex !== (previousIndex || 0) && runCallbacks) {\n        swiper.emit(\"beforeSlideChangeStart\");\n    }\n    // Update progress\n    swiper.updateProgress(translate);\n    let direction;\n    if (slideIndex > activeIndex) direction = \"next\";\n    else if (slideIndex < activeIndex) direction = \"prev\";\n    else direction = \"reset\";\n    // initial virtual\n    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n    const isInitialVirtual = isVirtual && initial;\n    // Update Index\n    if (!isInitialVirtual && (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate)) {\n        swiper.updateActiveIndex(slideIndex);\n        // Update Height\n        if (params.autoHeight) {\n            swiper.updateAutoHeight();\n        }\n        swiper.updateSlidesClasses();\n        if (params.effect !== \"slide\") {\n            swiper.setTranslate(translate);\n        }\n        if (direction !== \"reset\") {\n            swiper.transitionStart(runCallbacks, direction);\n            swiper.transitionEnd(runCallbacks, direction);\n        }\n        return false;\n    }\n    if (params.cssMode) {\n        const isH = swiper.isHorizontal();\n        const t = rtl ? translate : -translate;\n        if (speed === 0) {\n            if (isVirtual) {\n                swiper.wrapperEl.style.scrollSnapType = \"none\";\n                swiper._immediateVirtual = true;\n            }\n            if (isVirtual && !swiper._cssModeVirtualInitialSet && swiper.params.initialSlide > 0) {\n                swiper._cssModeVirtualInitialSet = true;\n                requestAnimationFrame(()=>{\n                    wrapperEl[isH ? \"scrollLeft\" : \"scrollTop\"] = t;\n                });\n            } else {\n                wrapperEl[isH ? \"scrollLeft\" : \"scrollTop\"] = t;\n            }\n            if (isVirtual) {\n                requestAnimationFrame(()=>{\n                    swiper.wrapperEl.style.scrollSnapType = \"\";\n                    swiper._immediateVirtual = false;\n                });\n            }\n        } else {\n            if (!swiper.support.smoothScroll) {\n                (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.u)({\n                    swiper,\n                    targetPosition: t,\n                    side: isH ? \"left\" : \"top\"\n                });\n                return true;\n            }\n            wrapperEl.scrollTo({\n                [isH ? \"left\" : \"top\"]: t,\n                behavior: \"smooth\"\n            });\n        }\n        return true;\n    }\n    const browser = getBrowser();\n    const isSafari = browser.isSafari;\n    if (isVirtual && !initial && isSafari && swiper.isElement) {\n        swiper.virtual.update(false, false, slideIndex);\n    }\n    swiper.setTransition(speed);\n    swiper.setTranslate(translate);\n    swiper.updateActiveIndex(slideIndex);\n    swiper.updateSlidesClasses();\n    swiper.emit(\"beforeTransitionStart\", speed, internal);\n    swiper.transitionStart(runCallbacks, direction);\n    if (speed === 0) {\n        swiper.transitionEnd(runCallbacks, direction);\n    } else if (!swiper.animating) {\n        swiper.animating = true;\n        if (!swiper.onSlideToWrapperTransitionEnd) {\n            swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {\n                if (!swiper || swiper.destroyed) return;\n                if (e.target !== this) return;\n                swiper.wrapperEl.removeEventListener(\"transitionend\", swiper.onSlideToWrapperTransitionEnd);\n                swiper.onSlideToWrapperTransitionEnd = null;\n                delete swiper.onSlideToWrapperTransitionEnd;\n                swiper.transitionEnd(runCallbacks, direction);\n            };\n        }\n        swiper.wrapperEl.addEventListener(\"transitionend\", swiper.onSlideToWrapperTransitionEnd);\n    }\n    return true;\n}\nfunction slideToLoop(index, speed, runCallbacks, internal) {\n    if (index === void 0) {\n        index = 0;\n    }\n    if (runCallbacks === void 0) {\n        runCallbacks = true;\n    }\n    if (typeof index === \"string\") {\n        const indexAsNumber = parseInt(index, 10);\n        index = indexAsNumber;\n    }\n    const swiper = this;\n    if (swiper.destroyed) return;\n    if (typeof speed === \"undefined\") {\n        speed = swiper.params.speed;\n    }\n    const gridEnabled = swiper.grid && swiper.params.grid && swiper.params.grid.rows > 1;\n    let newIndex = index;\n    if (swiper.params.loop) {\n        if (swiper.virtual && swiper.params.virtual.enabled) {\n            // eslint-disable-next-line\n            newIndex = newIndex + swiper.virtual.slidesBefore;\n        } else {\n            let targetSlideIndex;\n            if (gridEnabled) {\n                const slideIndex = newIndex * swiper.params.grid.rows;\n                targetSlideIndex = swiper.slides.find((slideEl)=>slideEl.getAttribute(\"data-swiper-slide-index\") * 1 === slideIndex).column;\n            } else {\n                targetSlideIndex = swiper.getSlideIndexByData(newIndex);\n            }\n            const cols = gridEnabled ? Math.ceil(swiper.slides.length / swiper.params.grid.rows) : swiper.slides.length;\n            const { centeredSlides } = swiper.params;\n            let slidesPerView = swiper.params.slidesPerView;\n            if (slidesPerView === \"auto\") {\n                slidesPerView = swiper.slidesPerViewDynamic();\n            } else {\n                slidesPerView = Math.ceil(parseFloat(swiper.params.slidesPerView, 10));\n                if (centeredSlides && slidesPerView % 2 === 0) {\n                    slidesPerView = slidesPerView + 1;\n                }\n            }\n            let needLoopFix = cols - targetSlideIndex < slidesPerView;\n            if (centeredSlides) {\n                needLoopFix = needLoopFix || targetSlideIndex < Math.ceil(slidesPerView / 2);\n            }\n            if (internal && centeredSlides && swiper.params.slidesPerView !== \"auto\" && !gridEnabled) {\n                needLoopFix = false;\n            }\n            if (needLoopFix) {\n                const direction = centeredSlides ? targetSlideIndex < swiper.activeIndex ? \"prev\" : \"next\" : targetSlideIndex - swiper.activeIndex - 1 < swiper.params.slidesPerView ? \"next\" : \"prev\";\n                swiper.loopFix({\n                    direction,\n                    slideTo: true,\n                    activeSlideIndex: direction === \"next\" ? targetSlideIndex + 1 : targetSlideIndex - cols + 1,\n                    slideRealIndex: direction === \"next\" ? swiper.realIndex : undefined\n                });\n            }\n            if (gridEnabled) {\n                const slideIndex = newIndex * swiper.params.grid.rows;\n                newIndex = swiper.slides.find((slideEl)=>slideEl.getAttribute(\"data-swiper-slide-index\") * 1 === slideIndex).column;\n            } else {\n                newIndex = swiper.getSlideIndexByData(newIndex);\n            }\n        }\n    }\n    requestAnimationFrame(()=>{\n        swiper.slideTo(newIndex, speed, runCallbacks, internal);\n    });\n    return swiper;\n}\n/* eslint no-unused-vars: \"off\" */ function slideNext(speed, runCallbacks, internal) {\n    if (runCallbacks === void 0) {\n        runCallbacks = true;\n    }\n    const swiper = this;\n    const { enabled, params, animating } = swiper;\n    if (!enabled || swiper.destroyed) return swiper;\n    if (typeof speed === \"undefined\") {\n        speed = swiper.params.speed;\n    }\n    let perGroup = params.slidesPerGroup;\n    if (params.slidesPerView === \"auto\" && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n        perGroup = Math.max(swiper.slidesPerViewDynamic(\"current\", true), 1);\n    }\n    const increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : perGroup;\n    const isVirtual = swiper.virtual && params.virtual.enabled;\n    if (params.loop) {\n        if (animating && !isVirtual && params.loopPreventsSliding) return false;\n        swiper.loopFix({\n            direction: \"next\"\n        });\n        // eslint-disable-next-line\n        swiper._clientLeft = swiper.wrapperEl.clientLeft;\n        if (swiper.activeIndex === swiper.slides.length - 1 && params.cssMode) {\n            requestAnimationFrame(()=>{\n                swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);\n            });\n            return true;\n        }\n    }\n    if (params.rewind && swiper.isEnd) {\n        return swiper.slideTo(0, speed, runCallbacks, internal);\n    }\n    return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);\n}\n/* eslint no-unused-vars: \"off\" */ function slidePrev(speed, runCallbacks, internal) {\n    if (runCallbacks === void 0) {\n        runCallbacks = true;\n    }\n    const swiper = this;\n    const { params, snapGrid, slidesGrid, rtlTranslate, enabled, animating } = swiper;\n    if (!enabled || swiper.destroyed) return swiper;\n    if (typeof speed === \"undefined\") {\n        speed = swiper.params.speed;\n    }\n    const isVirtual = swiper.virtual && params.virtual.enabled;\n    if (params.loop) {\n        if (animating && !isVirtual && params.loopPreventsSliding) return false;\n        swiper.loopFix({\n            direction: \"prev\"\n        });\n        // eslint-disable-next-line\n        swiper._clientLeft = swiper.wrapperEl.clientLeft;\n    }\n    const translate = rtlTranslate ? swiper.translate : -swiper.translate;\n    function normalize(val) {\n        if (val < 0) return -Math.floor(Math.abs(val));\n        return Math.floor(val);\n    }\n    const normalizedTranslate = normalize(translate);\n    const normalizedSnapGrid = snapGrid.map((val)=>normalize(val));\n    const isFreeMode = params.freeMode && params.freeMode.enabled;\n    let prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];\n    if (typeof prevSnap === \"undefined\" && (params.cssMode || isFreeMode)) {\n        let prevSnapIndex;\n        snapGrid.forEach((snap, snapIndex)=>{\n            if (normalizedTranslate >= snap) {\n                // prevSnap = snap;\n                prevSnapIndex = snapIndex;\n            }\n        });\n        if (typeof prevSnapIndex !== \"undefined\") {\n            prevSnap = isFreeMode ? snapGrid[prevSnapIndex] : snapGrid[prevSnapIndex > 0 ? prevSnapIndex - 1 : prevSnapIndex];\n        }\n    }\n    let prevIndex = 0;\n    if (typeof prevSnap !== \"undefined\") {\n        prevIndex = slidesGrid.indexOf(prevSnap);\n        if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;\n        if (params.slidesPerView === \"auto\" && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n            prevIndex = prevIndex - swiper.slidesPerViewDynamic(\"previous\", true) + 1;\n            prevIndex = Math.max(prevIndex, 0);\n        }\n    }\n    if (params.rewind && swiper.isBeginning) {\n        const lastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\n        return swiper.slideTo(lastIndex, speed, runCallbacks, internal);\n    } else if (params.loop && swiper.activeIndex === 0 && params.cssMode) {\n        requestAnimationFrame(()=>{\n            swiper.slideTo(prevIndex, speed, runCallbacks, internal);\n        });\n        return true;\n    }\n    return swiper.slideTo(prevIndex, speed, runCallbacks, internal);\n}\n/* eslint no-unused-vars: \"off\" */ function slideReset(speed, runCallbacks, internal) {\n    if (runCallbacks === void 0) {\n        runCallbacks = true;\n    }\n    const swiper = this;\n    if (swiper.destroyed) return;\n    if (typeof speed === \"undefined\") {\n        speed = swiper.params.speed;\n    }\n    return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);\n}\n/* eslint no-unused-vars: \"off\" */ function slideToClosest(speed, runCallbacks, internal, threshold) {\n    if (runCallbacks === void 0) {\n        runCallbacks = true;\n    }\n    if (threshold === void 0) {\n        threshold = 0.5;\n    }\n    const swiper = this;\n    if (swiper.destroyed) return;\n    if (typeof speed === \"undefined\") {\n        speed = swiper.params.speed;\n    }\n    let index = swiper.activeIndex;\n    const skip = Math.min(swiper.params.slidesPerGroupSkip, index);\n    const snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);\n    const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n    if (translate >= swiper.snapGrid[snapIndex]) {\n        // The current translate is on or after the current snap index, so the choice\n        // is between the current index and the one after it.\n        const currentSnap = swiper.snapGrid[snapIndex];\n        const nextSnap = swiper.snapGrid[snapIndex + 1];\n        if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {\n            index += swiper.params.slidesPerGroup;\n        }\n    } else {\n        // The current translate is before the current snap index, so the choice\n        // is between the current index and the one before it.\n        const prevSnap = swiper.snapGrid[snapIndex - 1];\n        const currentSnap = swiper.snapGrid[snapIndex];\n        if (translate - prevSnap <= (currentSnap - prevSnap) * threshold) {\n            index -= swiper.params.slidesPerGroup;\n        }\n    }\n    index = Math.max(index, 0);\n    index = Math.min(index, swiper.slidesGrid.length - 1);\n    return swiper.slideTo(index, speed, runCallbacks, internal);\n}\nfunction slideToClickedSlide() {\n    const swiper = this;\n    if (swiper.destroyed) return;\n    const { params, slidesEl } = swiper;\n    const slidesPerView = params.slidesPerView === \"auto\" ? swiper.slidesPerViewDynamic() : params.slidesPerView;\n    let slideToIndex = swiper.clickedIndex;\n    let realIndex;\n    const slideSelector = swiper.isElement ? \"swiper-slide\" : \".\".concat(params.slideClass);\n    if (params.loop) {\n        if (swiper.animating) return;\n        realIndex = parseInt(swiper.clickedSlide.getAttribute(\"data-swiper-slide-index\"), 10);\n        if (params.centeredSlides) {\n            if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {\n                swiper.loopFix();\n                slideToIndex = swiper.getSlideIndex((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, \"\".concat(slideSelector, '[data-swiper-slide-index=\"').concat(realIndex, '\"]'))[0]);\n                (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(()=>{\n                    swiper.slideTo(slideToIndex);\n                });\n            } else {\n                swiper.slideTo(slideToIndex);\n            }\n        } else if (slideToIndex > swiper.slides.length - slidesPerView) {\n            swiper.loopFix();\n            slideToIndex = swiper.getSlideIndex((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, \"\".concat(slideSelector, '[data-swiper-slide-index=\"').concat(realIndex, '\"]'))[0]);\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(()=>{\n                swiper.slideTo(slideToIndex);\n            });\n        } else {\n            swiper.slideTo(slideToIndex);\n        }\n    } else {\n        swiper.slideTo(slideToIndex);\n    }\n}\nvar slide = {\n    slideTo,\n    slideToLoop,\n    slideNext,\n    slidePrev,\n    slideReset,\n    slideToClosest,\n    slideToClickedSlide\n};\nfunction loopCreate(slideRealIndex, initial) {\n    const swiper = this;\n    const { params, slidesEl } = swiper;\n    if (!params.loop || swiper.virtual && swiper.params.virtual.enabled) return;\n    const initSlides = ()=>{\n        const slides = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, \".\".concat(params.slideClass, \", swiper-slide\"));\n        slides.forEach((el, index)=>{\n            el.setAttribute(\"data-swiper-slide-index\", index);\n        });\n    };\n    const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;\n    const slidesPerGroup = params.slidesPerGroup * (gridEnabled ? params.grid.rows : 1);\n    const shouldFillGroup = swiper.slides.length % slidesPerGroup !== 0;\n    const shouldFillGrid = gridEnabled && swiper.slides.length % params.grid.rows !== 0;\n    const addBlankSlides = (amountOfSlides)=>{\n        for(let i = 0; i < amountOfSlides; i += 1){\n            const slideEl = swiper.isElement ? (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"swiper-slide\", [\n                params.slideBlankClass\n            ]) : (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"div\", [\n                params.slideClass,\n                params.slideBlankClass\n            ]);\n            swiper.slidesEl.append(slideEl);\n        }\n    };\n    if (shouldFillGroup) {\n        if (params.loopAddBlankSlides) {\n            const slidesToAdd = slidesPerGroup - swiper.slides.length % slidesPerGroup;\n            addBlankSlides(slidesToAdd);\n            swiper.recalcSlides();\n            swiper.updateSlides();\n        } else {\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.v)(\"Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)\");\n        }\n        initSlides();\n    } else if (shouldFillGrid) {\n        if (params.loopAddBlankSlides) {\n            const slidesToAdd = params.grid.rows - swiper.slides.length % params.grid.rows;\n            addBlankSlides(slidesToAdd);\n            swiper.recalcSlides();\n            swiper.updateSlides();\n        } else {\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.v)(\"Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)\");\n        }\n        initSlides();\n    } else {\n        initSlides();\n    }\n    swiper.loopFix({\n        slideRealIndex,\n        direction: params.centeredSlides ? undefined : \"next\",\n        initial\n    });\n}\nfunction loopFix(_temp) {\n    let { slideRealIndex, slideTo = true, direction, setTranslate, activeSlideIndex, initial, byController, byMousewheel } = _temp === void 0 ? {} : _temp;\n    const swiper = this;\n    if (!swiper.params.loop) return;\n    swiper.emit(\"beforeLoopFix\");\n    const { slides, allowSlidePrev, allowSlideNext, slidesEl, params } = swiper;\n    const { centeredSlides, initialSlide } = params;\n    swiper.allowSlidePrev = true;\n    swiper.allowSlideNext = true;\n    if (swiper.virtual && params.virtual.enabled) {\n        if (slideTo) {\n            if (!params.centeredSlides && swiper.snapIndex === 0) {\n                swiper.slideTo(swiper.virtual.slides.length, 0, false, true);\n            } else if (params.centeredSlides && swiper.snapIndex < params.slidesPerView) {\n                swiper.slideTo(swiper.virtual.slides.length + swiper.snapIndex, 0, false, true);\n            } else if (swiper.snapIndex === swiper.snapGrid.length - 1) {\n                swiper.slideTo(swiper.virtual.slidesBefore, 0, false, true);\n            }\n        }\n        swiper.allowSlidePrev = allowSlidePrev;\n        swiper.allowSlideNext = allowSlideNext;\n        swiper.emit(\"loopFix\");\n        return;\n    }\n    let slidesPerView = params.slidesPerView;\n    if (slidesPerView === \"auto\") {\n        slidesPerView = swiper.slidesPerViewDynamic();\n    } else {\n        slidesPerView = Math.ceil(parseFloat(params.slidesPerView, 10));\n        if (centeredSlides && slidesPerView % 2 === 0) {\n            slidesPerView = slidesPerView + 1;\n        }\n    }\n    const slidesPerGroup = params.slidesPerGroupAuto ? slidesPerView : params.slidesPerGroup;\n    let loopedSlides = slidesPerGroup;\n    if (loopedSlides % slidesPerGroup !== 0) {\n        loopedSlides += slidesPerGroup - loopedSlides % slidesPerGroup;\n    }\n    loopedSlides += params.loopAdditionalSlides;\n    swiper.loopedSlides = loopedSlides;\n    const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;\n    if (slides.length < slidesPerView + loopedSlides || swiper.params.effect === \"cards\" && slides.length < slidesPerView + loopedSlides * 2) {\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.v)(\"Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled or not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters\");\n    } else if (gridEnabled && params.grid.fill === \"row\") {\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.v)(\"Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`\");\n    }\n    const prependSlidesIndexes = [];\n    const appendSlidesIndexes = [];\n    const cols = gridEnabled ? Math.ceil(slides.length / params.grid.rows) : slides.length;\n    const isInitialOverflow = initial && cols - initialSlide < slidesPerView && !centeredSlides;\n    let activeIndex = isInitialOverflow ? initialSlide : swiper.activeIndex;\n    if (typeof activeSlideIndex === \"undefined\") {\n        activeSlideIndex = swiper.getSlideIndex(slides.find((el)=>el.classList.contains(params.slideActiveClass)));\n    } else {\n        activeIndex = activeSlideIndex;\n    }\n    const isNext = direction === \"next\" || !direction;\n    const isPrev = direction === \"prev\" || !direction;\n    let slidesPrepended = 0;\n    let slidesAppended = 0;\n    const activeColIndex = gridEnabled ? slides[activeSlideIndex].column : activeSlideIndex;\n    const activeColIndexWithShift = activeColIndex + (centeredSlides && typeof setTranslate === \"undefined\" ? -slidesPerView / 2 + 0.5 : 0);\n    // prepend last slides before start\n    if (activeColIndexWithShift < loopedSlides) {\n        slidesPrepended = Math.max(loopedSlides - activeColIndexWithShift, slidesPerGroup);\n        for(let i = 0; i < loopedSlides - activeColIndexWithShift; i += 1){\n            const index = i - Math.floor(i / cols) * cols;\n            if (gridEnabled) {\n                const colIndexToPrepend = cols - index - 1;\n                for(let i = slides.length - 1; i >= 0; i -= 1){\n                    if (slides[i].column === colIndexToPrepend) prependSlidesIndexes.push(i);\n                }\n            // slides.forEach((slide, slideIndex) => {\n            //   if (slide.column === colIndexToPrepend) prependSlidesIndexes.push(slideIndex);\n            // });\n            } else {\n                prependSlidesIndexes.push(cols - index - 1);\n            }\n        }\n    } else if (activeColIndexWithShift + slidesPerView > cols - loopedSlides) {\n        slidesAppended = Math.max(activeColIndexWithShift - (cols - loopedSlides * 2), slidesPerGroup);\n        if (isInitialOverflow) {\n            slidesAppended = Math.max(slidesAppended, slidesPerView - cols + initialSlide + 1);\n        }\n        for(let i = 0; i < slidesAppended; i += 1){\n            const index = i - Math.floor(i / cols) * cols;\n            if (gridEnabled) {\n                slides.forEach((slide, slideIndex)=>{\n                    if (slide.column === index) appendSlidesIndexes.push(slideIndex);\n                });\n            } else {\n                appendSlidesIndexes.push(index);\n            }\n        }\n    }\n    swiper.__preventObserver__ = true;\n    requestAnimationFrame(()=>{\n        swiper.__preventObserver__ = false;\n    });\n    if (swiper.params.effect === \"cards\" && slides.length < slidesPerView + loopedSlides * 2) {\n        if (appendSlidesIndexes.includes(activeSlideIndex)) {\n            appendSlidesIndexes.splice(appendSlidesIndexes.indexOf(activeSlideIndex), 1);\n        }\n        if (prependSlidesIndexes.includes(activeSlideIndex)) {\n            prependSlidesIndexes.splice(prependSlidesIndexes.indexOf(activeSlideIndex), 1);\n        }\n    }\n    if (isPrev) {\n        prependSlidesIndexes.forEach((index)=>{\n            slides[index].swiperLoopMoveDOM = true;\n            slidesEl.prepend(slides[index]);\n            slides[index].swiperLoopMoveDOM = false;\n        });\n    }\n    if (isNext) {\n        appendSlidesIndexes.forEach((index)=>{\n            slides[index].swiperLoopMoveDOM = true;\n            slidesEl.append(slides[index]);\n            slides[index].swiperLoopMoveDOM = false;\n        });\n    }\n    swiper.recalcSlides();\n    if (params.slidesPerView === \"auto\") {\n        swiper.updateSlides();\n    } else if (gridEnabled && (prependSlidesIndexes.length > 0 && isPrev || appendSlidesIndexes.length > 0 && isNext)) {\n        swiper.slides.forEach((slide, slideIndex)=>{\n            swiper.grid.updateSlide(slideIndex, slide, swiper.slides);\n        });\n    }\n    if (params.watchSlidesProgress) {\n        swiper.updateSlidesOffset();\n    }\n    if (slideTo) {\n        if (prependSlidesIndexes.length > 0 && isPrev) {\n            if (typeof slideRealIndex === \"undefined\") {\n                const currentSlideTranslate = swiper.slidesGrid[activeIndex];\n                const newSlideTranslate = swiper.slidesGrid[activeIndex + slidesPrepended];\n                const diff = newSlideTranslate - currentSlideTranslate;\n                if (byMousewheel) {\n                    swiper.setTranslate(swiper.translate - diff);\n                } else {\n                    swiper.slideTo(activeIndex + Math.ceil(slidesPrepended), 0, false, true);\n                    if (setTranslate) {\n                        swiper.touchEventsData.startTranslate = swiper.touchEventsData.startTranslate - diff;\n                        swiper.touchEventsData.currentTranslate = swiper.touchEventsData.currentTranslate - diff;\n                    }\n                }\n            } else {\n                if (setTranslate) {\n                    const shift = gridEnabled ? prependSlidesIndexes.length / params.grid.rows : prependSlidesIndexes.length;\n                    swiper.slideTo(swiper.activeIndex + shift, 0, false, true);\n                    swiper.touchEventsData.currentTranslate = swiper.translate;\n                }\n            }\n        } else if (appendSlidesIndexes.length > 0 && isNext) {\n            if (typeof slideRealIndex === \"undefined\") {\n                const currentSlideTranslate = swiper.slidesGrid[activeIndex];\n                const newSlideTranslate = swiper.slidesGrid[activeIndex - slidesAppended];\n                const diff = newSlideTranslate - currentSlideTranslate;\n                if (byMousewheel) {\n                    swiper.setTranslate(swiper.translate - diff);\n                } else {\n                    swiper.slideTo(activeIndex - slidesAppended, 0, false, true);\n                    if (setTranslate) {\n                        swiper.touchEventsData.startTranslate = swiper.touchEventsData.startTranslate - diff;\n                        swiper.touchEventsData.currentTranslate = swiper.touchEventsData.currentTranslate - diff;\n                    }\n                }\n            } else {\n                const shift = gridEnabled ? appendSlidesIndexes.length / params.grid.rows : appendSlidesIndexes.length;\n                swiper.slideTo(swiper.activeIndex - shift, 0, false, true);\n            }\n        }\n    }\n    swiper.allowSlidePrev = allowSlidePrev;\n    swiper.allowSlideNext = allowSlideNext;\n    if (swiper.controller && swiper.controller.control && !byController) {\n        const loopParams = {\n            slideRealIndex,\n            direction,\n            setTranslate,\n            activeSlideIndex,\n            byController: true\n        };\n        if (Array.isArray(swiper.controller.control)) {\n            swiper.controller.control.forEach((c)=>{\n                if (!c.destroyed && c.params.loop) c.loopFix({\n                    ...loopParams,\n                    slideTo: c.params.slidesPerView === params.slidesPerView ? slideTo : false\n                });\n            });\n        } else if (swiper.controller.control instanceof swiper.constructor && swiper.controller.control.params.loop) {\n            swiper.controller.control.loopFix({\n                ...loopParams,\n                slideTo: swiper.controller.control.params.slidesPerView === params.slidesPerView ? slideTo : false\n            });\n        }\n    }\n    swiper.emit(\"loopFix\");\n}\nfunction loopDestroy() {\n    const swiper = this;\n    const { params, slidesEl } = swiper;\n    if (!params.loop || !slidesEl || swiper.virtual && swiper.params.virtual.enabled) return;\n    swiper.recalcSlides();\n    const newSlidesOrder = [];\n    swiper.slides.forEach((slideEl)=>{\n        const index = typeof slideEl.swiperSlideIndex === \"undefined\" ? slideEl.getAttribute(\"data-swiper-slide-index\") * 1 : slideEl.swiperSlideIndex;\n        newSlidesOrder[index] = slideEl;\n    });\n    swiper.slides.forEach((slideEl)=>{\n        slideEl.removeAttribute(\"data-swiper-slide-index\");\n    });\n    newSlidesOrder.forEach((slideEl)=>{\n        slidesEl.append(slideEl);\n    });\n    swiper.recalcSlides();\n    swiper.slideTo(swiper.realIndex, 0);\n}\nvar loop = {\n    loopCreate,\n    loopFix,\n    loopDestroy\n};\nfunction setGrabCursor(moving) {\n    const swiper = this;\n    if (!swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) return;\n    const el = swiper.params.touchEventsTarget === \"container\" ? swiper.el : swiper.wrapperEl;\n    if (swiper.isElement) {\n        swiper.__preventObserver__ = true;\n    }\n    el.style.cursor = \"move\";\n    el.style.cursor = moving ? \"grabbing\" : \"grab\";\n    if (swiper.isElement) {\n        requestAnimationFrame(()=>{\n            swiper.__preventObserver__ = false;\n        });\n    }\n}\nfunction unsetGrabCursor() {\n    const swiper = this;\n    if (swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {\n        return;\n    }\n    if (swiper.isElement) {\n        swiper.__preventObserver__ = true;\n    }\n    swiper[swiper.params.touchEventsTarget === \"container\" ? \"el\" : \"wrapperEl\"].style.cursor = \"\";\n    if (swiper.isElement) {\n        requestAnimationFrame(()=>{\n            swiper.__preventObserver__ = false;\n        });\n    }\n}\nvar grabCursor = {\n    setGrabCursor,\n    unsetGrabCursor\n};\n// Modified from https://stackoverflow.com/questions/54520554/custom-element-getrootnode-closest-function-crossing-multiple-parent-shadowd\nfunction closestElement(selector, base) {\n    if (base === void 0) {\n        base = this;\n    }\n    function __closestFrom(el) {\n        if (!el || el === (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)() || el === (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)()) return null;\n        if (el.assignedSlot) el = el.assignedSlot;\n        const found = el.closest(selector);\n        if (!found && !el.getRootNode) {\n            return null;\n        }\n        return found || __closestFrom(el.getRootNode().host);\n    }\n    return __closestFrom(base);\n}\nfunction preventEdgeSwipe(swiper, event, startX) {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    const { params } = swiper;\n    const edgeSwipeDetection = params.edgeSwipeDetection;\n    const edgeSwipeThreshold = params.edgeSwipeThreshold;\n    if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window1.innerWidth - edgeSwipeThreshold)) {\n        if (edgeSwipeDetection === \"prevent\") {\n            event.preventDefault();\n            return true;\n        }\n        return false;\n    }\n    return true;\n}\nfunction onTouchStart(event) {\n    const swiper = this;\n    const document1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    let e = event;\n    if (e.originalEvent) e = e.originalEvent;\n    const data = swiper.touchEventsData;\n    if (e.type === \"pointerdown\") {\n        if (data.pointerId !== null && data.pointerId !== e.pointerId) {\n            return;\n        }\n        data.pointerId = e.pointerId;\n    } else if (e.type === \"touchstart\" && e.targetTouches.length === 1) {\n        data.touchId = e.targetTouches[0].identifier;\n    }\n    if (e.type === \"touchstart\") {\n        // don't proceed touch event\n        preventEdgeSwipe(swiper, e, e.targetTouches[0].pageX);\n        return;\n    }\n    const { params, touches, enabled } = swiper;\n    if (!enabled) return;\n    if (!params.simulateTouch && e.pointerType === \"mouse\") return;\n    if (swiper.animating && params.preventInteractionOnTransition) {\n        return;\n    }\n    if (!swiper.animating && params.cssMode && params.loop) {\n        swiper.loopFix();\n    }\n    let targetEl = e.target;\n    if (params.touchEventsTarget === \"wrapper\") {\n        if (!(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(targetEl, swiper.wrapperEl)) return;\n    }\n    if (\"which\" in e && e.which === 3) return;\n    if (\"button\" in e && e.button > 0) return;\n    if (data.isTouched && data.isMoved) return;\n    // change target el for shadow root component\n    const swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== \"\";\n    // eslint-disable-next-line\n    const eventPath = e.composedPath ? e.composedPath() : e.path;\n    if (swipingClassHasValue && e.target && e.target.shadowRoot && eventPath) {\n        targetEl = eventPath[0];\n    }\n    const noSwipingSelector = params.noSwipingSelector ? params.noSwipingSelector : \".\".concat(params.noSwipingClass);\n    const isTargetShadow = !!(e.target && e.target.shadowRoot);\n    // use closestElement for shadow root element to get the actual closest for nested shadow root element\n    if (params.noSwiping && (isTargetShadow ? closestElement(noSwipingSelector, targetEl) : targetEl.closest(noSwipingSelector))) {\n        swiper.allowClick = true;\n        return;\n    }\n    if (params.swipeHandler) {\n        if (!targetEl.closest(params.swipeHandler)) return;\n    }\n    touches.currentX = e.pageX;\n    touches.currentY = e.pageY;\n    const startX = touches.currentX;\n    const startY = touches.currentY;\n    // Do NOT start if iOS edge swipe is detected. Otherwise iOS app cannot swipe-to-go-back anymore\n    if (!preventEdgeSwipe(swiper, e, startX)) {\n        return;\n    }\n    Object.assign(data, {\n        isTouched: true,\n        isMoved: false,\n        allowTouchCallbacks: true,\n        isScrolling: undefined,\n        startMoving: undefined\n    });\n    touches.startX = startX;\n    touches.startY = startY;\n    data.touchStartTime = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)();\n    swiper.allowClick = true;\n    swiper.updateSize();\n    swiper.swipeDirection = undefined;\n    if (params.threshold > 0) data.allowThresholdMove = false;\n    let preventDefault = true;\n    if (targetEl.matches(data.focusableElements)) {\n        preventDefault = false;\n        if (targetEl.nodeName === \"SELECT\") {\n            data.isTouched = false;\n        }\n    }\n    if (document1.activeElement && document1.activeElement.matches(data.focusableElements) && document1.activeElement !== targetEl && (e.pointerType === \"mouse\" || e.pointerType !== \"mouse\" && !targetEl.matches(data.focusableElements))) {\n        document1.activeElement.blur();\n    }\n    const shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;\n    if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !targetEl.isContentEditable) {\n        e.preventDefault();\n    }\n    if (params.freeMode && params.freeMode.enabled && swiper.freeMode && swiper.animating && !params.cssMode) {\n        swiper.freeMode.onTouchStart();\n    }\n    swiper.emit(\"touchStart\", e);\n}\nfunction onTouchMove(event) {\n    const document1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    const swiper = this;\n    const data = swiper.touchEventsData;\n    const { params, touches, rtlTranslate: rtl, enabled } = swiper;\n    if (!enabled) return;\n    if (!params.simulateTouch && event.pointerType === \"mouse\") return;\n    let e = event;\n    if (e.originalEvent) e = e.originalEvent;\n    if (e.type === \"pointermove\") {\n        if (data.touchId !== null) return; // return from pointer if we use touch\n        const id = e.pointerId;\n        if (id !== data.pointerId) return;\n    }\n    let targetTouch;\n    if (e.type === \"touchmove\") {\n        targetTouch = [\n            ...e.changedTouches\n        ].find((t)=>t.identifier === data.touchId);\n        if (!targetTouch || targetTouch.identifier !== data.touchId) return;\n    } else {\n        targetTouch = e;\n    }\n    if (!data.isTouched) {\n        if (data.startMoving && data.isScrolling) {\n            swiper.emit(\"touchMoveOpposite\", e);\n        }\n        return;\n    }\n    const pageX = targetTouch.pageX;\n    const pageY = targetTouch.pageY;\n    if (e.preventedByNestedSwiper) {\n        touches.startX = pageX;\n        touches.startY = pageY;\n        return;\n    }\n    if (!swiper.allowTouchMove) {\n        if (!e.target.matches(data.focusableElements)) {\n            swiper.allowClick = false;\n        }\n        if (data.isTouched) {\n            Object.assign(touches, {\n                startX: pageX,\n                startY: pageY,\n                currentX: pageX,\n                currentY: pageY\n            });\n            data.touchStartTime = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)();\n        }\n        return;\n    }\n    if (params.touchReleaseOnEdges && !params.loop) {\n        if (swiper.isVertical()) {\n            // Vertical\n            if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {\n                data.isTouched = false;\n                data.isMoved = false;\n                return;\n            }\n        } else if (rtl && (pageX > touches.startX && -swiper.translate <= swiper.maxTranslate() || pageX < touches.startX && -swiper.translate >= swiper.minTranslate())) {\n            return;\n        } else if (!rtl && (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate())) {\n            return;\n        }\n    }\n    if (document1.activeElement && document1.activeElement.matches(data.focusableElements) && document1.activeElement !== e.target && e.pointerType !== \"mouse\") {\n        document1.activeElement.blur();\n    }\n    if (document1.activeElement) {\n        if (e.target === document1.activeElement && e.target.matches(data.focusableElements)) {\n            data.isMoved = true;\n            swiper.allowClick = false;\n            return;\n        }\n    }\n    if (data.allowTouchCallbacks) {\n        swiper.emit(\"touchMove\", e);\n    }\n    touches.previousX = touches.currentX;\n    touches.previousY = touches.currentY;\n    touches.currentX = pageX;\n    touches.currentY = pageY;\n    const diffX = touches.currentX - touches.startX;\n    const diffY = touches.currentY - touches.startY;\n    if (swiper.params.threshold && Math.sqrt(diffX ** 2 + diffY ** 2) < swiper.params.threshold) return;\n    if (typeof data.isScrolling === \"undefined\") {\n        let touchAngle;\n        if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {\n            data.isScrolling = false;\n        } else {\n            // eslint-disable-next-line\n            if (diffX * diffX + diffY * diffY >= 25) {\n                touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;\n                data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;\n            }\n        }\n    }\n    if (data.isScrolling) {\n        swiper.emit(\"touchMoveOpposite\", e);\n    }\n    if (typeof data.startMoving === \"undefined\") {\n        if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {\n            data.startMoving = true;\n        }\n    }\n    if (data.isScrolling || e.type === \"touchmove\" && data.preventTouchMoveFromPointerMove) {\n        data.isTouched = false;\n        return;\n    }\n    if (!data.startMoving) {\n        return;\n    }\n    swiper.allowClick = false;\n    if (!params.cssMode && e.cancelable) {\n        e.preventDefault();\n    }\n    if (params.touchMoveStopPropagation && !params.nested) {\n        e.stopPropagation();\n    }\n    let diff = swiper.isHorizontal() ? diffX : diffY;\n    let touchesDiff = swiper.isHorizontal() ? touches.currentX - touches.previousX : touches.currentY - touches.previousY;\n    if (params.oneWayMovement) {\n        diff = Math.abs(diff) * (rtl ? 1 : -1);\n        touchesDiff = Math.abs(touchesDiff) * (rtl ? 1 : -1);\n    }\n    touches.diff = diff;\n    diff *= params.touchRatio;\n    if (rtl) {\n        diff = -diff;\n        touchesDiff = -touchesDiff;\n    }\n    const prevTouchesDirection = swiper.touchesDirection;\n    swiper.swipeDirection = diff > 0 ? \"prev\" : \"next\";\n    swiper.touchesDirection = touchesDiff > 0 ? \"prev\" : \"next\";\n    const isLoop = swiper.params.loop && !params.cssMode;\n    const allowLoopFix = swiper.touchesDirection === \"next\" && swiper.allowSlideNext || swiper.touchesDirection === \"prev\" && swiper.allowSlidePrev;\n    if (!data.isMoved) {\n        if (isLoop && allowLoopFix) {\n            swiper.loopFix({\n                direction: swiper.swipeDirection\n            });\n        }\n        data.startTranslate = swiper.getTranslate();\n        swiper.setTransition(0);\n        if (swiper.animating) {\n            const evt = new window.CustomEvent(\"transitionend\", {\n                bubbles: true,\n                cancelable: true,\n                detail: {\n                    bySwiperTouchMove: true\n                }\n            });\n            swiper.wrapperEl.dispatchEvent(evt);\n        }\n        data.allowMomentumBounce = false;\n        // Grab Cursor\n        if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n            swiper.setGrabCursor(true);\n        }\n        swiper.emit(\"sliderFirstMove\", e);\n    }\n    let loopFixed;\n    new Date().getTime();\n    if (params._loopSwapReset !== false && data.isMoved && data.allowThresholdMove && prevTouchesDirection !== swiper.touchesDirection && isLoop && allowLoopFix && Math.abs(diff) >= 1) {\n        Object.assign(touches, {\n            startX: pageX,\n            startY: pageY,\n            currentX: pageX,\n            currentY: pageY,\n            startTranslate: data.currentTranslate\n        });\n        data.loopSwapReset = true;\n        data.startTranslate = data.currentTranslate;\n        return;\n    }\n    swiper.emit(\"sliderMove\", e);\n    data.isMoved = true;\n    data.currentTranslate = diff + data.startTranslate;\n    let disableParentSwiper = true;\n    let resistanceRatio = params.resistanceRatio;\n    if (params.touchReleaseOnEdges) {\n        resistanceRatio = 0;\n    }\n    if (diff > 0) {\n        if (isLoop && allowLoopFix && !loopFixed && data.allowThresholdMove && data.currentTranslate > (params.centeredSlides ? swiper.minTranslate() - swiper.slidesSizesGrid[swiper.activeIndex + 1] - (params.slidesPerView !== \"auto\" && swiper.slides.length - params.slidesPerView >= 2 ? swiper.slidesSizesGrid[swiper.activeIndex + 1] + swiper.params.spaceBetween : 0) - swiper.params.spaceBetween : swiper.minTranslate())) {\n            swiper.loopFix({\n                direction: \"prev\",\n                setTranslate: true,\n                activeSlideIndex: 0\n            });\n        }\n        if (data.currentTranslate > swiper.minTranslate()) {\n            disableParentSwiper = false;\n            if (params.resistance) {\n                data.currentTranslate = swiper.minTranslate() - 1 + (-swiper.minTranslate() + data.startTranslate + diff) ** resistanceRatio;\n            }\n        }\n    } else if (diff < 0) {\n        if (isLoop && allowLoopFix && !loopFixed && data.allowThresholdMove && data.currentTranslate < (params.centeredSlides ? swiper.maxTranslate() + swiper.slidesSizesGrid[swiper.slidesSizesGrid.length - 1] + swiper.params.spaceBetween + (params.slidesPerView !== \"auto\" && swiper.slides.length - params.slidesPerView >= 2 ? swiper.slidesSizesGrid[swiper.slidesSizesGrid.length - 1] + swiper.params.spaceBetween : 0) : swiper.maxTranslate())) {\n            swiper.loopFix({\n                direction: \"next\",\n                setTranslate: true,\n                activeSlideIndex: swiper.slides.length - (params.slidesPerView === \"auto\" ? swiper.slidesPerViewDynamic() : Math.ceil(parseFloat(params.slidesPerView, 10)))\n            });\n        }\n        if (data.currentTranslate < swiper.maxTranslate()) {\n            disableParentSwiper = false;\n            if (params.resistance) {\n                data.currentTranslate = swiper.maxTranslate() + 1 - (swiper.maxTranslate() - data.startTranslate - diff) ** resistanceRatio;\n            }\n        }\n    }\n    if (disableParentSwiper) {\n        e.preventedByNestedSwiper = true;\n    }\n    // Directions locks\n    if (!swiper.allowSlideNext && swiper.swipeDirection === \"next\" && data.currentTranslate < data.startTranslate) {\n        data.currentTranslate = data.startTranslate;\n    }\n    if (!swiper.allowSlidePrev && swiper.swipeDirection === \"prev\" && data.currentTranslate > data.startTranslate) {\n        data.currentTranslate = data.startTranslate;\n    }\n    if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {\n        data.currentTranslate = data.startTranslate;\n    }\n    // Threshold\n    if (params.threshold > 0) {\n        if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {\n            if (!data.allowThresholdMove) {\n                data.allowThresholdMove = true;\n                touches.startX = touches.currentX;\n                touches.startY = touches.currentY;\n                data.currentTranslate = data.startTranslate;\n                touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;\n                return;\n            }\n        } else {\n            data.currentTranslate = data.startTranslate;\n            return;\n        }\n    }\n    if (!params.followFinger || params.cssMode) return;\n    // Update active index in free mode\n    if (params.freeMode && params.freeMode.enabled && swiper.freeMode || params.watchSlidesProgress) {\n        swiper.updateActiveIndex();\n        swiper.updateSlidesClasses();\n    }\n    if (params.freeMode && params.freeMode.enabled && swiper.freeMode) {\n        swiper.freeMode.onTouchMove();\n    }\n    // Update progress\n    swiper.updateProgress(data.currentTranslate);\n    // Update translate\n    swiper.setTranslate(data.currentTranslate);\n}\nfunction onTouchEnd(event) {\n    const swiper = this;\n    const data = swiper.touchEventsData;\n    let e = event;\n    if (e.originalEvent) e = e.originalEvent;\n    let targetTouch;\n    const isTouchEvent = e.type === \"touchend\" || e.type === \"touchcancel\";\n    if (!isTouchEvent) {\n        if (data.touchId !== null) return; // return from pointer if we use touch\n        if (e.pointerId !== data.pointerId) return;\n        targetTouch = e;\n    } else {\n        targetTouch = [\n            ...e.changedTouches\n        ].find((t)=>t.identifier === data.touchId);\n        if (!targetTouch || targetTouch.identifier !== data.touchId) return;\n    }\n    if ([\n        \"pointercancel\",\n        \"pointerout\",\n        \"pointerleave\",\n        \"contextmenu\"\n    ].includes(e.type)) {\n        const proceed = [\n            \"pointercancel\",\n            \"contextmenu\"\n        ].includes(e.type) && (swiper.browser.isSafari || swiper.browser.isWebView);\n        if (!proceed) {\n            return;\n        }\n    }\n    data.pointerId = null;\n    data.touchId = null;\n    const { params, touches, rtlTranslate: rtl, slidesGrid, enabled } = swiper;\n    if (!enabled) return;\n    if (!params.simulateTouch && e.pointerType === \"mouse\") return;\n    if (data.allowTouchCallbacks) {\n        swiper.emit(\"touchEnd\", e);\n    }\n    data.allowTouchCallbacks = false;\n    if (!data.isTouched) {\n        if (data.isMoved && params.grabCursor) {\n            swiper.setGrabCursor(false);\n        }\n        data.isMoved = false;\n        data.startMoving = false;\n        return;\n    }\n    // Return Grab Cursor\n    if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n        swiper.setGrabCursor(false);\n    }\n    // Time diff\n    const touchEndTime = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)();\n    const timeDiff = touchEndTime - data.touchStartTime;\n    // Tap, doubleTap, Click\n    if (swiper.allowClick) {\n        const pathTree = e.path || e.composedPath && e.composedPath();\n        swiper.updateClickedSlide(pathTree && pathTree[0] || e.target, pathTree);\n        swiper.emit(\"tap click\", e);\n        if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {\n            swiper.emit(\"doubleTap doubleClick\", e);\n        }\n    }\n    data.lastClickTime = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)();\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(()=>{\n        if (!swiper.destroyed) swiper.allowClick = true;\n    });\n    if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 && !data.loopSwapReset || data.currentTranslate === data.startTranslate && !data.loopSwapReset) {\n        data.isTouched = false;\n        data.isMoved = false;\n        data.startMoving = false;\n        return;\n    }\n    data.isTouched = false;\n    data.isMoved = false;\n    data.startMoving = false;\n    let currentPos;\n    if (params.followFinger) {\n        currentPos = rtl ? swiper.translate : -swiper.translate;\n    } else {\n        currentPos = -data.currentTranslate;\n    }\n    if (params.cssMode) {\n        return;\n    }\n    if (params.freeMode && params.freeMode.enabled) {\n        swiper.freeMode.onTouchEnd({\n            currentPos\n        });\n        return;\n    }\n    // Find current slide\n    const swipeToLast = currentPos >= -swiper.maxTranslate() && !swiper.params.loop;\n    let stopIndex = 0;\n    let groupSize = swiper.slidesSizesGrid[0];\n    for(let i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup){\n        const increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n        if (typeof slidesGrid[i + increment] !== \"undefined\") {\n            if (swipeToLast || currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + increment]) {\n                stopIndex = i;\n                groupSize = slidesGrid[i + increment] - slidesGrid[i];\n            }\n        } else if (swipeToLast || currentPos >= slidesGrid[i]) {\n            stopIndex = i;\n            groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];\n        }\n    }\n    let rewindFirstIndex = null;\n    let rewindLastIndex = null;\n    if (params.rewind) {\n        if (swiper.isBeginning) {\n            rewindLastIndex = params.virtual && params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\n        } else if (swiper.isEnd) {\n            rewindFirstIndex = 0;\n        }\n    }\n    // Find current slide size\n    const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;\n    const increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n    if (timeDiff > params.longSwipesMs) {\n        // Long touches\n        if (!params.longSwipes) {\n            swiper.slideTo(swiper.activeIndex);\n            return;\n        }\n        if (swiper.swipeDirection === \"next\") {\n            if (ratio >= params.longSwipesRatio) swiper.slideTo(params.rewind && swiper.isEnd ? rewindFirstIndex : stopIndex + increment);\n            else swiper.slideTo(stopIndex);\n        }\n        if (swiper.swipeDirection === \"prev\") {\n            if (ratio > 1 - params.longSwipesRatio) {\n                swiper.slideTo(stopIndex + increment);\n            } else if (rewindLastIndex !== null && ratio < 0 && Math.abs(ratio) > params.longSwipesRatio) {\n                swiper.slideTo(rewindLastIndex);\n            } else {\n                swiper.slideTo(stopIndex);\n            }\n        }\n    } else {\n        // Short swipes\n        if (!params.shortSwipes) {\n            swiper.slideTo(swiper.activeIndex);\n            return;\n        }\n        const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);\n        if (!isNavButtonTarget) {\n            if (swiper.swipeDirection === \"next\") {\n                swiper.slideTo(rewindFirstIndex !== null ? rewindFirstIndex : stopIndex + increment);\n            }\n            if (swiper.swipeDirection === \"prev\") {\n                swiper.slideTo(rewindLastIndex !== null ? rewindLastIndex : stopIndex);\n            }\n        } else if (e.target === swiper.navigation.nextEl) {\n            swiper.slideTo(stopIndex + increment);\n        } else {\n            swiper.slideTo(stopIndex);\n        }\n    }\n}\nfunction onResize() {\n    const swiper = this;\n    const { params, el } = swiper;\n    if (el && el.offsetWidth === 0) return;\n    // Breakpoints\n    if (params.breakpoints) {\n        swiper.setBreakpoint();\n    }\n    // Save locks\n    const { allowSlideNext, allowSlidePrev, snapGrid } = swiper;\n    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n    // Disable locks on resize\n    swiper.allowSlideNext = true;\n    swiper.allowSlidePrev = true;\n    swiper.updateSize();\n    swiper.updateSlides();\n    swiper.updateSlidesClasses();\n    const isVirtualLoop = isVirtual && params.loop;\n    if ((params.slidesPerView === \"auto\" || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides && !isVirtualLoop) {\n        swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n    } else {\n        if (swiper.params.loop && !isVirtual) {\n            swiper.slideToLoop(swiper.realIndex, 0, false, true);\n        } else {\n            swiper.slideTo(swiper.activeIndex, 0, false, true);\n        }\n    }\n    if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {\n        clearTimeout(swiper.autoplay.resizeTimeout);\n        swiper.autoplay.resizeTimeout = setTimeout(()=>{\n            if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {\n                swiper.autoplay.resume();\n            }\n        }, 500);\n    }\n    // Return locks after resize\n    swiper.allowSlidePrev = allowSlidePrev;\n    swiper.allowSlideNext = allowSlideNext;\n    if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {\n        swiper.checkOverflow();\n    }\n}\nfunction onClick(e) {\n    const swiper = this;\n    if (!swiper.enabled) return;\n    if (!swiper.allowClick) {\n        if (swiper.params.preventClicks) e.preventDefault();\n        if (swiper.params.preventClicksPropagation && swiper.animating) {\n            e.stopPropagation();\n            e.stopImmediatePropagation();\n        }\n    }\n}\nfunction onScroll() {\n    const swiper = this;\n    const { wrapperEl, rtlTranslate, enabled } = swiper;\n    if (!enabled) return;\n    swiper.previousTranslate = swiper.translate;\n    if (swiper.isHorizontal()) {\n        swiper.translate = -wrapperEl.scrollLeft;\n    } else {\n        swiper.translate = -wrapperEl.scrollTop;\n    }\n    // eslint-disable-next-line\n    if (swiper.translate === 0) swiper.translate = 0;\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n    let newProgress;\n    const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n    if (translatesDiff === 0) {\n        newProgress = 0;\n    } else {\n        newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;\n    }\n    if (newProgress !== swiper.progress) {\n        swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);\n    }\n    swiper.emit(\"setTranslate\", swiper.translate, false);\n}\nfunction onLoad(e) {\n    const swiper = this;\n    processLazyPreloader(swiper, e.target);\n    if (swiper.params.cssMode || swiper.params.slidesPerView !== \"auto\" && !swiper.params.autoHeight) {\n        return;\n    }\n    swiper.update();\n}\nfunction onDocumentTouchStart() {\n    const swiper = this;\n    if (swiper.documentTouchHandlerProceeded) return;\n    swiper.documentTouchHandlerProceeded = true;\n    if (swiper.params.touchReleaseOnEdges) {\n        swiper.el.style.touchAction = \"auto\";\n    }\n}\nconst events = (swiper, method)=>{\n    const document1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    const { params, el, wrapperEl, device } = swiper;\n    const capture = !!params.nested;\n    const domMethod = method === \"on\" ? \"addEventListener\" : \"removeEventListener\";\n    const swiperMethod = method;\n    if (!el || typeof el === \"string\") return;\n    // Touch Events\n    document1[domMethod](\"touchstart\", swiper.onDocumentTouchStart, {\n        passive: false,\n        capture\n    });\n    el[domMethod](\"touchstart\", swiper.onTouchStart, {\n        passive: false\n    });\n    el[domMethod](\"pointerdown\", swiper.onTouchStart, {\n        passive: false\n    });\n    document1[domMethod](\"touchmove\", swiper.onTouchMove, {\n        passive: false,\n        capture\n    });\n    document1[domMethod](\"pointermove\", swiper.onTouchMove, {\n        passive: false,\n        capture\n    });\n    document1[domMethod](\"touchend\", swiper.onTouchEnd, {\n        passive: true\n    });\n    document1[domMethod](\"pointerup\", swiper.onTouchEnd, {\n        passive: true\n    });\n    document1[domMethod](\"pointercancel\", swiper.onTouchEnd, {\n        passive: true\n    });\n    document1[domMethod](\"touchcancel\", swiper.onTouchEnd, {\n        passive: true\n    });\n    document1[domMethod](\"pointerout\", swiper.onTouchEnd, {\n        passive: true\n    });\n    document1[domMethod](\"pointerleave\", swiper.onTouchEnd, {\n        passive: true\n    });\n    document1[domMethod](\"contextmenu\", swiper.onTouchEnd, {\n        passive: true\n    });\n    // Prevent Links Clicks\n    if (params.preventClicks || params.preventClicksPropagation) {\n        el[domMethod](\"click\", swiper.onClick, true);\n    }\n    if (params.cssMode) {\n        wrapperEl[domMethod](\"scroll\", swiper.onScroll);\n    }\n    // Resize handler\n    if (params.updateOnWindowResize) {\n        swiper[swiperMethod](device.ios || device.android ? \"resize orientationchange observerUpdate\" : \"resize observerUpdate\", onResize, true);\n    } else {\n        swiper[swiperMethod](\"observerUpdate\", onResize, true);\n    }\n    // Images loader\n    el[domMethod](\"load\", swiper.onLoad, {\n        capture: true\n    });\n};\nfunction attachEvents() {\n    const swiper = this;\n    const { params } = swiper;\n    swiper.onTouchStart = onTouchStart.bind(swiper);\n    swiper.onTouchMove = onTouchMove.bind(swiper);\n    swiper.onTouchEnd = onTouchEnd.bind(swiper);\n    swiper.onDocumentTouchStart = onDocumentTouchStart.bind(swiper);\n    if (params.cssMode) {\n        swiper.onScroll = onScroll.bind(swiper);\n    }\n    swiper.onClick = onClick.bind(swiper);\n    swiper.onLoad = onLoad.bind(swiper);\n    events(swiper, \"on\");\n}\nfunction detachEvents() {\n    const swiper = this;\n    events(swiper, \"off\");\n}\nvar events$1 = {\n    attachEvents,\n    detachEvents\n};\nconst isGridEnabled = (swiper, params)=>{\n    return swiper.grid && params.grid && params.grid.rows > 1;\n};\nfunction setBreakpoint() {\n    const swiper = this;\n    const { realIndex, initialized, params, el } = swiper;\n    const breakpoints = params.breakpoints;\n    if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return;\n    const document1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    // Get breakpoint for window/container width and update parameters\n    const breakpointsBase = params.breakpointsBase === \"window\" || !params.breakpointsBase ? params.breakpointsBase : \"container\";\n    const breakpointContainer = [\n        \"window\",\n        \"container\"\n    ].includes(params.breakpointsBase) || !params.breakpointsBase ? swiper.el : document1.querySelector(params.breakpointsBase);\n    const breakpoint = swiper.getBreakpoint(breakpoints, breakpointsBase, breakpointContainer);\n    if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;\n    const breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;\n    const breakpointParams = breakpointOnlyParams || swiper.originalParams;\n    const wasMultiRow = isGridEnabled(swiper, params);\n    const isMultiRow = isGridEnabled(swiper, breakpointParams);\n    const wasGrabCursor = swiper.params.grabCursor;\n    const isGrabCursor = breakpointParams.grabCursor;\n    const wasEnabled = params.enabled;\n    if (wasMultiRow && !isMultiRow) {\n        el.classList.remove(\"\".concat(params.containerModifierClass, \"grid\"), \"\".concat(params.containerModifierClass, \"grid-column\"));\n        swiper.emitContainerClasses();\n    } else if (!wasMultiRow && isMultiRow) {\n        el.classList.add(\"\".concat(params.containerModifierClass, \"grid\"));\n        if (breakpointParams.grid.fill && breakpointParams.grid.fill === \"column\" || !breakpointParams.grid.fill && params.grid.fill === \"column\") {\n            el.classList.add(\"\".concat(params.containerModifierClass, \"grid-column\"));\n        }\n        swiper.emitContainerClasses();\n    }\n    if (wasGrabCursor && !isGrabCursor) {\n        swiper.unsetGrabCursor();\n    } else if (!wasGrabCursor && isGrabCursor) {\n        swiper.setGrabCursor();\n    }\n    // Toggle navigation, pagination, scrollbar\n    [\n        \"navigation\",\n        \"pagination\",\n        \"scrollbar\"\n    ].forEach((prop)=>{\n        if (typeof breakpointParams[prop] === \"undefined\") return;\n        const wasModuleEnabled = params[prop] && params[prop].enabled;\n        const isModuleEnabled = breakpointParams[prop] && breakpointParams[prop].enabled;\n        if (wasModuleEnabled && !isModuleEnabled) {\n            swiper[prop].disable();\n        }\n        if (!wasModuleEnabled && isModuleEnabled) {\n            swiper[prop].enable();\n        }\n    });\n    const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;\n    const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);\n    const wasLoop = params.loop;\n    if (directionChanged && initialized) {\n        swiper.changeDirection();\n    }\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)(swiper.params, breakpointParams);\n    const isEnabled = swiper.params.enabled;\n    const hasLoop = swiper.params.loop;\n    Object.assign(swiper, {\n        allowTouchMove: swiper.params.allowTouchMove,\n        allowSlideNext: swiper.params.allowSlideNext,\n        allowSlidePrev: swiper.params.allowSlidePrev\n    });\n    if (wasEnabled && !isEnabled) {\n        swiper.disable();\n    } else if (!wasEnabled && isEnabled) {\n        swiper.enable();\n    }\n    swiper.currentBreakpoint = breakpoint;\n    swiper.emit(\"_beforeBreakpoint\", breakpointParams);\n    if (initialized) {\n        if (needsReLoop) {\n            swiper.loopDestroy();\n            swiper.loopCreate(realIndex);\n            swiper.updateSlides();\n        } else if (!wasLoop && hasLoop) {\n            swiper.loopCreate(realIndex);\n            swiper.updateSlides();\n        } else if (wasLoop && !hasLoop) {\n            swiper.loopDestroy();\n        }\n    }\n    swiper.emit(\"breakpoint\", breakpointParams);\n}\nfunction getBreakpoint(breakpoints, base, containerEl) {\n    if (base === void 0) {\n        base = \"window\";\n    }\n    if (!breakpoints || base === \"container\" && !containerEl) return undefined;\n    let breakpoint = false;\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    const currentHeight = base === \"window\" ? window1.innerHeight : containerEl.clientHeight;\n    const points = Object.keys(breakpoints).map((point)=>{\n        if (typeof point === \"string\" && point.indexOf(\"@\") === 0) {\n            const minRatio = parseFloat(point.substr(1));\n            const value = currentHeight * minRatio;\n            return {\n                value,\n                point\n            };\n        }\n        return {\n            value: point,\n            point\n        };\n    });\n    points.sort((a, b)=>parseInt(a.value, 10) - parseInt(b.value, 10));\n    for(let i = 0; i < points.length; i += 1){\n        const { point, value } = points[i];\n        if (base === \"window\") {\n            if (window1.matchMedia(\"(min-width: \".concat(value, \"px)\")).matches) {\n                breakpoint = point;\n            }\n        } else if (value <= containerEl.clientWidth) {\n            breakpoint = point;\n        }\n    }\n    return breakpoint || \"max\";\n}\nvar breakpoints = {\n    setBreakpoint,\n    getBreakpoint\n};\nfunction prepareClasses(entries, prefix) {\n    const resultClasses = [];\n    entries.forEach((item)=>{\n        if (typeof item === \"object\") {\n            Object.keys(item).forEach((classNames)=>{\n                if (item[classNames]) {\n                    resultClasses.push(prefix + classNames);\n                }\n            });\n        } else if (typeof item === \"string\") {\n            resultClasses.push(prefix + item);\n        }\n    });\n    return resultClasses;\n}\nfunction addClasses() {\n    const swiper = this;\n    const { classNames, params, rtl, el, device } = swiper;\n    // prettier-ignore\n    const suffixes = prepareClasses([\n        \"initialized\",\n        params.direction,\n        {\n            \"free-mode\": swiper.params.freeMode && params.freeMode.enabled\n        },\n        {\n            \"autoheight\": params.autoHeight\n        },\n        {\n            \"rtl\": rtl\n        },\n        {\n            \"grid\": params.grid && params.grid.rows > 1\n        },\n        {\n            \"grid-column\": params.grid && params.grid.rows > 1 && params.grid.fill === \"column\"\n        },\n        {\n            \"android\": device.android\n        },\n        {\n            \"ios\": device.ios\n        },\n        {\n            \"css-mode\": params.cssMode\n        },\n        {\n            \"centered\": params.cssMode && params.centeredSlides\n        },\n        {\n            \"watch-progress\": params.watchSlidesProgress\n        }\n    ], params.containerModifierClass);\n    classNames.push(...suffixes);\n    el.classList.add(...classNames);\n    swiper.emitContainerClasses();\n}\nfunction removeClasses() {\n    const swiper = this;\n    const { el, classNames } = swiper;\n    if (!el || typeof el === \"string\") return;\n    el.classList.remove(...classNames);\n    swiper.emitContainerClasses();\n}\nvar classes = {\n    addClasses,\n    removeClasses\n};\nfunction checkOverflow() {\n    const swiper = this;\n    const { isLocked: wasLocked, params } = swiper;\n    const { slidesOffsetBefore } = params;\n    if (slidesOffsetBefore) {\n        const lastSlideIndex = swiper.slides.length - 1;\n        const lastSlideRightEdge = swiper.slidesGrid[lastSlideIndex] + swiper.slidesSizesGrid[lastSlideIndex] + slidesOffsetBefore * 2;\n        swiper.isLocked = swiper.size > lastSlideRightEdge;\n    } else {\n        swiper.isLocked = swiper.snapGrid.length === 1;\n    }\n    if (params.allowSlideNext === true) {\n        swiper.allowSlideNext = !swiper.isLocked;\n    }\n    if (params.allowSlidePrev === true) {\n        swiper.allowSlidePrev = !swiper.isLocked;\n    }\n    if (wasLocked && wasLocked !== swiper.isLocked) {\n        swiper.isEnd = false;\n    }\n    if (wasLocked !== swiper.isLocked) {\n        swiper.emit(swiper.isLocked ? \"lock\" : \"unlock\");\n    }\n}\nvar checkOverflow$1 = {\n    checkOverflow\n};\nvar defaults = {\n    init: true,\n    direction: \"horizontal\",\n    oneWayMovement: false,\n    swiperElementNodeName: \"SWIPER-CONTAINER\",\n    touchEventsTarget: \"wrapper\",\n    initialSlide: 0,\n    speed: 300,\n    cssMode: false,\n    updateOnWindowResize: true,\n    resizeObserver: true,\n    nested: false,\n    createElements: false,\n    eventsPrefix: \"swiper\",\n    enabled: true,\n    focusableElements: \"input, select, option, textarea, button, video, label\",\n    // Overrides\n    width: null,\n    height: null,\n    //\n    preventInteractionOnTransition: false,\n    // ssr\n    userAgent: null,\n    url: null,\n    // To support iOS's swipe-to-go-back gesture (when being used in-app).\n    edgeSwipeDetection: false,\n    edgeSwipeThreshold: 20,\n    // Autoheight\n    autoHeight: false,\n    // Set wrapper width\n    setWrapperSize: false,\n    // Virtual Translate\n    virtualTranslate: false,\n    // Effects\n    effect: \"slide\",\n    // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'\n    // Breakpoints\n    breakpoints: undefined,\n    breakpointsBase: \"window\",\n    // Slides grid\n    spaceBetween: 0,\n    slidesPerView: 1,\n    slidesPerGroup: 1,\n    slidesPerGroupSkip: 0,\n    slidesPerGroupAuto: false,\n    centeredSlides: false,\n    centeredSlidesBounds: false,\n    slidesOffsetBefore: 0,\n    // in px\n    slidesOffsetAfter: 0,\n    // in px\n    normalizeSlideIndex: true,\n    centerInsufficientSlides: false,\n    // Disable swiper and hide navigation when container not overflow\n    watchOverflow: true,\n    // Round length\n    roundLengths: false,\n    // Touches\n    touchRatio: 1,\n    touchAngle: 45,\n    simulateTouch: true,\n    shortSwipes: true,\n    longSwipes: true,\n    longSwipesRatio: 0.5,\n    longSwipesMs: 300,\n    followFinger: true,\n    allowTouchMove: true,\n    threshold: 5,\n    touchMoveStopPropagation: false,\n    touchStartPreventDefault: true,\n    touchStartForcePreventDefault: false,\n    touchReleaseOnEdges: false,\n    // Unique Navigation Elements\n    uniqueNavElements: true,\n    // Resistance\n    resistance: true,\n    resistanceRatio: 0.85,\n    // Progress\n    watchSlidesProgress: false,\n    // Cursor\n    grabCursor: false,\n    // Clicks\n    preventClicks: true,\n    preventClicksPropagation: true,\n    slideToClickedSlide: false,\n    // loop\n    loop: false,\n    loopAddBlankSlides: true,\n    loopAdditionalSlides: 0,\n    loopPreventsSliding: true,\n    // rewind\n    rewind: false,\n    // Swiping/no swiping\n    allowSlidePrev: true,\n    allowSlideNext: true,\n    swipeHandler: null,\n    // '.swipe-handler',\n    noSwiping: true,\n    noSwipingClass: \"swiper-no-swiping\",\n    noSwipingSelector: null,\n    // Passive Listeners\n    passiveListeners: true,\n    maxBackfaceHiddenSlides: 10,\n    // NS\n    containerModifierClass: \"swiper-\",\n    // NEW\n    slideClass: \"swiper-slide\",\n    slideBlankClass: \"swiper-slide-blank\",\n    slideActiveClass: \"swiper-slide-active\",\n    slideVisibleClass: \"swiper-slide-visible\",\n    slideFullyVisibleClass: \"swiper-slide-fully-visible\",\n    slideNextClass: \"swiper-slide-next\",\n    slidePrevClass: \"swiper-slide-prev\",\n    wrapperClass: \"swiper-wrapper\",\n    lazyPreloaderClass: \"swiper-lazy-preloader\",\n    lazyPreloadPrevNext: 0,\n    // Callbacks\n    runCallbacksOnInit: true,\n    // Internals\n    _emitClasses: false\n};\nfunction moduleExtendParams(params, allModulesParams) {\n    return function extendParams(obj) {\n        if (obj === void 0) {\n            obj = {};\n        }\n        const moduleParamName = Object.keys(obj)[0];\n        const moduleParams = obj[moduleParamName];\n        if (typeof moduleParams !== \"object\" || moduleParams === null) {\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)(allModulesParams, obj);\n            return;\n        }\n        if (params[moduleParamName] === true) {\n            params[moduleParamName] = {\n                enabled: true\n            };\n        }\n        if (moduleParamName === \"navigation\" && params[moduleParamName] && params[moduleParamName].enabled && !params[moduleParamName].prevEl && !params[moduleParamName].nextEl) {\n            params[moduleParamName].auto = true;\n        }\n        if ([\n            \"pagination\",\n            \"scrollbar\"\n        ].indexOf(moduleParamName) >= 0 && params[moduleParamName] && params[moduleParamName].enabled && !params[moduleParamName].el) {\n            params[moduleParamName].auto = true;\n        }\n        if (!(moduleParamName in params && \"enabled\" in moduleParams)) {\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)(allModulesParams, obj);\n            return;\n        }\n        if (typeof params[moduleParamName] === \"object\" && !(\"enabled\" in params[moduleParamName])) {\n            params[moduleParamName].enabled = true;\n        }\n        if (!params[moduleParamName]) params[moduleParamName] = {\n            enabled: false\n        };\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)(allModulesParams, obj);\n    };\n}\n/* eslint no-param-reassign: \"off\" */ const prototypes = {\n    eventsEmitter,\n    update,\n    translate,\n    transition,\n    slide,\n    loop,\n    grabCursor,\n    events: events$1,\n    breakpoints,\n    checkOverflow: checkOverflow$1,\n    classes\n};\nconst extendedDefaults = {};\nclass Swiper {\n    getDirectionLabel(property) {\n        if (this.isHorizontal()) {\n            return property;\n        }\n        // prettier-ignore\n        return ({\n            \"width\": \"height\",\n            \"margin-top\": \"margin-left\",\n            \"margin-bottom \": \"margin-right\",\n            \"margin-left\": \"margin-top\",\n            \"margin-right\": \"margin-bottom\",\n            \"padding-left\": \"padding-top\",\n            \"padding-right\": \"padding-bottom\",\n            \"marginRight\": \"marginBottom\"\n        })[property];\n    }\n    getSlideIndex(slideEl) {\n        const { slidesEl, params } = this;\n        const slides = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, \".\".concat(params.slideClass, \", swiper-slide\"));\n        const firstSlideIndex = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(slides[0]);\n        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(slideEl) - firstSlideIndex;\n    }\n    getSlideIndexByData(index) {\n        return this.getSlideIndex(this.slides.find((slideEl)=>slideEl.getAttribute(\"data-swiper-slide-index\") * 1 === index));\n    }\n    recalcSlides() {\n        const swiper = this;\n        const { slidesEl, params } = swiper;\n        swiper.slides = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, \".\".concat(params.slideClass, \", swiper-slide\"));\n    }\n    enable() {\n        const swiper = this;\n        if (swiper.enabled) return;\n        swiper.enabled = true;\n        if (swiper.params.grabCursor) {\n            swiper.setGrabCursor();\n        }\n        swiper.emit(\"enable\");\n    }\n    disable() {\n        const swiper = this;\n        if (!swiper.enabled) return;\n        swiper.enabled = false;\n        if (swiper.params.grabCursor) {\n            swiper.unsetGrabCursor();\n        }\n        swiper.emit(\"disable\");\n    }\n    setProgress(progress, speed) {\n        const swiper = this;\n        progress = Math.min(Math.max(progress, 0), 1);\n        const min = swiper.minTranslate();\n        const max = swiper.maxTranslate();\n        const current = (max - min) * progress + min;\n        swiper.translateTo(current, typeof speed === \"undefined\" ? 0 : speed);\n        swiper.updateActiveIndex();\n        swiper.updateSlidesClasses();\n    }\n    emitContainerClasses() {\n        const swiper = this;\n        if (!swiper.params._emitClasses || !swiper.el) return;\n        const cls = swiper.el.className.split(\" \").filter((className)=>{\n            return className.indexOf(\"swiper\") === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;\n        });\n        swiper.emit(\"_containerClasses\", cls.join(\" \"));\n    }\n    getSlideClasses(slideEl) {\n        const swiper = this;\n        if (swiper.destroyed) return \"\";\n        return slideEl.className.split(\" \").filter((className)=>{\n            return className.indexOf(\"swiper-slide\") === 0 || className.indexOf(swiper.params.slideClass) === 0;\n        }).join(\" \");\n    }\n    emitSlidesClasses() {\n        const swiper = this;\n        if (!swiper.params._emitClasses || !swiper.el) return;\n        const updates = [];\n        swiper.slides.forEach((slideEl)=>{\n            const classNames = swiper.getSlideClasses(slideEl);\n            updates.push({\n                slideEl,\n                classNames\n            });\n            swiper.emit(\"_slideClass\", slideEl, classNames);\n        });\n        swiper.emit(\"_slideClasses\", updates);\n    }\n    slidesPerViewDynamic(view, exact) {\n        if (view === void 0) {\n            view = \"current\";\n        }\n        if (exact === void 0) {\n            exact = false;\n        }\n        const swiper = this;\n        const { params, slides, slidesGrid, slidesSizesGrid, size: swiperSize, activeIndex } = swiper;\n        let spv = 1;\n        if (typeof params.slidesPerView === \"number\") return params.slidesPerView;\n        if (params.centeredSlides) {\n            let slideSize = slides[activeIndex] ? Math.ceil(slides[activeIndex].swiperSlideSize) : 0;\n            let breakLoop;\n            for(let i = activeIndex + 1; i < slides.length; i += 1){\n                if (slides[i] && !breakLoop) {\n                    slideSize += Math.ceil(slides[i].swiperSlideSize);\n                    spv += 1;\n                    if (slideSize > swiperSize) breakLoop = true;\n                }\n            }\n            for(let i = activeIndex - 1; i >= 0; i -= 1){\n                if (slides[i] && !breakLoop) {\n                    slideSize += slides[i].swiperSlideSize;\n                    spv += 1;\n                    if (slideSize > swiperSize) breakLoop = true;\n                }\n            }\n        } else {\n            // eslint-disable-next-line\n            if (view === \"current\") {\n                for(let i = activeIndex + 1; i < slides.length; i += 1){\n                    const slideInView = exact ? slidesGrid[i] + slidesSizesGrid[i] - slidesGrid[activeIndex] < swiperSize : slidesGrid[i] - slidesGrid[activeIndex] < swiperSize;\n                    if (slideInView) {\n                        spv += 1;\n                    }\n                }\n            } else {\n                // previous\n                for(let i = activeIndex - 1; i >= 0; i -= 1){\n                    const slideInView = slidesGrid[activeIndex] - slidesGrid[i] < swiperSize;\n                    if (slideInView) {\n                        spv += 1;\n                    }\n                }\n            }\n        }\n        return spv;\n    }\n    update() {\n        const swiper = this;\n        if (!swiper || swiper.destroyed) return;\n        const { snapGrid, params } = swiper;\n        // Breakpoints\n        if (params.breakpoints) {\n            swiper.setBreakpoint();\n        }\n        [\n            ...swiper.el.querySelectorAll('[loading=\"lazy\"]')\n        ].forEach((imageEl)=>{\n            if (imageEl.complete) {\n                processLazyPreloader(swiper, imageEl);\n            }\n        });\n        swiper.updateSize();\n        swiper.updateSlides();\n        swiper.updateProgress();\n        swiper.updateSlidesClasses();\n        function setTranslate() {\n            const translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;\n            const newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());\n            swiper.setTranslate(newTranslate);\n            swiper.updateActiveIndex();\n            swiper.updateSlidesClasses();\n        }\n        let translated;\n        if (params.freeMode && params.freeMode.enabled && !params.cssMode) {\n            setTranslate();\n            if (params.autoHeight) {\n                swiper.updateAutoHeight();\n            }\n        } else {\n            if ((params.slidesPerView === \"auto\" || params.slidesPerView > 1) && swiper.isEnd && !params.centeredSlides) {\n                const slides = swiper.virtual && params.virtual.enabled ? swiper.virtual.slides : swiper.slides;\n                translated = swiper.slideTo(slides.length - 1, 0, false, true);\n            } else {\n                translated = swiper.slideTo(swiper.activeIndex, 0, false, true);\n            }\n            if (!translated) {\n                setTranslate();\n            }\n        }\n        if (params.watchOverflow && snapGrid !== swiper.snapGrid) {\n            swiper.checkOverflow();\n        }\n        swiper.emit(\"update\");\n    }\n    changeDirection(newDirection, needUpdate) {\n        if (needUpdate === void 0) {\n            needUpdate = true;\n        }\n        const swiper = this;\n        const currentDirection = swiper.params.direction;\n        if (!newDirection) {\n            // eslint-disable-next-line\n            newDirection = currentDirection === \"horizontal\" ? \"vertical\" : \"horizontal\";\n        }\n        if (newDirection === currentDirection || newDirection !== \"horizontal\" && newDirection !== \"vertical\") {\n            return swiper;\n        }\n        swiper.el.classList.remove(\"\".concat(swiper.params.containerModifierClass).concat(currentDirection));\n        swiper.el.classList.add(\"\".concat(swiper.params.containerModifierClass).concat(newDirection));\n        swiper.emitContainerClasses();\n        swiper.params.direction = newDirection;\n        swiper.slides.forEach((slideEl)=>{\n            if (newDirection === \"vertical\") {\n                slideEl.style.width = \"\";\n            } else {\n                slideEl.style.height = \"\";\n            }\n        });\n        swiper.emit(\"changeDirection\");\n        if (needUpdate) swiper.update();\n        return swiper;\n    }\n    changeLanguageDirection(direction) {\n        const swiper = this;\n        if (swiper.rtl && direction === \"rtl\" || !swiper.rtl && direction === \"ltr\") return;\n        swiper.rtl = direction === \"rtl\";\n        swiper.rtlTranslate = swiper.params.direction === \"horizontal\" && swiper.rtl;\n        if (swiper.rtl) {\n            swiper.el.classList.add(\"\".concat(swiper.params.containerModifierClass, \"rtl\"));\n            swiper.el.dir = \"rtl\";\n        } else {\n            swiper.el.classList.remove(\"\".concat(swiper.params.containerModifierClass, \"rtl\"));\n            swiper.el.dir = \"ltr\";\n        }\n        swiper.update();\n    }\n    mount(element) {\n        const swiper = this;\n        if (swiper.mounted) return true;\n        // Find el\n        let el = element || swiper.params.el;\n        if (typeof el === \"string\") {\n            el = document.querySelector(el);\n        }\n        if (!el) {\n            return false;\n        }\n        el.swiper = swiper;\n        if (el.parentNode && el.parentNode.host && el.parentNode.host.nodeName === swiper.params.swiperElementNodeName.toUpperCase()) {\n            swiper.isElement = true;\n        }\n        const getWrapperSelector = ()=>{\n            return \".\".concat((swiper.params.wrapperClass || \"\").trim().split(\" \").join(\".\"));\n        };\n        const getWrapper = ()=>{\n            if (el && el.shadowRoot && el.shadowRoot.querySelector) {\n                const res = el.shadowRoot.querySelector(getWrapperSelector());\n                // Children needs to return slot items\n                return res;\n            }\n            return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(el, getWrapperSelector())[0];\n        };\n        // Find Wrapper\n        let wrapperEl = getWrapper();\n        if (!wrapperEl && swiper.params.createElements) {\n            wrapperEl = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"div\", swiper.params.wrapperClass);\n            el.append(wrapperEl);\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(el, \".\".concat(swiper.params.slideClass)).forEach((slideEl)=>{\n                wrapperEl.append(slideEl);\n            });\n        }\n        Object.assign(swiper, {\n            el,\n            wrapperEl,\n            slidesEl: swiper.isElement && !el.parentNode.host.slideSlots ? el.parentNode.host : wrapperEl,\n            hostEl: swiper.isElement ? el.parentNode.host : el,\n            mounted: true,\n            // RTL\n            rtl: el.dir.toLowerCase() === \"rtl\" || (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)(el, \"direction\") === \"rtl\",\n            rtlTranslate: swiper.params.direction === \"horizontal\" && (el.dir.toLowerCase() === \"rtl\" || (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)(el, \"direction\") === \"rtl\"),\n            wrongRTL: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)(wrapperEl, \"display\") === \"-webkit-box\"\n        });\n        return true;\n    }\n    init(el) {\n        const swiper = this;\n        if (swiper.initialized) return swiper;\n        const mounted = swiper.mount(el);\n        if (mounted === false) return swiper;\n        swiper.emit(\"beforeInit\");\n        // Set breakpoint\n        if (swiper.params.breakpoints) {\n            swiper.setBreakpoint();\n        }\n        // Add Classes\n        swiper.addClasses();\n        // Update size\n        swiper.updateSize();\n        // Update slides\n        swiper.updateSlides();\n        if (swiper.params.watchOverflow) {\n            swiper.checkOverflow();\n        }\n        // Set Grab Cursor\n        if (swiper.params.grabCursor && swiper.enabled) {\n            swiper.setGrabCursor();\n        }\n        // Slide To Initial Slide\n        if (swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled) {\n            swiper.slideTo(swiper.params.initialSlide + swiper.virtual.slidesBefore, 0, swiper.params.runCallbacksOnInit, false, true);\n        } else {\n            swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, false, true);\n        }\n        // Create loop\n        if (swiper.params.loop) {\n            swiper.loopCreate(undefined, true);\n        }\n        // Attach events\n        swiper.attachEvents();\n        const lazyElements = [\n            ...swiper.el.querySelectorAll('[loading=\"lazy\"]')\n        ];\n        if (swiper.isElement) {\n            lazyElements.push(...swiper.hostEl.querySelectorAll('[loading=\"lazy\"]'));\n        }\n        lazyElements.forEach((imageEl)=>{\n            if (imageEl.complete) {\n                processLazyPreloader(swiper, imageEl);\n            } else {\n                imageEl.addEventListener(\"load\", (e)=>{\n                    processLazyPreloader(swiper, e.target);\n                });\n            }\n        });\n        preload(swiper);\n        // Init Flag\n        swiper.initialized = true;\n        preload(swiper);\n        // Emit\n        swiper.emit(\"init\");\n        swiper.emit(\"afterInit\");\n        return swiper;\n    }\n    destroy(deleteInstance, cleanStyles) {\n        if (deleteInstance === void 0) {\n            deleteInstance = true;\n        }\n        if (cleanStyles === void 0) {\n            cleanStyles = true;\n        }\n        const swiper = this;\n        const { params, el, wrapperEl, slides } = swiper;\n        if (typeof swiper.params === \"undefined\" || swiper.destroyed) {\n            return null;\n        }\n        swiper.emit(\"beforeDestroy\");\n        // Init Flag\n        swiper.initialized = false;\n        // Detach events\n        swiper.detachEvents();\n        // Destroy loop\n        if (params.loop) {\n            swiper.loopDestroy();\n        }\n        // Cleanup styles\n        if (cleanStyles) {\n            swiper.removeClasses();\n            if (el && typeof el !== \"string\") {\n                el.removeAttribute(\"style\");\n            }\n            if (wrapperEl) {\n                wrapperEl.removeAttribute(\"style\");\n            }\n            if (slides && slides.length) {\n                slides.forEach((slideEl)=>{\n                    slideEl.classList.remove(params.slideVisibleClass, params.slideFullyVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass);\n                    slideEl.removeAttribute(\"style\");\n                    slideEl.removeAttribute(\"data-swiper-slide-index\");\n                });\n            }\n        }\n        swiper.emit(\"destroy\");\n        // Detach emitter events\n        Object.keys(swiper.eventsListeners).forEach((eventName)=>{\n            swiper.off(eventName);\n        });\n        if (deleteInstance !== false) {\n            if (swiper.el && typeof swiper.el !== \"string\") {\n                swiper.el.swiper = null;\n            }\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.y)(swiper);\n        }\n        swiper.destroyed = true;\n        return null;\n    }\n    static extendDefaults(newDefaults) {\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)(extendedDefaults, newDefaults);\n    }\n    static get extendedDefaults() {\n        return extendedDefaults;\n    }\n    static get defaults() {\n        return defaults;\n    }\n    static installModule(mod) {\n        if (!Swiper.prototype.__modules__) Swiper.prototype.__modules__ = [];\n        const modules = Swiper.prototype.__modules__;\n        if (typeof mod === \"function\" && modules.indexOf(mod) < 0) {\n            modules.push(mod);\n        }\n    }\n    static use(module) {\n        if (Array.isArray(module)) {\n            module.forEach((m)=>Swiper.installModule(m));\n            return Swiper;\n        }\n        Swiper.installModule(module);\n        return Swiper;\n    }\n    constructor(){\n        let el;\n        let params;\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === \"Object\") {\n            params = args[0];\n        } else {\n            [el, params] = args;\n        }\n        if (!params) params = {};\n        params = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)({}, params);\n        if (el && !params.el) params.el = el;\n        const document1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n        if (params.el && typeof params.el === \"string\" && document1.querySelectorAll(params.el).length > 1) {\n            const swipers = [];\n            document1.querySelectorAll(params.el).forEach((containerEl)=>{\n                const newParams = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)({}, params, {\n                    el: containerEl\n                });\n                swipers.push(new Swiper(newParams));\n            });\n            // eslint-disable-next-line no-constructor-return\n            return swipers;\n        }\n        // Swiper Instance\n        const swiper = this;\n        swiper.__swiper__ = true;\n        swiper.support = getSupport();\n        swiper.device = getDevice({\n            userAgent: params.userAgent\n        });\n        swiper.browser = getBrowser();\n        swiper.eventsListeners = {};\n        swiper.eventsAnyListeners = [];\n        swiper.modules = [\n            ...swiper.__modules__\n        ];\n        if (params.modules && Array.isArray(params.modules)) {\n            swiper.modules.push(...params.modules);\n        }\n        const allModulesParams = {};\n        swiper.modules.forEach((mod)=>{\n            mod({\n                params,\n                swiper,\n                extendParams: moduleExtendParams(params, allModulesParams),\n                on: swiper.on.bind(swiper),\n                once: swiper.once.bind(swiper),\n                off: swiper.off.bind(swiper),\n                emit: swiper.emit.bind(swiper)\n            });\n        });\n        // Extend defaults with modules params\n        const swiperParams = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)({}, defaults, allModulesParams);\n        // Extend defaults with passed params\n        swiper.params = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)({}, swiperParams, extendedDefaults, params);\n        swiper.originalParams = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)({}, swiper.params);\n        swiper.passedParams = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)({}, params);\n        // add event listeners\n        if (swiper.params && swiper.params.on) {\n            Object.keys(swiper.params.on).forEach((eventName)=>{\n                swiper.on(eventName, swiper.params.on[eventName]);\n            });\n        }\n        if (swiper.params && swiper.params.onAny) {\n            swiper.onAny(swiper.params.onAny);\n        }\n        // Extend Swiper\n        Object.assign(swiper, {\n            enabled: swiper.params.enabled,\n            el,\n            // Classes\n            classNames: [],\n            // Slides\n            slides: [],\n            slidesGrid: [],\n            snapGrid: [],\n            slidesSizesGrid: [],\n            // isDirection\n            isHorizontal () {\n                return swiper.params.direction === \"horizontal\";\n            },\n            isVertical () {\n                return swiper.params.direction === \"vertical\";\n            },\n            // Indexes\n            activeIndex: 0,\n            realIndex: 0,\n            //\n            isBeginning: true,\n            isEnd: false,\n            // Props\n            translate: 0,\n            previousTranslate: 0,\n            progress: 0,\n            velocity: 0,\n            animating: false,\n            cssOverflowAdjustment () {\n                // Returns 0 unless `translate` is > 2**23\n                // Should be subtracted from css values to prevent overflow\n                return Math.trunc(this.translate / 2 ** 23) * 2 ** 23;\n            },\n            // Locks\n            allowSlideNext: swiper.params.allowSlideNext,\n            allowSlidePrev: swiper.params.allowSlidePrev,\n            // Touch Events\n            touchEventsData: {\n                isTouched: undefined,\n                isMoved: undefined,\n                allowTouchCallbacks: undefined,\n                touchStartTime: undefined,\n                isScrolling: undefined,\n                currentTranslate: undefined,\n                startTranslate: undefined,\n                allowThresholdMove: undefined,\n                // Form elements to match\n                focusableElements: swiper.params.focusableElements,\n                // Last click time\n                lastClickTime: 0,\n                clickTimeout: undefined,\n                // Velocities\n                velocities: [],\n                allowMomentumBounce: undefined,\n                startMoving: undefined,\n                pointerId: null,\n                touchId: null\n            },\n            // Clicks\n            allowClick: true,\n            // Touches\n            allowTouchMove: swiper.params.allowTouchMove,\n            touches: {\n                startX: 0,\n                startY: 0,\n                currentX: 0,\n                currentY: 0,\n                diff: 0\n            },\n            // Images\n            imagesToLoad: [],\n            imagesLoaded: 0\n        });\n        swiper.emit(\"_swiper\");\n        // Init\n        if (swiper.params.init) {\n            swiper.init();\n        }\n        // Return app instance\n        // eslint-disable-next-line no-constructor-return\n        return swiper;\n    }\n}\nObject.keys(prototypes).forEach((prototypeGroup)=>{\n    Object.keys(prototypes[prototypeGroup]).forEach((protoMethod)=>{\n        Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];\n    });\n});\nSwiper.use([\n    Resize,\n    Observer\n]);\n\nvar _c, _c1;\n$RefreshReg$(_c, \"Resize\");\n$RefreshReg$(_c1, \"Observer\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/shared/swiper-core.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/shared/update-on-virtual-data.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/swiper/shared/update-on-virtual-data.mjs ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: function() { return /* binding */ getChangedParams; },\n/* harmony export */   g: function() { return /* binding */ getParams; },\n/* harmony export */   m: function() { return /* binding */ mountSwiper; },\n/* harmony export */   u: function() { return /* binding */ updateOnVirtualData; }\n/* harmony export */ });\n/* harmony import */ var _update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./update-swiper.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/update-swiper.mjs\");\n/* harmony import */ var _swiper_core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./swiper-core.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/swiper-core.mjs\");\n\n\nfunction getParams(obj, splitEvents) {\n    if (obj === void 0) {\n        obj = {};\n    }\n    if (splitEvents === void 0) {\n        splitEvents = true;\n    }\n    const params = {\n        on: {}\n    };\n    const events = {};\n    const passedParams = {};\n    (0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(params, _swiper_core_mjs__WEBPACK_IMPORTED_MODULE_1__.d);\n    params._emitClasses = true;\n    params.init = false;\n    const rest = {};\n    const allowedParams = _update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.p.map((key)=>key.replace(/_/, \"\"));\n    const plainObj = Object.assign({}, obj);\n    Object.keys(plainObj).forEach((key)=>{\n        if (typeof obj[key] === \"undefined\") return;\n        if (allowedParams.indexOf(key) >= 0) {\n            if ((0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(obj[key])) {\n                params[key] = {};\n                passedParams[key] = {};\n                (0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(params[key], obj[key]);\n                (0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(passedParams[key], obj[key]);\n            } else {\n                params[key] = obj[key];\n                passedParams[key] = obj[key];\n            }\n        } else if (key.search(/on[A-Z]/) === 0 && typeof obj[key] === \"function\") {\n            if (splitEvents) {\n                events[\"\".concat(key[2].toLowerCase()).concat(key.substr(3))] = obj[key];\n            } else {\n                params.on[\"\".concat(key[2].toLowerCase()).concat(key.substr(3))] = obj[key];\n            }\n        } else {\n            rest[key] = obj[key];\n        }\n    });\n    [\n        \"navigation\",\n        \"pagination\",\n        \"scrollbar\"\n    ].forEach((key)=>{\n        if (params[key] === true) params[key] = {};\n        if (params[key] === false) delete params[key];\n    });\n    return {\n        params,\n        passedParams,\n        rest,\n        events\n    };\n}\nfunction mountSwiper(_ref, swiperParams) {\n    let { el, nextEl, prevEl, paginationEl, scrollbarEl, swiper } = _ref;\n    if ((0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(swiperParams) && nextEl && prevEl) {\n        swiper.params.navigation.nextEl = nextEl;\n        swiper.originalParams.navigation.nextEl = nextEl;\n        swiper.params.navigation.prevEl = prevEl;\n        swiper.originalParams.navigation.prevEl = prevEl;\n    }\n    if ((0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(swiperParams) && paginationEl) {\n        swiper.params.pagination.el = paginationEl;\n        swiper.originalParams.pagination.el = paginationEl;\n    }\n    if ((0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(swiperParams) && scrollbarEl) {\n        swiper.params.scrollbar.el = scrollbarEl;\n        swiper.originalParams.scrollbar.el = scrollbarEl;\n    }\n    swiper.init(el);\n}\nfunction getChangedParams(swiperParams, oldParams, children, oldChildren, getKey) {\n    const keys = [];\n    if (!oldParams) return keys;\n    const addKey = (key)=>{\n        if (keys.indexOf(key) < 0) keys.push(key);\n    };\n    if (children && oldChildren) {\n        const oldChildrenKeys = oldChildren.map(getKey);\n        const childrenKeys = children.map(getKey);\n        if (oldChildrenKeys.join(\"\") !== childrenKeys.join(\"\")) addKey(\"children\");\n        if (oldChildren.length !== children.length) addKey(\"children\");\n    }\n    const watchParams = _update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.p.filter((key)=>key[0] === \"_\").map((key)=>key.replace(/_/, \"\"));\n    watchParams.forEach((key)=>{\n        if (key in swiperParams && key in oldParams) {\n            if ((0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(swiperParams[key]) && (0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(oldParams[key])) {\n                const newKeys = Object.keys(swiperParams[key]);\n                const oldKeys = Object.keys(oldParams[key]);\n                if (newKeys.length !== oldKeys.length) {\n                    addKey(key);\n                } else {\n                    newKeys.forEach((newKey)=>{\n                        if (swiperParams[key][newKey] !== oldParams[key][newKey]) {\n                            addKey(key);\n                        }\n                    });\n                    oldKeys.forEach((oldKey)=>{\n                        if (swiperParams[key][oldKey] !== oldParams[key][oldKey]) addKey(key);\n                    });\n                }\n            } else if (swiperParams[key] !== oldParams[key]) {\n                addKey(key);\n            }\n        }\n    });\n    return keys;\n}\nconst updateOnVirtualData = (swiper)=>{\n    if (!swiper || swiper.destroyed || !swiper.params.virtual || swiper.params.virtual && !swiper.params.virtual.enabled) return;\n    swiper.updateSlides();\n    swiper.updateProgress();\n    swiper.updateSlidesClasses();\n    swiper.emit(\"_virtualUpdated\");\n    if (swiper.parallax && swiper.params.parallax && swiper.params.parallax.enabled) {\n        swiper.parallax.setTranslate();\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/shared/update-on-virtual-data.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/shared/update-swiper.mjs":
/*!******************************************************!*\
  !*** ./node_modules/swiper/shared/update-swiper.mjs ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: function() { return /* binding */ needsPagination; },\n/* harmony export */   b: function() { return /* binding */ needsScrollbar; },\n/* harmony export */   c: function() { return /* binding */ attrToProp; },\n/* harmony export */   d: function() { return /* binding */ uniqueClasses; },\n/* harmony export */   e: function() { return /* binding */ extend; },\n/* harmony export */   i: function() { return /* binding */ isObject; },\n/* harmony export */   n: function() { return /* binding */ needsNavigation; },\n/* harmony export */   p: function() { return /* binding */ paramsList; },\n/* harmony export */   u: function() { return /* binding */ updateSwiper; },\n/* harmony export */   w: function() { return /* binding */ wrapperClass; }\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\");\n\n/* underscore in name -> watch for changes */ const paramsList = [\n    \"eventsPrefix\",\n    \"injectStyles\",\n    \"injectStylesUrls\",\n    \"modules\",\n    \"init\",\n    \"_direction\",\n    \"oneWayMovement\",\n    \"swiperElementNodeName\",\n    \"touchEventsTarget\",\n    \"initialSlide\",\n    \"_speed\",\n    \"cssMode\",\n    \"updateOnWindowResize\",\n    \"resizeObserver\",\n    \"nested\",\n    \"focusableElements\",\n    \"_enabled\",\n    \"_width\",\n    \"_height\",\n    \"preventInteractionOnTransition\",\n    \"userAgent\",\n    \"url\",\n    \"_edgeSwipeDetection\",\n    \"_edgeSwipeThreshold\",\n    \"_freeMode\",\n    \"_autoHeight\",\n    \"setWrapperSize\",\n    \"virtualTranslate\",\n    \"_effect\",\n    \"breakpoints\",\n    \"breakpointsBase\",\n    \"_spaceBetween\",\n    \"_slidesPerView\",\n    \"maxBackfaceHiddenSlides\",\n    \"_grid\",\n    \"_slidesPerGroup\",\n    \"_slidesPerGroupSkip\",\n    \"_slidesPerGroupAuto\",\n    \"_centeredSlides\",\n    \"_centeredSlidesBounds\",\n    \"_slidesOffsetBefore\",\n    \"_slidesOffsetAfter\",\n    \"normalizeSlideIndex\",\n    \"_centerInsufficientSlides\",\n    \"_watchOverflow\",\n    \"roundLengths\",\n    \"touchRatio\",\n    \"touchAngle\",\n    \"simulateTouch\",\n    \"_shortSwipes\",\n    \"_longSwipes\",\n    \"longSwipesRatio\",\n    \"longSwipesMs\",\n    \"_followFinger\",\n    \"allowTouchMove\",\n    \"_threshold\",\n    \"touchMoveStopPropagation\",\n    \"touchStartPreventDefault\",\n    \"touchStartForcePreventDefault\",\n    \"touchReleaseOnEdges\",\n    \"uniqueNavElements\",\n    \"_resistance\",\n    \"_resistanceRatio\",\n    \"_watchSlidesProgress\",\n    \"_grabCursor\",\n    \"preventClicks\",\n    \"preventClicksPropagation\",\n    \"_slideToClickedSlide\",\n    \"_loop\",\n    \"loopAdditionalSlides\",\n    \"loopAddBlankSlides\",\n    \"loopPreventsSliding\",\n    \"_rewind\",\n    \"_allowSlidePrev\",\n    \"_allowSlideNext\",\n    \"_swipeHandler\",\n    \"_noSwiping\",\n    \"noSwipingClass\",\n    \"noSwipingSelector\",\n    \"passiveListeners\",\n    \"containerModifierClass\",\n    \"slideClass\",\n    \"slideActiveClass\",\n    \"slideVisibleClass\",\n    \"slideFullyVisibleClass\",\n    \"slideNextClass\",\n    \"slidePrevClass\",\n    \"slideBlankClass\",\n    \"wrapperClass\",\n    \"lazyPreloaderClass\",\n    \"lazyPreloadPrevNext\",\n    \"runCallbacksOnInit\",\n    \"observer\",\n    \"observeParents\",\n    \"observeSlideChildren\",\n    // modules\n    \"a11y\",\n    \"_autoplay\",\n    \"_controller\",\n    \"coverflowEffect\",\n    \"cubeEffect\",\n    \"fadeEffect\",\n    \"flipEffect\",\n    \"creativeEffect\",\n    \"cardsEffect\",\n    \"hashNavigation\",\n    \"history\",\n    \"keyboard\",\n    \"mousewheel\",\n    \"_navigation\",\n    \"_pagination\",\n    \"parallax\",\n    \"_scrollbar\",\n    \"_thumbs\",\n    \"virtual\",\n    \"zoom\",\n    \"control\"\n];\nfunction isObject(o) {\n    return typeof o === \"object\" && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === \"Object\" && !o.__swiper__;\n}\nfunction extend(target, src) {\n    const noExtend = [\n        \"__proto__\",\n        \"constructor\",\n        \"prototype\"\n    ];\n    Object.keys(src).filter((key)=>noExtend.indexOf(key) < 0).forEach((key)=>{\n        if (typeof target[key] === \"undefined\") target[key] = src[key];\n        else if (isObject(src[key]) && isObject(target[key]) && Object.keys(src[key]).length > 0) {\n            if (src[key].__swiper__) target[key] = src[key];\n            else extend(target[key], src[key]);\n        } else {\n            target[key] = src[key];\n        }\n    });\n}\nfunction needsNavigation(params) {\n    if (params === void 0) {\n        params = {};\n    }\n    return params.navigation && typeof params.navigation.nextEl === \"undefined\" && typeof params.navigation.prevEl === \"undefined\";\n}\nfunction needsPagination(params) {\n    if (params === void 0) {\n        params = {};\n    }\n    return params.pagination && typeof params.pagination.el === \"undefined\";\n}\nfunction needsScrollbar(params) {\n    if (params === void 0) {\n        params = {};\n    }\n    return params.scrollbar && typeof params.scrollbar.el === \"undefined\";\n}\nfunction uniqueClasses(classNames) {\n    if (classNames === void 0) {\n        classNames = \"\";\n    }\n    const classes = classNames.split(\" \").map((c)=>c.trim()).filter((c)=>!!c);\n    const unique = [];\n    classes.forEach((c)=>{\n        if (unique.indexOf(c) < 0) unique.push(c);\n    });\n    return unique.join(\" \");\n}\nfunction attrToProp(attrName) {\n    if (attrName === void 0) {\n        attrName = \"\";\n    }\n    return attrName.replace(/-[a-z]/g, (l)=>l.toUpperCase().replace(\"-\", \"\"));\n}\nfunction wrapperClass(className) {\n    if (className === void 0) {\n        className = \"\";\n    }\n    if (!className) return \"swiper-wrapper\";\n    if (!className.includes(\"swiper-wrapper\")) return \"swiper-wrapper \".concat(className);\n    return className;\n}\nfunction updateSwiper(_ref) {\n    let { swiper, slides, passedParams, changedParams, nextEl, prevEl, scrollbarEl, paginationEl } = _ref;\n    const updateParams = changedParams.filter((key)=>key !== \"children\" && key !== \"direction\" && key !== \"wrapperClass\");\n    const { params: currentParams, pagination, navigation, scrollbar, virtual, thumbs } = swiper;\n    let needThumbsInit;\n    let needControllerInit;\n    let needPaginationInit;\n    let needScrollbarInit;\n    let needNavigationInit;\n    let loopNeedDestroy;\n    let loopNeedEnable;\n    let loopNeedReloop;\n    if (changedParams.includes(\"thumbs\") && passedParams.thumbs && passedParams.thumbs.swiper && !passedParams.thumbs.swiper.destroyed && currentParams.thumbs && (!currentParams.thumbs.swiper || currentParams.thumbs.swiper.destroyed)) {\n        needThumbsInit = true;\n    }\n    if (changedParams.includes(\"controller\") && passedParams.controller && passedParams.controller.control && currentParams.controller && !currentParams.controller.control) {\n        needControllerInit = true;\n    }\n    if (changedParams.includes(\"pagination\") && passedParams.pagination && (passedParams.pagination.el || paginationEl) && (currentParams.pagination || currentParams.pagination === false) && pagination && !pagination.el) {\n        needPaginationInit = true;\n    }\n    if (changedParams.includes(\"scrollbar\") && passedParams.scrollbar && (passedParams.scrollbar.el || scrollbarEl) && (currentParams.scrollbar || currentParams.scrollbar === false) && scrollbar && !scrollbar.el) {\n        needScrollbarInit = true;\n    }\n    if (changedParams.includes(\"navigation\") && passedParams.navigation && (passedParams.navigation.prevEl || prevEl) && (passedParams.navigation.nextEl || nextEl) && (currentParams.navigation || currentParams.navigation === false) && navigation && !navigation.prevEl && !navigation.nextEl) {\n        needNavigationInit = true;\n    }\n    const destroyModule = (mod)=>{\n        if (!swiper[mod]) return;\n        swiper[mod].destroy();\n        if (mod === \"navigation\") {\n            if (swiper.isElement) {\n                swiper[mod].prevEl.remove();\n                swiper[mod].nextEl.remove();\n            }\n            currentParams[mod].prevEl = undefined;\n            currentParams[mod].nextEl = undefined;\n            swiper[mod].prevEl = undefined;\n            swiper[mod].nextEl = undefined;\n        } else {\n            if (swiper.isElement) {\n                swiper[mod].el.remove();\n            }\n            currentParams[mod].el = undefined;\n            swiper[mod].el = undefined;\n        }\n    };\n    if (changedParams.includes(\"loop\") && swiper.isElement) {\n        if (currentParams.loop && !passedParams.loop) {\n            loopNeedDestroy = true;\n        } else if (!currentParams.loop && passedParams.loop) {\n            loopNeedEnable = true;\n        } else {\n            loopNeedReloop = true;\n        }\n    }\n    updateParams.forEach((key)=>{\n        if (isObject(currentParams[key]) && isObject(passedParams[key])) {\n            Object.assign(currentParams[key], passedParams[key]);\n            if ((key === \"navigation\" || key === \"pagination\" || key === \"scrollbar\") && \"enabled\" in passedParams[key] && !passedParams[key].enabled) {\n                destroyModule(key);\n            }\n        } else {\n            const newValue = passedParams[key];\n            if ((newValue === true || newValue === false) && (key === \"navigation\" || key === \"pagination\" || key === \"scrollbar\")) {\n                if (newValue === false) {\n                    destroyModule(key);\n                }\n            } else {\n                currentParams[key] = passedParams[key];\n            }\n        }\n    });\n    if (updateParams.includes(\"controller\") && !needControllerInit && swiper.controller && swiper.controller.control && currentParams.controller && currentParams.controller.control) {\n        swiper.controller.control = currentParams.controller.control;\n    }\n    if (changedParams.includes(\"children\") && slides && virtual && currentParams.virtual.enabled) {\n        virtual.slides = slides;\n        virtual.update(true);\n    } else if (changedParams.includes(\"virtual\") && virtual && currentParams.virtual.enabled) {\n        if (slides) virtual.slides = slides;\n        virtual.update(true);\n    }\n    if (changedParams.includes(\"children\") && slides && currentParams.loop) {\n        loopNeedReloop = true;\n    }\n    if (needThumbsInit) {\n        const initialized = thumbs.init();\n        if (initialized) thumbs.update(true);\n    }\n    if (needControllerInit) {\n        swiper.controller.control = currentParams.controller.control;\n    }\n    if (needPaginationInit) {\n        if (swiper.isElement && (!paginationEl || typeof paginationEl === \"string\")) {\n            paginationEl = document.createElement(\"div\");\n            paginationEl.classList.add(\"swiper-pagination\");\n            paginationEl.part.add(\"pagination\");\n            swiper.el.appendChild(paginationEl);\n        }\n        if (paginationEl) currentParams.pagination.el = paginationEl;\n        pagination.init();\n        pagination.render();\n        pagination.update();\n    }\n    if (needScrollbarInit) {\n        if (swiper.isElement && (!scrollbarEl || typeof scrollbarEl === \"string\")) {\n            scrollbarEl = document.createElement(\"div\");\n            scrollbarEl.classList.add(\"swiper-scrollbar\");\n            scrollbarEl.part.add(\"scrollbar\");\n            swiper.el.appendChild(scrollbarEl);\n        }\n        if (scrollbarEl) currentParams.scrollbar.el = scrollbarEl;\n        scrollbar.init();\n        scrollbar.updateSize();\n        scrollbar.setTranslate();\n    }\n    if (needNavigationInit) {\n        if (swiper.isElement) {\n            if (!nextEl || typeof nextEl === \"string\") {\n                nextEl = document.createElement(\"div\");\n                nextEl.classList.add(\"swiper-button-next\");\n                (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(nextEl, swiper.hostEl.constructor.nextButtonSvg);\n                nextEl.part.add(\"button-next\");\n                swiper.el.appendChild(nextEl);\n            }\n            if (!prevEl || typeof prevEl === \"string\") {\n                prevEl = document.createElement(\"div\");\n                prevEl.classList.add(\"swiper-button-prev\");\n                (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(prevEl, swiper.hostEl.constructor.prevButtonSvg);\n                prevEl.part.add(\"button-prev\");\n                swiper.el.appendChild(prevEl);\n            }\n        }\n        if (nextEl) currentParams.navigation.nextEl = nextEl;\n        if (prevEl) currentParams.navigation.prevEl = prevEl;\n        navigation.init();\n        navigation.update();\n    }\n    if (changedParams.includes(\"allowSlideNext\")) {\n        swiper.allowSlideNext = passedParams.allowSlideNext;\n    }\n    if (changedParams.includes(\"allowSlidePrev\")) {\n        swiper.allowSlidePrev = passedParams.allowSlidePrev;\n    }\n    if (changedParams.includes(\"direction\")) {\n        swiper.changeDirection(passedParams.direction, false);\n    }\n    if (loopNeedDestroy || loopNeedReloop) {\n        swiper.loopDestroy();\n    }\n    if (loopNeedEnable || loopNeedReloop) {\n        swiper.loopCreate();\n    }\n    swiper.update();\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/shared/update-swiper.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/shared/utils.mjs":
/*!**********************************************!*\
  !*** ./node_modules/swiper/shared/utils.mjs ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: function() { return /* binding */ setCSSProperty; },\n/* harmony export */   b: function() { return /* binding */ elementParents; },\n/* harmony export */   c: function() { return /* binding */ createElement; },\n/* harmony export */   d: function() { return /* binding */ elementOffset; },\n/* harmony export */   e: function() { return /* binding */ elementChildren; },\n/* harmony export */   f: function() { return /* binding */ now; },\n/* harmony export */   g: function() { return /* binding */ getSlideTransformEl; },\n/* harmony export */   h: function() { return /* binding */ elementOuterSize; },\n/* harmony export */   i: function() { return /* binding */ elementIndex; },\n/* harmony export */   j: function() { return /* binding */ classesToTokens; },\n/* harmony export */   k: function() { return /* binding */ getTranslate; },\n/* harmony export */   l: function() { return /* binding */ elementTransitionEnd; },\n/* harmony export */   m: function() { return /* binding */ makeElementsArray; },\n/* harmony export */   n: function() { return /* binding */ nextTick; },\n/* harmony export */   o: function() { return /* binding */ isObject; },\n/* harmony export */   p: function() { return /* binding */ getRotateFix; },\n/* harmony export */   q: function() { return /* binding */ elementStyle; },\n/* harmony export */   r: function() { return /* binding */ elementNextAll; },\n/* harmony export */   s: function() { return /* binding */ setInnerHTML; },\n/* harmony export */   t: function() { return /* binding */ elementPrevAll; },\n/* harmony export */   u: function() { return /* binding */ animateCSSModeScroll; },\n/* harmony export */   v: function() { return /* binding */ showWarning; },\n/* harmony export */   w: function() { return /* binding */ elementIsChildOf; },\n/* harmony export */   x: function() { return /* binding */ extend; },\n/* harmony export */   y: function() { return /* binding */ deleteProps; }\n/* harmony export */ });\n/* harmony import */ var _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ssr-window.esm.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n\nfunction classesToTokens(classes) {\n    if (classes === void 0) {\n        classes = \"\";\n    }\n    return classes.trim().split(\" \").filter((c)=>!!c.trim());\n}\nfunction deleteProps(obj) {\n    const object = obj;\n    Object.keys(object).forEach((key)=>{\n        try {\n            object[key] = null;\n        } catch (e) {\n        // no getter for object\n        }\n        try {\n            delete object[key];\n        } catch (e) {\n        // something got wrong\n        }\n    });\n}\nfunction nextTick(callback, delay) {\n    if (delay === void 0) {\n        delay = 0;\n    }\n    return setTimeout(callback, delay);\n}\nfunction now() {\n    return Date.now();\n}\nfunction getComputedStyle(el) {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    let style;\n    if (window1.getComputedStyle) {\n        style = window1.getComputedStyle(el, null);\n    }\n    if (!style && el.currentStyle) {\n        style = el.currentStyle;\n    }\n    if (!style) {\n        style = el.style;\n    }\n    return style;\n}\nfunction getTranslate(el, axis) {\n    if (axis === void 0) {\n        axis = \"x\";\n    }\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    let matrix;\n    let curTransform;\n    let transformMatrix;\n    const curStyle = getComputedStyle(el);\n    if (window1.WebKitCSSMatrix) {\n        curTransform = curStyle.transform || curStyle.webkitTransform;\n        if (curTransform.split(\",\").length > 6) {\n            curTransform = curTransform.split(\", \").map((a)=>a.replace(\",\", \".\")).join(\", \");\n        }\n        // Some old versions of Webkit choke when 'none' is passed; pass\n        // empty string instead in this case\n        transformMatrix = new window1.WebKitCSSMatrix(curTransform === \"none\" ? \"\" : curTransform);\n    } else {\n        transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue(\"transform\").replace(\"translate(\", \"matrix(1, 0, 0, 1,\");\n        matrix = transformMatrix.toString().split(\",\");\n    }\n    if (axis === \"x\") {\n        // Latest Chrome and webkits Fix\n        if (window1.WebKitCSSMatrix) curTransform = transformMatrix.m41;\n        else if (matrix.length === 16) curTransform = parseFloat(matrix[12]);\n        else curTransform = parseFloat(matrix[4]);\n    }\n    if (axis === \"y\") {\n        // Latest Chrome and webkits Fix\n        if (window1.WebKitCSSMatrix) curTransform = transformMatrix.m42;\n        else if (matrix.length === 16) curTransform = parseFloat(matrix[13]);\n        else curTransform = parseFloat(matrix[5]);\n    }\n    return curTransform || 0;\n}\nfunction isObject(o) {\n    return typeof o === \"object\" && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === \"Object\";\n}\nfunction isNode(node) {\n    // eslint-disable-next-line\n    if ( true && typeof window.HTMLElement !== \"undefined\") {\n        return node instanceof HTMLElement;\n    }\n    return node && (node.nodeType === 1 || node.nodeType === 11);\n}\nfunction extend() {\n    const to = Object(arguments.length <= 0 ? undefined : arguments[0]);\n    const noExtend = [\n        \"__proto__\",\n        \"constructor\",\n        \"prototype\"\n    ];\n    for(let i = 1; i < arguments.length; i += 1){\n        const nextSource = i < 0 || arguments.length <= i ? undefined : arguments[i];\n        if (nextSource !== undefined && nextSource !== null && !isNode(nextSource)) {\n            const keysArray = Object.keys(Object(nextSource)).filter((key)=>noExtend.indexOf(key) < 0);\n            for(let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1){\n                const nextKey = keysArray[nextIndex];\n                const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n                if (desc !== undefined && desc.enumerable) {\n                    if (isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\n                        if (nextSource[nextKey].__swiper__) {\n                            to[nextKey] = nextSource[nextKey];\n                        } else {\n                            extend(to[nextKey], nextSource[nextKey]);\n                        }\n                    } else if (!isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\n                        to[nextKey] = {};\n                        if (nextSource[nextKey].__swiper__) {\n                            to[nextKey] = nextSource[nextKey];\n                        } else {\n                            extend(to[nextKey], nextSource[nextKey]);\n                        }\n                    } else {\n                        to[nextKey] = nextSource[nextKey];\n                    }\n                }\n            }\n        }\n    }\n    return to;\n}\nfunction setCSSProperty(el, varName, varValue) {\n    el.style.setProperty(varName, varValue);\n}\nfunction animateCSSModeScroll(_ref) {\n    let { swiper, targetPosition, side } = _ref;\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    const startPosition = -swiper.translate;\n    let startTime = null;\n    let time;\n    const duration = swiper.params.speed;\n    swiper.wrapperEl.style.scrollSnapType = \"none\";\n    window1.cancelAnimationFrame(swiper.cssModeFrameID);\n    const dir = targetPosition > startPosition ? \"next\" : \"prev\";\n    const isOutOfBound = (current, target)=>{\n        return dir === \"next\" && current >= target || dir === \"prev\" && current <= target;\n    };\n    const animate = ()=>{\n        time = new Date().getTime();\n        if (startTime === null) {\n            startTime = time;\n        }\n        const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);\n        const easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;\n        let currentPosition = startPosition + easeProgress * (targetPosition - startPosition);\n        if (isOutOfBound(currentPosition, targetPosition)) {\n            currentPosition = targetPosition;\n        }\n        swiper.wrapperEl.scrollTo({\n            [side]: currentPosition\n        });\n        if (isOutOfBound(currentPosition, targetPosition)) {\n            swiper.wrapperEl.style.overflow = \"hidden\";\n            swiper.wrapperEl.style.scrollSnapType = \"\";\n            setTimeout(()=>{\n                swiper.wrapperEl.style.overflow = \"\";\n                swiper.wrapperEl.scrollTo({\n                    [side]: currentPosition\n                });\n            });\n            window1.cancelAnimationFrame(swiper.cssModeFrameID);\n            return;\n        }\n        swiper.cssModeFrameID = window1.requestAnimationFrame(animate);\n    };\n    animate();\n}\nfunction getSlideTransformEl(slideEl) {\n    return slideEl.querySelector(\".swiper-slide-transform\") || slideEl.shadowRoot && slideEl.shadowRoot.querySelector(\".swiper-slide-transform\") || slideEl;\n}\nfunction elementChildren(element, selector) {\n    if (selector === void 0) {\n        selector = \"\";\n    }\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    const children = [\n        ...element.children\n    ];\n    if (window1.HTMLSlotElement && element instanceof HTMLSlotElement) {\n        children.push(...element.assignedElements());\n    }\n    if (!selector) {\n        return children;\n    }\n    return children.filter((el)=>el.matches(selector));\n}\nfunction elementIsChildOfSlot(el, slot) {\n    // Breadth-first search through all parent's children and assigned elements\n    const elementsQueue = [\n        slot\n    ];\n    while(elementsQueue.length > 0){\n        const elementToCheck = elementsQueue.shift();\n        if (el === elementToCheck) {\n            return true;\n        }\n        elementsQueue.push(...elementToCheck.children, ...elementToCheck.shadowRoot ? elementToCheck.shadowRoot.children : [], ...elementToCheck.assignedElements ? elementToCheck.assignedElements() : []);\n    }\n}\nfunction elementIsChildOf(el, parent) {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    let isChild = parent.contains(el);\n    if (!isChild && window1.HTMLSlotElement && parent instanceof HTMLSlotElement) {\n        const children = [\n            ...parent.assignedElements()\n        ];\n        isChild = children.includes(el);\n        if (!isChild) {\n            isChild = elementIsChildOfSlot(el, parent);\n        }\n    }\n    return isChild;\n}\nfunction showWarning(text) {\n    try {\n        console.warn(text);\n        return;\n    } catch (err) {\n    // err\n    }\n}\nfunction createElement(tag, classes) {\n    if (classes === void 0) {\n        classes = [];\n    }\n    const el = document.createElement(tag);\n    el.classList.add(...Array.isArray(classes) ? classes : classesToTokens(classes));\n    return el;\n}\nfunction elementOffset(el) {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    const document1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    const box = el.getBoundingClientRect();\n    const body = document1.body;\n    const clientTop = el.clientTop || body.clientTop || 0;\n    const clientLeft = el.clientLeft || body.clientLeft || 0;\n    const scrollTop = el === window1 ? window1.scrollY : el.scrollTop;\n    const scrollLeft = el === window1 ? window1.scrollX : el.scrollLeft;\n    return {\n        top: box.top + scrollTop - clientTop,\n        left: box.left + scrollLeft - clientLeft\n    };\n}\nfunction elementPrevAll(el, selector) {\n    const prevEls = [];\n    while(el.previousElementSibling){\n        const prev = el.previousElementSibling; // eslint-disable-line\n        if (selector) {\n            if (prev.matches(selector)) prevEls.push(prev);\n        } else prevEls.push(prev);\n        el = prev;\n    }\n    return prevEls;\n}\nfunction elementNextAll(el, selector) {\n    const nextEls = [];\n    while(el.nextElementSibling){\n        const next = el.nextElementSibling; // eslint-disable-line\n        if (selector) {\n            if (next.matches(selector)) nextEls.push(next);\n        } else nextEls.push(next);\n        el = next;\n    }\n    return nextEls;\n}\nfunction elementStyle(el, prop) {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    return window1.getComputedStyle(el, null).getPropertyValue(prop);\n}\nfunction elementIndex(el) {\n    let child = el;\n    let i;\n    if (child) {\n        i = 0;\n        // eslint-disable-next-line\n        while((child = child.previousSibling) !== null){\n            if (child.nodeType === 1) i += 1;\n        }\n        return i;\n    }\n    return undefined;\n}\nfunction elementParents(el, selector) {\n    const parents = []; // eslint-disable-line\n    let parent = el.parentElement; // eslint-disable-line\n    while(parent){\n        if (selector) {\n            if (parent.matches(selector)) parents.push(parent);\n        } else {\n            parents.push(parent);\n        }\n        parent = parent.parentElement;\n    }\n    return parents;\n}\nfunction elementTransitionEnd(el, callback) {\n    function fireCallBack(e) {\n        if (e.target !== el) return;\n        callback.call(el, e);\n        el.removeEventListener(\"transitionend\", fireCallBack);\n    }\n    if (callback) {\n        el.addEventListener(\"transitionend\", fireCallBack);\n    }\n}\nfunction elementOuterSize(el, size, includeMargins) {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    if (includeMargins) {\n        return el[size === \"width\" ? \"offsetWidth\" : \"offsetHeight\"] + parseFloat(window1.getComputedStyle(el, null).getPropertyValue(size === \"width\" ? \"margin-right\" : \"margin-top\")) + parseFloat(window1.getComputedStyle(el, null).getPropertyValue(size === \"width\" ? \"margin-left\" : \"margin-bottom\"));\n    }\n    return el.offsetWidth;\n}\nfunction makeElementsArray(el) {\n    return (Array.isArray(el) ? el : [\n        el\n    ]).filter((e)=>!!e);\n}\nfunction getRotateFix(swiper) {\n    return (v)=>{\n        if (Math.abs(v) > 0 && swiper.browser && swiper.browser.need3dFix && Math.abs(v) % 90 === 0) {\n            return v + 0.001;\n        }\n        return v;\n    };\n}\nfunction setInnerHTML(el, html) {\n    if (html === void 0) {\n        html = \"\";\n    }\n    if (typeof trustedTypes !== \"undefined\") {\n        el.innerHTML = trustedTypes.createPolicy(\"html\", {\n            createHTML: (s)=>s\n        }).createHTML(html);\n    } else {\n        el.innerHTML = html;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL3V0aWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF3RTtBQUV4RSxTQUFTSSxnQkFBZ0JDLE9BQU87SUFDOUIsSUFBSUEsWUFBWSxLQUFLLEdBQUc7UUFDdEJBLFVBQVU7SUFDWjtJQUNBLE9BQU9BLFFBQVFDLElBQUksR0FBR0MsS0FBSyxDQUFDLEtBQUtDLE1BQU0sQ0FBQ0MsQ0FBQUEsSUFBSyxDQUFDLENBQUNBLEVBQUVILElBQUk7QUFDdkQ7QUFFQSxTQUFTSSxZQUFZQyxHQUFHO0lBQ3RCLE1BQU1DLFNBQVNEO0lBQ2ZFLE9BQU9DLElBQUksQ0FBQ0YsUUFBUUcsT0FBTyxDQUFDQyxDQUFBQTtRQUMxQixJQUFJO1lBQ0ZKLE1BQU0sQ0FBQ0ksSUFBSSxHQUFHO1FBQ2hCLEVBQUUsT0FBT0MsR0FBRztRQUNWLHVCQUF1QjtRQUN6QjtRQUNBLElBQUk7WUFDRixPQUFPTCxNQUFNLENBQUNJLElBQUk7UUFDcEIsRUFBRSxPQUFPQyxHQUFHO1FBQ1Ysc0JBQXNCO1FBQ3hCO0lBQ0Y7QUFDRjtBQUNBLFNBQVNDLFNBQVNDLFFBQVEsRUFBRUMsS0FBSztJQUMvQixJQUFJQSxVQUFVLEtBQUssR0FBRztRQUNwQkEsUUFBUTtJQUNWO0lBQ0EsT0FBT0MsV0FBV0YsVUFBVUM7QUFDOUI7QUFDQSxTQUFTRTtJQUNQLE9BQU9DLEtBQUtELEdBQUc7QUFDakI7QUFDQSxTQUFTRSxpQkFBaUJDLEVBQUU7SUFDMUIsTUFBTUMsVUFBU3pCLHNEQUFTQTtJQUN4QixJQUFJMEI7SUFDSixJQUFJRCxRQUFPRixnQkFBZ0IsRUFBRTtRQUMzQkcsUUFBUUQsUUFBT0YsZ0JBQWdCLENBQUNDLElBQUk7SUFDdEM7SUFDQSxJQUFJLENBQUNFLFNBQVNGLEdBQUdHLFlBQVksRUFBRTtRQUM3QkQsUUFBUUYsR0FBR0csWUFBWTtJQUN6QjtJQUNBLElBQUks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QUFZQyxDQUFBQSxJQUFLQTtRQUNuQixHQUFHRCxVQUFVLENBQUNKO0lBQ2hCLE9BQU87UUFDTHRLLEdBQUd3SyxTQUFTLEdBQUdGO0lBQ2pCO0FBQ0Y7QUFFZ2dCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL3V0aWxzLm1qcz85ZDE2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGEgYXMgZ2V0V2luZG93LCBnIGFzIGdldERvY3VtZW50IH0gZnJvbSAnLi9zc3Itd2luZG93LmVzbS5tanMnO1xuXG5mdW5jdGlvbiBjbGFzc2VzVG9Ub2tlbnMoY2xhc3Nlcykge1xuICBpZiAoY2xhc3NlcyA9PT0gdm9pZCAwKSB7XG4gICAgY2xhc3NlcyA9ICcnO1xuICB9XG4gIHJldHVybiBjbGFzc2VzLnRyaW0oKS5zcGxpdCgnICcpLmZpbHRlcihjID0+ICEhYy50cmltKCkpO1xufVxuXG5mdW5jdGlvbiBkZWxldGVQcm9wcyhvYmopIHtcbiAgY29uc3Qgb2JqZWN0ID0gb2JqO1xuICBPYmplY3Qua2V5cyhvYmplY3QpLmZvckVhY2goa2V5ID0+IHtcbiAgICB0cnkge1xuICAgICAgb2JqZWN0W2tleV0gPSBudWxsO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIG5vIGdldHRlciBmb3Igb2JqZWN0XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBkZWxldGUgb2JqZWN0W2tleV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gc29tZXRoaW5nIGdvdCB3cm9uZ1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBuZXh0VGljayhjYWxsYmFjaywgZGVsYXkpIHtcbiAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICBkZWxheSA9IDA7XG4gIH1cbiAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIGRlbGF5KTtcbn1cbmZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIERhdGUubm93KCk7XG59XG5mdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlKGVsKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgc3R5bGU7XG4gIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSkge1xuICAgIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpO1xuICB9XG4gIGlmICghc3R5bGUgJiYgZWwuY3VycmVudFN0eWxlKSB7XG4gICAgc3R5bGUgPSBlbC5jdXJyZW50U3R5bGU7XG4gIH1cbiAgaWYgKCFzdHlsZSkge1xuICAgIHN0eWxlID0gZWwuc3R5bGU7XG4gIH1cbiAgcmV0dXJuIHN0eWxlO1xufVxuZnVuY3Rpb24gZ2V0VHJhbnNsYXRlKGVsLCBheGlzKSB7XG4gIGlmIChheGlzID09PSB2b2lkIDApIHtcbiAgICBheGlzID0gJ3gnO1xuICB9XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgbWF0cml4O1xuICBsZXQgY3VyVHJhbnNmb3JtO1xuICBsZXQgdHJhbnNmb3JtTWF0cml4O1xuICBjb25zdCBjdXJTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWwpO1xuICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkge1xuICAgIGN1clRyYW5zZm9ybSA9IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS53ZWJraXRUcmFuc2Zvcm07XG4gICAgaWYgKGN1clRyYW5zZm9ybS5zcGxpdCgnLCcpLmxlbmd0aCA+IDYpIHtcbiAgICAgIGN1clRyYW5zZm9ybSA9IGN1clRyYW5zZm9ybS5zcGxpdCgnLCAnKS5tYXAoYSA9PiBhLnJlcGxhY2UoJywnLCAnLicpKS5qb2luKCcsICcpO1xuICAgIH1cbiAgICAvLyBTb21lIG9sZCB2ZXJzaW9ucyBvZiBXZWJraXQgY2hva2Ugd2hlbiAnbm9uZScgaXMgcGFzc2VkOyBwYXNzXG4gICAgLy8gZW1wdHkgc3RyaW5nIGluc3RlYWQgaW4gdGhpcyBjYXNlXG4gICAgdHJhbnNmb3JtTWF0cml4ID0gbmV3IHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgoY3VyVHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IGN1clRyYW5zZm9ybSk7XG4gIH0gZWxzZSB7XG4gICAgdHJhbnNmb3JtTWF0cml4ID0gY3VyU3R5bGUuTW96VHJhbnNmb3JtIHx8IGN1clN0eWxlLk9UcmFuc2Zvcm0gfHwgY3VyU3R5bGUuTXNUcmFuc2Zvcm0gfHwgY3VyU3R5bGUubXNUcmFuc2Zvcm0gfHwgY3VyU3R5bGUudHJhbnNmb3JtIHx8IGN1clN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3RyYW5zZm9ybScpLnJlcGxhY2UoJ3RyYW5zbGF0ZSgnLCAnbWF0cml4KDEsIDAsIDAsIDEsJyk7XG4gICAgbWF0cml4ID0gdHJhbnNmb3JtTWF0cml4LnRvU3RyaW5nKCkuc3BsaXQoJywnKTtcbiAgfVxuICBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgLy8gTGF0ZXN0IENocm9tZSBhbmQgd2Via2l0cyBGaXhcbiAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MTtcbiAgICAvLyBDcmF6eSBJRTEwIE1hdHJpeFxuICAgIGVsc2UgaWYgKG1hdHJpeC5sZW5ndGggPT09IDE2KSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFsxMl0pO1xuICAgIC8vIE5vcm1hbCBCcm93c2Vyc1xuICAgIGVsc2UgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNF0pO1xuICB9XG4gIGlmIChheGlzID09PSAneScpIHtcbiAgICAvLyBMYXRlc3QgQ2hyb21lIGFuZCB3ZWJraXRzIEZpeFxuICAgIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSBjdXJUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1NYXRyaXgubTQyO1xuICAgIC8vIENyYXp5IElFMTAgTWF0cml4XG4gICAgZWxzZSBpZiAobWF0cml4Lmxlbmd0aCA9PT0gMTYpIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzEzXSk7XG4gICAgLy8gTm9ybWFsIEJyb3dzZXJzXG4gICAgZWxzZSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFs1XSk7XG4gIH1cbiAgcmV0dXJuIGN1clRyYW5zZm9ybSB8fCAwO1xufVxuZnVuY3Rpb24gaXNPYmplY3Qobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09ICdvYmplY3QnICYmIG8gIT09IG51bGwgJiYgby5jb25zdHJ1Y3RvciAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpID09PSAnT2JqZWN0Jztcbn1cbmZ1bmN0aW9uIGlzTm9kZShub2RlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5IVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xuICB9XG4gIHJldHVybiBub2RlICYmIChub2RlLm5vZGVUeXBlID09PSAxIHx8IG5vZGUubm9kZVR5cGUgPT09IDExKTtcbn1cbmZ1bmN0aW9uIGV4dGVuZCgpIHtcbiAgY29uc3QgdG8gPSBPYmplY3QoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKTtcbiAgY29uc3Qgbm9FeHRlbmQgPSBbJ19fcHJvdG9fXycsICdjb25zdHJ1Y3RvcicsICdwcm90b3R5cGUnXTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBuZXh0U291cmNlID0gaSA8IDAgfHwgYXJndW1lbnRzLmxlbmd0aCA8PSBpID8gdW5kZWZpbmVkIDogYXJndW1lbnRzW2ldO1xuICAgIGlmIChuZXh0U291cmNlICE9PSB1bmRlZmluZWQgJiYgbmV4dFNvdXJjZSAhPT0gbnVsbCAmJiAhaXNOb2RlKG5leHRTb3VyY2UpKSB7XG4gICAgICBjb25zdCBrZXlzQXJyYXkgPSBPYmplY3Qua2V5cyhPYmplY3QobmV4dFNvdXJjZSkpLmZpbHRlcihrZXkgPT4gbm9FeHRlbmQuaW5kZXhPZihrZXkpIDwgMCk7XG4gICAgICBmb3IgKGxldCBuZXh0SW5kZXggPSAwLCBsZW4gPSBrZXlzQXJyYXkubGVuZ3RoOyBuZXh0SW5kZXggPCBsZW47IG5leHRJbmRleCArPSAxKSB7XG4gICAgICAgIGNvbnN0IG5leHRLZXkgPSBrZXlzQXJyYXlbbmV4dEluZGV4XTtcbiAgICAgICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobmV4dFNvdXJjZSwgbmV4dEtleSk7XG4gICAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQgJiYgZGVzYy5lbnVtZXJhYmxlKSB7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KHRvW25leHRLZXldKSAmJiBpc09iamVjdChuZXh0U291cmNlW25leHRLZXldKSkge1xuICAgICAgICAgICAgaWYgKG5leHRTb3VyY2VbbmV4dEtleV0uX19zd2lwZXJfXykge1xuICAgICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBleHRlbmQodG9bbmV4dEtleV0sIG5leHRTb3VyY2VbbmV4dEtleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoIWlzT2JqZWN0KHRvW25leHRLZXldKSAmJiBpc09iamVjdChuZXh0U291cmNlW25leHRLZXldKSkge1xuICAgICAgICAgICAgdG9bbmV4dEtleV0gPSB7fTtcbiAgICAgICAgICAgIGlmIChuZXh0U291cmNlW25leHRLZXldLl9fc3dpcGVyX18pIHtcbiAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdG87XG59XG5mdW5jdGlvbiBzZXRDU1NQcm9wZXJ0eShlbCwgdmFyTmFtZSwgdmFyVmFsdWUpIHtcbiAgZWwuc3R5bGUuc2V0UHJvcGVydHkodmFyTmFtZSwgdmFyVmFsdWUpO1xufVxuZnVuY3Rpb24gYW5pbWF0ZUNTU01vZGVTY3JvbGwoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICB0YXJnZXRQb3NpdGlvbixcbiAgICBzaWRlXG4gIH0gPSBfcmVmO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3Qgc3RhcnRQb3NpdGlvbiA9IC1zd2lwZXIudHJhbnNsYXRlO1xuICBsZXQgc3RhcnRUaW1lID0gbnVsbDtcbiAgbGV0IHRpbWU7XG4gIGNvbnN0IGR1cmF0aW9uID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcbiAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICdub25lJztcbiAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHN3aXBlci5jc3NNb2RlRnJhbWVJRCk7XG4gIGNvbnN0IGRpciA9IHRhcmdldFBvc2l0aW9uID4gc3RhcnRQb3NpdGlvbiA/ICduZXh0JyA6ICdwcmV2JztcbiAgY29uc3QgaXNPdXRPZkJvdW5kID0gKGN1cnJlbnQsIHRhcmdldCkgPT4ge1xuICAgIHJldHVybiBkaXIgPT09ICduZXh0JyAmJiBjdXJyZW50ID49IHRhcmdldCB8fCBkaXIgPT09ICdwcmV2JyAmJiBjdXJyZW50IDw9IHRhcmdldDtcbiAgfTtcbiAgY29uc3QgYW5pbWF0ZSA9ICgpID0+IHtcbiAgICB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgaWYgKHN0YXJ0VGltZSA9PT0gbnVsbCkge1xuICAgICAgc3RhcnRUaW1lID0gdGltZTtcbiAgICB9XG4gICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBkdXJhdGlvbiwgMSksIDApO1xuICAgIGNvbnN0IGVhc2VQcm9ncmVzcyA9IDAuNSAtIE1hdGguY29zKHByb2dyZXNzICogTWF0aC5QSSkgLyAyO1xuICAgIGxldCBjdXJyZW50UG9zaXRpb24gPSBzdGFydFBvc2l0aW9uICsgZWFzZVByb2dyZXNzICogKHRhcmdldFBvc2l0aW9uIC0gc3RhcnRQb3NpdGlvbik7XG4gICAgaWYgKGlzT3V0T2ZCb3VuZChjdXJyZW50UG9zaXRpb24sIHRhcmdldFBvc2l0aW9uKSkge1xuICAgICAgY3VycmVudFBvc2l0aW9uID0gdGFyZ2V0UG9zaXRpb247XG4gICAgfVxuICAgIHN3aXBlci53cmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgW3NpZGVdOiBjdXJyZW50UG9zaXRpb25cbiAgICB9KTtcbiAgICBpZiAoaXNPdXRPZkJvdW5kKGN1cnJlbnRQb3NpdGlvbiwgdGFyZ2V0UG9zaXRpb24pKSB7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gJyc7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5vdmVyZmxvdyA9ICcnO1xuICAgICAgICBzd2lwZXIud3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgICAgICBbc2lkZV06IGN1cnJlbnRQb3NpdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHN3aXBlci5jc3NNb2RlRnJhbWVJRCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXBlci5jc3NNb2RlRnJhbWVJRCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XG4gIH07XG4gIGFuaW1hdGUoKTtcbn1cbmZ1bmN0aW9uIGdldFNsaWRlVHJhbnNmb3JtRWwoc2xpZGVFbCkge1xuICByZXR1cm4gc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXRyYW5zZm9ybScpIHx8IHNsaWRlRWwuc2hhZG93Um9vdCAmJiBzbGlkZUVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS10cmFuc2Zvcm0nKSB8fCBzbGlkZUVsO1xufVxuZnVuY3Rpb24gZWxlbWVudENoaWxkcmVuKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gIGlmIChzZWxlY3RvciA9PT0gdm9pZCAwKSB7XG4gICAgc2VsZWN0b3IgPSAnJztcbiAgfVxuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgY2hpbGRyZW4gPSBbLi4uZWxlbWVudC5jaGlsZHJlbl07XG4gIGlmICh3aW5kb3cuSFRNTFNsb3RFbGVtZW50ICYmIGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MU2xvdEVsZW1lbnQpIHtcbiAgICBjaGlsZHJlbi5wdXNoKC4uLmVsZW1lbnQuYXNzaWduZWRFbGVtZW50cygpKTtcbiAgfVxuICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG4gIHJldHVybiBjaGlsZHJlbi5maWx0ZXIoZWwgPT4gZWwubWF0Y2hlcyhzZWxlY3RvcikpO1xufVxuZnVuY3Rpb24gZWxlbWVudElzQ2hpbGRPZlNsb3QoZWwsIHNsb3QpIHtcbiAgLy8gQnJlYWR0aC1maXJzdCBzZWFyY2ggdGhyb3VnaCBhbGwgcGFyZW50J3MgY2hpbGRyZW4gYW5kIGFzc2lnbmVkIGVsZW1lbnRzXG4gIGNvbnN0IGVsZW1lbnRzUXVldWUgPSBbc2xvdF07XG4gIHdoaWxlIChlbGVtZW50c1F1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCBlbGVtZW50VG9DaGVjayA9IGVsZW1lbnRzUXVldWUuc2hpZnQoKTtcbiAgICBpZiAoZWwgPT09IGVsZW1lbnRUb0NoZWNrKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZWxlbWVudHNRdWV1ZS5wdXNoKC4uLmVsZW1lbnRUb0NoZWNrLmNoaWxkcmVuLCAuLi4oZWxlbWVudFRvQ2hlY2suc2hhZG93Um9vdCA/IGVsZW1lbnRUb0NoZWNrLnNoYWRvd1Jvb3QuY2hpbGRyZW4gOiBbXSksIC4uLihlbGVtZW50VG9DaGVjay5hc3NpZ25lZEVsZW1lbnRzID8gZWxlbWVudFRvQ2hlY2suYXNzaWduZWRFbGVtZW50cygpIDogW10pKTtcbiAgfVxufVxuZnVuY3Rpb24gZWxlbWVudElzQ2hpbGRPZihlbCwgcGFyZW50KSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgaXNDaGlsZCA9IHBhcmVudC5jb250YWlucyhlbCk7XG4gIGlmICghaXNDaGlsZCAmJiB3aW5kb3cuSFRNTFNsb3RFbGVtZW50ICYmIHBhcmVudCBpbnN0YW5jZW9mIEhUTUxTbG90RWxlbWVudCkge1xuICAgIGNvbnN0IGNoaWxkcmVuID0gWy4uLnBhcmVudC5hc3NpZ25lZEVsZW1lbnRzKCldO1xuICAgIGlzQ2hpbGQgPSBjaGlsZHJlbi5pbmNsdWRlcyhlbCk7XG4gICAgaWYgKCFpc0NoaWxkKSB7XG4gICAgICBpc0NoaWxkID0gZWxlbWVudElzQ2hpbGRPZlNsb3QoZWwsIHBhcmVudCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpc0NoaWxkO1xufVxuZnVuY3Rpb24gc2hvd1dhcm5pbmcodGV4dCkge1xuICB0cnkge1xuICAgIGNvbnNvbGUud2Fybih0ZXh0KTtcbiAgICByZXR1cm47XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIGVyclxuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50KHRhZywgY2xhc3Nlcykge1xuICBpZiAoY2xhc3NlcyA9PT0gdm9pZCAwKSB7XG4gICAgY2xhc3NlcyA9IFtdO1xuICB9XG4gIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICBlbC5jbGFzc0xpc3QuYWRkKC4uLihBcnJheS5pc0FycmF5KGNsYXNzZXMpID8gY2xhc3NlcyA6IGNsYXNzZXNUb1Rva2VucyhjbGFzc2VzKSkpO1xuICByZXR1cm4gZWw7XG59XG5mdW5jdGlvbiBlbGVtZW50T2Zmc2V0KGVsKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGNvbnN0IGJveCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICBjb25zdCBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgY29uc3QgY2xpZW50VG9wID0gZWwuY2xpZW50VG9wIHx8IGJvZHkuY2xpZW50VG9wIHx8IDA7XG4gIGNvbnN0IGNsaWVudExlZnQgPSBlbC5jbGllbnRMZWZ0IHx8IGJvZHkuY2xpZW50TGVmdCB8fCAwO1xuICBjb25zdCBzY3JvbGxUb3AgPSBlbCA9PT0gd2luZG93ID8gd2luZG93LnNjcm9sbFkgOiBlbC5zY3JvbGxUb3A7XG4gIGNvbnN0IHNjcm9sbExlZnQgPSBlbCA9PT0gd2luZG93ID8gd2luZG93LnNjcm9sbFggOiBlbC5zY3JvbGxMZWZ0O1xuICByZXR1cm4ge1xuICAgIHRvcDogYm94LnRvcCArIHNjcm9sbFRvcCAtIGNsaWVudFRvcCxcbiAgICBsZWZ0OiBib3gubGVmdCArIHNjcm9sbExlZnQgLSBjbGllbnRMZWZ0XG4gIH07XG59XG5mdW5jdGlvbiBlbGVtZW50UHJldkFsbChlbCwgc2VsZWN0b3IpIHtcbiAgY29uc3QgcHJldkVscyA9IFtdO1xuICB3aGlsZSAoZWwucHJldmlvdXNFbGVtZW50U2libGluZykge1xuICAgIGNvbnN0IHByZXYgPSBlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAocHJldi5tYXRjaGVzKHNlbGVjdG9yKSkgcHJldkVscy5wdXNoKHByZXYpO1xuICAgIH0gZWxzZSBwcmV2RWxzLnB1c2gocHJldik7XG4gICAgZWwgPSBwcmV2O1xuICB9XG4gIHJldHVybiBwcmV2RWxzO1xufVxuZnVuY3Rpb24gZWxlbWVudE5leHRBbGwoZWwsIHNlbGVjdG9yKSB7XG4gIGNvbnN0IG5leHRFbHMgPSBbXTtcbiAgd2hpbGUgKGVsLm5leHRFbGVtZW50U2libGluZykge1xuICAgIGNvbnN0IG5leHQgPSBlbC5uZXh0RWxlbWVudFNpYmxpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChuZXh0Lm1hdGNoZXMoc2VsZWN0b3IpKSBuZXh0RWxzLnB1c2gobmV4dCk7XG4gICAgfSBlbHNlIG5leHRFbHMucHVzaChuZXh0KTtcbiAgICBlbCA9IG5leHQ7XG4gIH1cbiAgcmV0dXJuIG5leHRFbHM7XG59XG5mdW5jdGlvbiBlbGVtZW50U3R5bGUoZWwsIHByb3ApIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wKTtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRJbmRleChlbCkge1xuICBsZXQgY2hpbGQgPSBlbDtcbiAgbGV0IGk7XG4gIGlmIChjaGlsZCkge1xuICAgIGkgPSAwO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHdoaWxlICgoY2hpbGQgPSBjaGlsZC5wcmV2aW91c1NpYmxpbmcpICE9PSBudWxsKSB7XG4gICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEpIGkgKz0gMTtcbiAgICB9XG4gICAgcmV0dXJuIGk7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRQYXJlbnRzKGVsLCBzZWxlY3Rvcikge1xuICBjb25zdCBwYXJlbnRzID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgbGV0IHBhcmVudCA9IGVsLnBhcmVudEVsZW1lbnQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgd2hpbGUgKHBhcmVudCkge1xuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKHBhcmVudC5tYXRjaGVzKHNlbGVjdG9yKSkgcGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmVudHMucHVzaChwYXJlbnQpO1xuICAgIH1cbiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50RWxlbWVudDtcbiAgfVxuICByZXR1cm4gcGFyZW50cztcbn1cbmZ1bmN0aW9uIGVsZW1lbnRUcmFuc2l0aW9uRW5kKGVsLCBjYWxsYmFjaykge1xuICBmdW5jdGlvbiBmaXJlQ2FsbEJhY2soZSkge1xuICAgIGlmIChlLnRhcmdldCAhPT0gZWwpIHJldHVybjtcbiAgICBjYWxsYmFjay5jYWxsKGVsLCBlKTtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZmlyZUNhbGxCYWNrKTtcbiAgfVxuICBpZiAoY2FsbGJhY2spIHtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZmlyZUNhbGxCYWNrKTtcbiAgfVxufVxuZnVuY3Rpb24gZWxlbWVudE91dGVyU2l6ZShlbCwgc2l6ZSwgaW5jbHVkZU1hcmdpbnMpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGlmIChpbmNsdWRlTWFyZ2lucykge1xuICAgIHJldHVybiBlbFtzaXplID09PSAnd2lkdGgnID8gJ29mZnNldFdpZHRoJyA6ICdvZmZzZXRIZWlnaHQnXSArIHBhcnNlRmxvYXQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoc2l6ZSA9PT0gJ3dpZHRoJyA/ICdtYXJnaW4tcmlnaHQnIDogJ21hcmdpbi10b3AnKSkgKyBwYXJzZUZsb2F0KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHNpemUgPT09ICd3aWR0aCcgPyAnbWFyZ2luLWxlZnQnIDogJ21hcmdpbi1ib3R0b20nKSk7XG4gIH1cbiAgcmV0dXJuIGVsLm9mZnNldFdpZHRoO1xufVxuZnVuY3Rpb24gbWFrZUVsZW1lbnRzQXJyYXkoZWwpIHtcbiAgcmV0dXJuIChBcnJheS5pc0FycmF5KGVsKSA/IGVsIDogW2VsXSkuZmlsdGVyKGUgPT4gISFlKTtcbn1cbmZ1bmN0aW9uIGdldFJvdGF0ZUZpeChzd2lwZXIpIHtcbiAgcmV0dXJuIHYgPT4ge1xuICAgIGlmIChNYXRoLmFicyh2KSA+IDAgJiYgc3dpcGVyLmJyb3dzZXIgJiYgc3dpcGVyLmJyb3dzZXIubmVlZDNkRml4ICYmIE1hdGguYWJzKHYpICUgOTAgPT09IDApIHtcbiAgICAgIHJldHVybiB2ICsgMC4wMDE7XG4gICAgfVxuICAgIHJldHVybiB2O1xuICB9O1xufVxuZnVuY3Rpb24gc2V0SW5uZXJIVE1MKGVsLCBodG1sKSB7XG4gIGlmIChodG1sID09PSB2b2lkIDApIHtcbiAgICBodG1sID0gJyc7XG4gIH1cbiAgaWYgKHR5cGVvZiB0cnVzdGVkVHlwZXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZWwuaW5uZXJIVE1MID0gdHJ1c3RlZFR5cGVzLmNyZWF0ZVBvbGljeSgnaHRtbCcsIHtcbiAgICAgIGNyZWF0ZUhUTUw6IHMgPT4gc1xuICAgIH0pLmNyZWF0ZUhUTUwoaHRtbCk7XG4gIH0gZWxzZSB7XG4gICAgZWwuaW5uZXJIVE1MID0gaHRtbDtcbiAgfVxufVxuXG5leHBvcnQgeyBzZXRDU1NQcm9wZXJ0eSBhcyBhLCBlbGVtZW50UGFyZW50cyBhcyBiLCBjcmVhdGVFbGVtZW50IGFzIGMsIGVsZW1lbnRPZmZzZXQgYXMgZCwgZWxlbWVudENoaWxkcmVuIGFzIGUsIG5vdyBhcyBmLCBnZXRTbGlkZVRyYW5zZm9ybUVsIGFzIGcsIGVsZW1lbnRPdXRlclNpemUgYXMgaCwgZWxlbWVudEluZGV4IGFzIGksIGNsYXNzZXNUb1Rva2VucyBhcyBqLCBnZXRUcmFuc2xhdGUgYXMgaywgZWxlbWVudFRyYW5zaXRpb25FbmQgYXMgbCwgbWFrZUVsZW1lbnRzQXJyYXkgYXMgbSwgbmV4dFRpY2sgYXMgbiwgaXNPYmplY3QgYXMgbywgZ2V0Um90YXRlRml4IGFzIHAsIGVsZW1lbnRTdHlsZSBhcyBxLCBlbGVtZW50TmV4dEFsbCBhcyByLCBzZXRJbm5lckhUTUwgYXMgcywgZWxlbWVudFByZXZBbGwgYXMgdCwgYW5pbWF0ZUNTU01vZGVTY3JvbGwgYXMgdSwgc2hvd1dhcm5pbmcgYXMgdiwgZWxlbWVudElzQ2hpbGRPZiBhcyB3LCBleHRlbmQgYXMgeCwgZGVsZXRlUHJvcHMgYXMgeSB9O1xuIl0sIm5hbWVzIjpbImEiLCJnZXRXaW5kb3ciLCJnIiwiZ2V0RG9jdW1lbnQiLCJjbGFzc2VzVG9Ub2tlbnMiLCJjbGFzc2VzIiwidHJpbSIsInNwbGl0IiwiZmlsdGVyIiwiYyIsImRlbGV0ZVByb3BzIiwib2JqIiwib2JqZWN0IiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJlIiwibmV4dFRpY2siLCJjYWxsYmFjayIsImRlbGF5Iiwic2V0VGltZW91dCIsIm5vdyIsIkRhdGUiLCJnZXRDb21wdXRlZFN0eWxlIiwiZWwiLCJ3aW5kb3ciLCJzdHlsZSIsImN1cnJlbnRTdHlsZSIsImdldFRyYW5zbGF0ZSIsImF4aXMiLCJtYXRyaXgiLCJjdXJUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1NYXRyaXgiLCJjdXJTdHlsZSIsIldlYktpdENTU01hdHJpeCIsInRyYW5zZm9ybSIsIndlYmtpdFRyYW5zZm9ybSIsImxlbmd0aCIsIm1hcCIsInJlcGxhY2UiLCJqb2luIiwiTW96VHJhbnNmb3JtIiwiT1RyYW5zZm9ybSIsIk1zVHJhbnNmb3JtIiwibXNUcmFuc2Zvcm0iLCJnZXRQcm9wZXJ0eVZhbHVlIiwidG9TdHJpbmciLCJtNDEiLCJwYXJzZUZsb2F0IiwibTQyIiwiaXNPYmplY3QiLCJvIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJjYWxsIiwic2xpY2UiLCJpc05vZGUiLCJub2RlIiwiSFRNTEVsZW1lbnQiLCJub2RlVHlwZSIsImV4dGVuZCIsInRvIiwiYXJndW1lbnRzIiwidW5kZWZpbmVkIiwibm9FeHRlbmQiLCJpIiwibmV4dFNvdXJjZSIsImtleXNBcnJheSIsImluZGV4T2YiLCJuZXh0SW5kZXgiLCJsZW4iLCJuZXh0S2V5IiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJfX3N3aXBlcl9fIiwic2V0Q1NTUHJvcGVydHkiLCJ2YXJOYW1lIiwidmFyVmFsdWUiLCJzZXRQcm9wZXJ0eSIsImFuaW1hdGVDU1NNb2RlU2Nyb2xsIiwiX3JlZiIsInN3aXBlciIsInRhcmdldFBvc2l0aW9uIiwic2lkZSIsInN0YXJ0UG9zaXRpb24iLCJ0cmFuc2xhdGUiLCJzdGFydFRpbWUiLCJ0aW1lIiwiZHVyYXRpb24iLCJwYXJhbXMiLCJzcGVlZCIsIndyYXBwZXJFbCIsInNjcm9sbFNuYXBUeXBlIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJjc3NNb2RlRnJhbWVJRCIsImRpciIsImlzT3V0T2ZCb3VuZCIsImN1cnJlbnQiLCJ0YXJnZXQiLCJhbmltYXRlIiwiZ2V0VGltZSIsInByb2dyZXNzIiwiTWF0aCIsIm1heCIsIm1pbiIsImVhc2VQcm9ncmVzcyIsImNvcyIsIlBJIiwiY3VycmVudFBvc2l0aW9uIiwic2Nyb2xsVG8iLCJvdmVyZmxvdyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImdldFNsaWRlVHJhbnNmb3JtRWwiLCJzbGlkZUVsIiwicXVlcnlTZWxlY3RvciIsInNoYWRvd1Jvb3QiLCJlbGVtZW50Q2hpbGRyZW4iLCJlbGVtZW50Iiwic2VsZWN0b3IiLCJjaGlsZHJlbiIsIkhUTUxTbG90RWxlbWVudCIsInB1c2giLCJhc3NpZ25lZEVsZW1lbnRzIiwibWF0Y2hlcyIsImVsZW1lbnRJc0NoaWxkT2ZTbG90Iiwic2xvdCIsImVsZW1lbnRzUXVldWUiLCJlbGVtZW50VG9DaGVjayIsInNoaWZ0IiwiZWxlbWVudElzQ2hpbGRPZiIsInBhcmVudCIsImlzQ2hpbGQiLCJjb250YWlucyIsImluY2x1ZGVzIiwic2hvd1dhcm5pbmciLCJ0ZXh0IiwiY29uc29sZSIsIndhcm4iLCJlcnIiLCJjcmVhdGVFbGVtZW50IiwidGFnIiwiZG9jdW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJBcnJheSIsImlzQXJyYXkiLCJlbGVtZW50T2Zmc2V0IiwiYm94IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYm9keSIsImNsaWVudFRvcCIsImNsaWVudExlZnQiLCJzY3JvbGxUb3AiLCJzY3JvbGxZIiwic2Nyb2xsTGVmdCIsInNjcm9sbFgiLCJ0b3AiLCJsZWZ0IiwiZWxlbWVudFByZXZBbGwiLCJwcmV2RWxzIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsInByZXYiLCJlbGVtZW50TmV4dEFsbCIsIm5leHRFbHMiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJuZXh0IiwiZWxlbWVudFN0eWxlIiwicHJvcCIsImVsZW1lbnRJbmRleCIsImNoaWxkIiwicHJldmlvdXNTaWJsaW5nIiwiZWxlbWVudFBhcmVudHMiLCJwYXJlbnRzIiwicGFyZW50RWxlbWVudCIsImVsZW1lbnRUcmFuc2l0aW9uRW5kIiwiZmlyZUNhbGxCYWNrIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJlbGVtZW50T3V0ZXJTaXplIiwic2l6ZSIsImluY2x1ZGVNYXJnaW5zIiwib2Zmc2V0V2lkdGgiLCJtYWtlRWxlbWVudHNBcnJheSIsImdldFJvdGF0ZUZpeCIsInYiLCJhYnMiLCJicm93c2VyIiwibmVlZDNkRml4Iiwic2V0SW5uZXJIVE1MIiwiaHRtbCIsInRydXN0ZWRUeXBlcyIsImlubmVySFRNTCIsImNyZWF0ZVBvbGljeSIsImNyZWF0ZUhUTUwiLCJzIiwiYiIsImQiLCJmIiwiaCIsImoiLCJrIiwibCIsIm0iLCJuIiwicCIsInEiLCJyIiwidCIsInUiLCJ3IiwieCIsInkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/shared/utils.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swiper/swiper-react.mjs":
/*!**********************************************!*\
  !*** ./node_modules/swiper/swiper-react.mjs ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Swiper: function() { return /* binding */ Swiper; },\n/* harmony export */   SwiperSlide: function() { return /* binding */ SwiperSlide; },\n/* harmony export */   useSwiper: function() { return /* binding */ useSwiper; },\n/* harmony export */   useSwiperSlide: function() { return /* binding */ useSwiperSlide; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _shared_swiper_core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared/swiper-core.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/swiper-core.mjs\");\n/* harmony import */ var _shared_update_on_virtual_data_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shared/update-on-virtual-data.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/update-on-virtual-data.mjs\");\n/* harmony import */ var _shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shared/update-swiper.mjs */ \"(app-pages-browser)/./node_modules/swiper/shared/update-swiper.mjs\");\n/**\n * Swiper React 11.2.8\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2025 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: May 23, 2025\n */ var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$();\n\n\n\n\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction isChildSwiperSlide(child) {\n    return child.type && child.type.displayName && child.type.displayName.includes(\"SwiperSlide\");\n}\nfunction processChildren(c) {\n    const slides = [];\n    react__WEBPACK_IMPORTED_MODULE_0__.Children.toArray(c).forEach((child)=>{\n        if (isChildSwiperSlide(child)) {\n            slides.push(child);\n        } else if (child.props && child.props.children) {\n            processChildren(child.props.children).forEach((slide)=>slides.push(slide));\n        }\n    });\n    return slides;\n}\nfunction getChildren(c) {\n    const slides = [];\n    const slots = {\n        \"container-start\": [],\n        \"container-end\": [],\n        \"wrapper-start\": [],\n        \"wrapper-end\": []\n    };\n    react__WEBPACK_IMPORTED_MODULE_0__.Children.toArray(c).forEach((child)=>{\n        if (isChildSwiperSlide(child)) {\n            slides.push(child);\n        } else if (child.props && child.props.slot && slots[child.props.slot]) {\n            slots[child.props.slot].push(child);\n        } else if (child.props && child.props.children) {\n            const foundSlides = processChildren(child.props.children);\n            if (foundSlides.length > 0) {\n                foundSlides.forEach((slide)=>slides.push(slide));\n            } else {\n                slots[\"container-end\"].push(child);\n            }\n        } else {\n            slots[\"container-end\"].push(child);\n        }\n    });\n    return {\n        slides,\n        slots\n    };\n}\nfunction renderVirtual(swiper, slides, virtualData) {\n    if (!virtualData) return null;\n    const getSlideIndex = (index)=>{\n        let slideIndex = index;\n        if (index < 0) {\n            slideIndex = slides.length + index;\n        } else if (slideIndex >= slides.length) {\n            // eslint-disable-next-line\n            slideIndex = slideIndex - slides.length;\n        }\n        return slideIndex;\n    };\n    const style = swiper.isHorizontal() ? {\n        [swiper.rtlTranslate ? \"right\" : \"left\"]: \"\".concat(virtualData.offset, \"px\")\n    } : {\n        top: \"\".concat(virtualData.offset, \"px\")\n    };\n    const { from, to } = virtualData;\n    const loopFrom = swiper.params.loop ? -slides.length : 0;\n    const loopTo = swiper.params.loop ? slides.length * 2 : slides.length;\n    const slidesToRender = [];\n    for(let i = loopFrom; i < loopTo; i += 1){\n        if (i >= from && i <= to) {\n            slidesToRender.push(slides[getSlideIndex(i)]);\n        }\n    }\n    return slidesToRender.map((child, index)=>{\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, {\n            swiper,\n            style,\n            key: child.props.virtualIndex || child.key || \"slide-\".concat(index)\n        });\n    });\n}\nfunction useIsomorphicLayoutEffect(callback, deps) {\n    _s();\n    // eslint-disable-next-line\n    if (false) {}\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(callback, deps);\n}\n_s(useIsomorphicLayoutEffect, \"MfQzVb+S69pSHKMDKIsojbuzFrw=\");\nconst SwiperSlideContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nconst useSwiperSlide = ()=>{\n    _s1();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SwiperSlideContext);\n};\n_s1(useSwiperSlide, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst SwiperContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nconst useSwiper = ()=>{\n    _s2();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SwiperContext);\n};\n_s2(useSwiper, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst Swiper = /*#__PURE__*/ _s3((0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(_c = _s3(function(_temp, externalElRef) {\n    _s3();\n    let { className, tag: Tag = \"div\", wrapperTag: WrapperTag = \"div\", children, onSwiper, ...rest } = _temp === void 0 ? {} : _temp;\n    let eventsAssigned = false;\n    const [containerClasses, setContainerClasses] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"swiper\");\n    const [virtualData, setVirtualData] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [breakpointChanged, setBreakpointChanged] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const initializedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const swiperElRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const swiperRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const oldPassedParamsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const oldSlides = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const nextElRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const prevElRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const paginationElRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const scrollbarElRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const { params: swiperParams, passedParams, rest: restProps, events } = (0,_shared_update_on_virtual_data_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(rest);\n    const { slides, slots } = getChildren(children);\n    const onBeforeBreakpoint = ()=>{\n        setBreakpointChanged(!breakpointChanged);\n    };\n    Object.assign(swiperParams.on, {\n        _containerClasses (swiper, classes) {\n            setContainerClasses(classes);\n        }\n    });\n    const initSwiper = ()=>{\n        // init swiper\n        Object.assign(swiperParams.on, events);\n        eventsAssigned = true;\n        const passParams = {\n            ...swiperParams\n        };\n        delete passParams.wrapperClass;\n        swiperRef.current = new _shared_swiper_core_mjs__WEBPACK_IMPORTED_MODULE_1__.S(passParams);\n        if (swiperRef.current.virtual && swiperRef.current.params.virtual.enabled) {\n            swiperRef.current.virtual.slides = slides;\n            const extendWith = {\n                cache: false,\n                slides,\n                renderExternal: setVirtualData,\n                renderExternalUpdate: false\n            };\n            (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.e)(swiperRef.current.params.virtual, extendWith);\n            (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.e)(swiperRef.current.originalParams.virtual, extendWith);\n        }\n    };\n    if (!swiperElRef.current) {\n        initSwiper();\n    }\n    // Listen for breakpoints change\n    if (swiperRef.current) {\n        swiperRef.current.on(\"_beforeBreakpoint\", onBeforeBreakpoint);\n    }\n    const attachEvents = ()=>{\n        if (eventsAssigned || !events || !swiperRef.current) return;\n        Object.keys(events).forEach((eventName)=>{\n            swiperRef.current.on(eventName, events[eventName]);\n        });\n    };\n    const detachEvents = ()=>{\n        if (!events || !swiperRef.current) return;\n        Object.keys(events).forEach((eventName)=>{\n            swiperRef.current.off(eventName, events[eventName]);\n        });\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        return ()=>{\n            if (swiperRef.current) swiperRef.current.off(\"_beforeBreakpoint\", onBeforeBreakpoint);\n        };\n    });\n    // set initialized flag\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!initializedRef.current && swiperRef.current) {\n            swiperRef.current.emitSlidesClasses();\n            initializedRef.current = true;\n        }\n    });\n    // mount swiper\n    useIsomorphicLayoutEffect(()=>{\n        if (externalElRef) {\n            externalElRef.current = swiperElRef.current;\n        }\n        if (!swiperElRef.current) return;\n        if (swiperRef.current.destroyed) {\n            initSwiper();\n        }\n        (0,_shared_update_on_virtual_data_mjs__WEBPACK_IMPORTED_MODULE_2__.m)({\n            el: swiperElRef.current,\n            nextEl: nextElRef.current,\n            prevEl: prevElRef.current,\n            paginationEl: paginationElRef.current,\n            scrollbarEl: scrollbarElRef.current,\n            swiper: swiperRef.current\n        }, swiperParams);\n        if (onSwiper && !swiperRef.current.destroyed) onSwiper(swiperRef.current);\n        // eslint-disable-next-line\n        return ()=>{\n            if (swiperRef.current && !swiperRef.current.destroyed) {\n                swiperRef.current.destroy(true, false);\n            }\n        };\n    }, []);\n    // watch for params change\n    useIsomorphicLayoutEffect(()=>{\n        attachEvents();\n        const changedParams = (0,_shared_update_on_virtual_data_mjs__WEBPACK_IMPORTED_MODULE_2__.a)(passedParams, oldPassedParamsRef.current, slides, oldSlides.current, (c)=>c.key);\n        oldPassedParamsRef.current = passedParams;\n        oldSlides.current = slides;\n        if (changedParams.length && swiperRef.current && !swiperRef.current.destroyed) {\n            (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.u)({\n                swiper: swiperRef.current,\n                slides,\n                passedParams,\n                changedParams,\n                nextEl: nextElRef.current,\n                prevEl: prevElRef.current,\n                scrollbarEl: scrollbarElRef.current,\n                paginationEl: paginationElRef.current\n            });\n        }\n        return ()=>{\n            detachEvents();\n        };\n    });\n    // update on virtual update\n    useIsomorphicLayoutEffect(()=>{\n        (0,_shared_update_on_virtual_data_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(swiperRef.current);\n    }, [\n        virtualData\n    ]);\n    // bypass swiper instance to slides\n    function renderSlides() {\n        if (swiperParams.virtual) {\n            return renderVirtual(swiperRef.current, slides, virtualData);\n        }\n        return slides.map((child, index)=>{\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, {\n                swiper: swiperRef.current,\n                swiperSlideIndex: index\n            });\n        });\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Tag, _extends({\n        ref: swiperElRef,\n        className: (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.d)(\"\".concat(containerClasses).concat(className ? \" \".concat(className) : \"\"))\n    }, restProps), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SwiperContext.Provider, {\n        value: swiperRef.current\n    }, slots[\"container-start\"], /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(WrapperTag, {\n        className: (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.w)(swiperParams.wrapperClass)\n    }, slots[\"wrapper-start\"], renderSlides(), slots[\"wrapper-end\"]), (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.n)(swiperParams) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: prevElRef,\n        className: \"swiper-button-prev\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: nextElRef,\n        className: \"swiper-button-next\"\n    })), (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.b)(swiperParams) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: scrollbarElRef,\n        className: \"swiper-scrollbar\"\n    }), (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(swiperParams) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: paginationElRef,\n        className: \"swiper-pagination\"\n    }), slots[\"container-end\"]));\n}, \"9TpQP0pvoIUmjWeYYfZrBH2X1HI=\", false, function() {\n    return [\n        useIsomorphicLayoutEffect,\n        useIsomorphicLayoutEffect,\n        useIsomorphicLayoutEffect\n    ];\n})), \"9TpQP0pvoIUmjWeYYfZrBH2X1HI=\", false, function() {\n    return [\n        useIsomorphicLayoutEffect,\n        useIsomorphicLayoutEffect,\n        useIsomorphicLayoutEffect\n    ];\n});\n_c1 = Swiper;\nSwiper.displayName = \"Swiper\";\nconst SwiperSlide = /*#__PURE__*/ _s4((0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(_c2 = _s4(function(_temp, externalRef) {\n    _s4();\n    let { tag: Tag = \"div\", children, className = \"\", swiper, zoom, lazy, virtualIndex, swiperSlideIndex, ...rest } = _temp === void 0 ? {} : _temp;\n    const slideElRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const [slideClasses, setSlideClasses] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"swiper-slide\");\n    const [lazyLoaded, setLazyLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    function updateClasses(_s, el, classNames) {\n        if (el === slideElRef.current) {\n            setSlideClasses(classNames);\n        }\n    }\n    useIsomorphicLayoutEffect(()=>{\n        if (typeof swiperSlideIndex !== \"undefined\") {\n            slideElRef.current.swiperSlideIndex = swiperSlideIndex;\n        }\n        if (externalRef) {\n            externalRef.current = slideElRef.current;\n        }\n        if (!slideElRef.current || !swiper) {\n            return;\n        }\n        if (swiper.destroyed) {\n            if (slideClasses !== \"swiper-slide\") {\n                setSlideClasses(\"swiper-slide\");\n            }\n            return;\n        }\n        swiper.on(\"_slideClass\", updateClasses);\n        // eslint-disable-next-line\n        return ()=>{\n            if (!swiper) return;\n            swiper.off(\"_slideClass\", updateClasses);\n        };\n    });\n    useIsomorphicLayoutEffect(()=>{\n        if (swiper && slideElRef.current && !swiper.destroyed) {\n            setSlideClasses(swiper.getSlideClasses(slideElRef.current));\n        }\n    }, [\n        swiper\n    ]);\n    const slideData = {\n        isActive: slideClasses.indexOf(\"swiper-slide-active\") >= 0,\n        isVisible: slideClasses.indexOf(\"swiper-slide-visible\") >= 0,\n        isPrev: slideClasses.indexOf(\"swiper-slide-prev\") >= 0,\n        isNext: slideClasses.indexOf(\"swiper-slide-next\") >= 0\n    };\n    const renderChildren = ()=>{\n        return typeof children === \"function\" ? children(slideData) : children;\n    };\n    const onLoad = ()=>{\n        setLazyLoaded(true);\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Tag, _extends({\n        ref: slideElRef,\n        className: (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.d)(\"\".concat(slideClasses).concat(className ? \" \".concat(className) : \"\")),\n        \"data-swiper-slide-index\": virtualIndex,\n        onLoad: onLoad\n    }, rest), zoom && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SwiperSlideContext.Provider, {\n        value: slideData\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"swiper-zoom-container\",\n        \"data-swiper-zoom\": typeof zoom === \"number\" ? zoom : undefined\n    }, renderChildren(), lazy && !lazyLoaded && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"swiper-lazy-preloader\"\n    }))), !zoom && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SwiperSlideContext.Provider, {\n        value: slideData\n    }, renderChildren(), lazy && !lazyLoaded && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"swiper-lazy-preloader\"\n    })));\n}, \"bKUP/jPUrlpe8syvr1k41XS7eQo=\", false, function() {\n    return [\n        useIsomorphicLayoutEffect,\n        useIsomorphicLayoutEffect\n    ];\n})), \"bKUP/jPUrlpe8syvr1k41XS7eQo=\", false, function() {\n    return [\n        useIsomorphicLayoutEffect,\n        useIsomorphicLayoutEffect\n    ];\n});\n_c3 = SwiperSlide;\nSwiperSlide.displayName = \"SwiperSlide\";\n\nvar _c, _c1, _c2, _c3;\n$RefreshReg$(_c, \"Swiper$forwardRef\");\n$RefreshReg$(_c1, \"Swiper\");\n$RefreshReg$(_c2, \"SwiperSlide$forwardRef\");\n$RefreshReg$(_c3, \"SwiperSlide\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swiper/swiper-react.mjs\n"));

/***/ })

});